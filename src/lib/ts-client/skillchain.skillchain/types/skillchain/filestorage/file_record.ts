// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/filestorage/file_record.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.filestorage";

export interface FileRecord {
  index: string;
  owner: string;
  filename: string;
  fileHash: string;
  fileSize: number;
  contentType: string;
  uploadDate: number;
  ipfsHash: string;
  metadata: string;
  isPublic: boolean;
  creator: string;
}

function createBaseFileRecord(): FileRecord {
  return {
    index: "",
    owner: "",
    filename: "",
    fileHash: "",
    fileSize: 0,
    contentType: "",
    uploadDate: 0,
    ipfsHash: "",
    metadata: "",
    isPublic: false,
    creator: "",
  };
}

export const FileRecord: MessageFns<FileRecord> = {
  encode(message: FileRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.filename !== "") {
      writer.uint32(26).string(message.filename);
    }
    if (message.fileHash !== "") {
      writer.uint32(34).string(message.fileHash);
    }
    if (message.fileSize !== 0) {
      writer.uint32(40).uint64(message.fileSize);
    }
    if (message.contentType !== "") {
      writer.uint32(50).string(message.contentType);
    }
    if (message.uploadDate !== 0) {
      writer.uint32(56).uint64(message.uploadDate);
    }
    if (message.ipfsHash !== "") {
      writer.uint32(66).string(message.ipfsHash);
    }
    if (message.metadata !== "") {
      writer.uint32(74).string(message.metadata);
    }
    if (message.isPublic !== false) {
      writer.uint32(80).bool(message.isPublic);
    }
    if (message.creator !== "") {
      writer.uint32(90).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileHash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileSize = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.uploadDate = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ipfsHash = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileRecord {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      fileHash: isSet(object.fileHash) ? globalThis.String(object.fileHash) : "",
      fileSize: isSet(object.fileSize) ? globalThis.Number(object.fileSize) : 0,
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      uploadDate: isSet(object.uploadDate) ? globalThis.Number(object.uploadDate) : 0,
      ipfsHash: isSet(object.ipfsHash) ? globalThis.String(object.ipfsHash) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: FileRecord): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.fileHash !== "") {
      obj.fileHash = message.fileHash;
    }
    if (message.fileSize !== 0) {
      obj.fileSize = Math.round(message.fileSize);
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.uploadDate !== 0) {
      obj.uploadDate = Math.round(message.uploadDate);
    }
    if (message.ipfsHash !== "") {
      obj.ipfsHash = message.ipfsHash;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileRecord>, I>>(base?: I): FileRecord {
    return FileRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileRecord>, I>>(object: I): FileRecord {
    const message = createBaseFileRecord();
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.filename = object.filename ?? "";
    message.fileHash = object.fileHash ?? "";
    message.fileSize = object.fileSize ?? 0;
    message.contentType = object.contentType ?? "";
    message.uploadDate = object.uploadDate ?? 0;
    message.ipfsHash = object.ipfsHash ?? "";
    message.metadata = object.metadata ?? "";
    message.isPublic = object.isPublic ?? false;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
