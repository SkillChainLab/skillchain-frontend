// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/analytics/revenue_record.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.analytics";

export interface RevenueRecord {
  index: string;
  transactionType: string;
  amount: number;
  currency: string;
  fromAddress: string;
  toAddress: string;
  timestamp: number;
  feeAmount: number;
  projectId: string;
  platformFee: number;
  creator: string;
}

function createBaseRevenueRecord(): RevenueRecord {
  return {
    index: "",
    transactionType: "",
    amount: 0,
    currency: "",
    fromAddress: "",
    toAddress: "",
    timestamp: 0,
    feeAmount: 0,
    projectId: "",
    platformFee: 0,
    creator: "",
  };
}

export const RevenueRecord: MessageFns<RevenueRecord> = {
  encode(message: RevenueRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.transactionType !== "") {
      writer.uint32(18).string(message.transactionType);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    if (message.fromAddress !== "") {
      writer.uint32(42).string(message.fromAddress);
    }
    if (message.toAddress !== "") {
      writer.uint32(50).string(message.toAddress);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).uint64(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      writer.uint32(64).uint64(message.feeAmount);
    }
    if (message.projectId !== "") {
      writer.uint32(74).string(message.projectId);
    }
    if (message.platformFee !== 0) {
      writer.uint32(80).uint64(message.platformFee);
    }
    if (message.creator !== "") {
      writer.uint32(90).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevenueRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevenueRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fromAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.feeAmount = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.platformFee = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevenueRecord {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      fromAddress: isSet(object.fromAddress) ? globalThis.String(object.fromAddress) : "",
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      feeAmount: isSet(object.feeAmount) ? globalThis.Number(object.feeAmount) : 0,
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      platformFee: isSet(object.platformFee) ? globalThis.Number(object.platformFee) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: RevenueRecord): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.fromAddress !== "") {
      obj.fromAddress = message.fromAddress;
    }
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      obj.feeAmount = Math.round(message.feeAmount);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.platformFee !== 0) {
      obj.platformFee = Math.round(message.platformFee);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevenueRecord>, I>>(base?: I): RevenueRecord {
    return RevenueRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevenueRecord>, I>>(object: I): RevenueRecord {
    const message = createBaseRevenueRecord();
    message.index = object.index ?? "";
    message.transactionType = object.transactionType ?? "";
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.fromAddress = object.fromAddress ?? "";
    message.toAddress = object.toAddress ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.feeAmount = object.feeAmount ?? 0;
    message.projectId = object.projectId ?? "";
    message.platformFee = object.platformFee ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
