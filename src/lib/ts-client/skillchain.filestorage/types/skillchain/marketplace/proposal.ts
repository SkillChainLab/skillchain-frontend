// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/proposal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.marketplace";

export interface Proposal {
  index: string;
  jobPostingId: string;
  freelancerAddress: string;
  proposedAmount: number;
  proposedCurrency: string;
  proposedTimeline: string;
  coverLetter: string;
  freelancerReputation: number;
  isAccepted: boolean;
  createdAt: number;
  creator: string;
}

function createBaseProposal(): Proposal {
  return {
    index: "",
    jobPostingId: "",
    freelancerAddress: "",
    proposedAmount: 0,
    proposedCurrency: "",
    proposedTimeline: "",
    coverLetter: "",
    freelancerReputation: 0,
    isAccepted: false,
    createdAt: 0,
    creator: "",
  };
}

export const Proposal: MessageFns<Proposal> = {
  encode(message: Proposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(18).string(message.jobPostingId);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(26).string(message.freelancerAddress);
    }
    if (message.proposedAmount !== 0) {
      writer.uint32(32).uint64(message.proposedAmount);
    }
    if (message.proposedCurrency !== "") {
      writer.uint32(42).string(message.proposedCurrency);
    }
    if (message.proposedTimeline !== "") {
      writer.uint32(50).string(message.proposedTimeline);
    }
    if (message.coverLetter !== "") {
      writer.uint32(58).string(message.coverLetter);
    }
    if (message.freelancerReputation !== 0) {
      writer.uint32(64).uint64(message.freelancerReputation);
    }
    if (message.isAccepted !== false) {
      writer.uint32(72).bool(message.isAccepted);
    }
    if (message.createdAt !== 0) {
      writer.uint32(80).int64(message.createdAt);
    }
    if (message.creator !== "") {
      writer.uint32(90).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.proposedAmount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proposedCurrency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proposedTimeline = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.coverLetter = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.freelancerReputation = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isAccepted = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proposal {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      proposedAmount: isSet(object.proposedAmount) ? globalThis.Number(object.proposedAmount) : 0,
      proposedCurrency: isSet(object.proposedCurrency) ? globalThis.String(object.proposedCurrency) : "",
      proposedTimeline: isSet(object.proposedTimeline) ? globalThis.String(object.proposedTimeline) : "",
      coverLetter: isSet(object.coverLetter) ? globalThis.String(object.coverLetter) : "",
      freelancerReputation: isSet(object.freelancerReputation) ? globalThis.Number(object.freelancerReputation) : 0,
      isAccepted: isSet(object.isAccepted) ? globalThis.Boolean(object.isAccepted) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Proposal): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.proposedAmount !== 0) {
      obj.proposedAmount = Math.round(message.proposedAmount);
    }
    if (message.proposedCurrency !== "") {
      obj.proposedCurrency = message.proposedCurrency;
    }
    if (message.proposedTimeline !== "") {
      obj.proposedTimeline = message.proposedTimeline;
    }
    if (message.coverLetter !== "") {
      obj.coverLetter = message.coverLetter;
    }
    if (message.freelancerReputation !== 0) {
      obj.freelancerReputation = Math.round(message.freelancerReputation);
    }
    if (message.isAccepted !== false) {
      obj.isAccepted = message.isAccepted;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Proposal>, I>>(base?: I): Proposal {
    return Proposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Proposal>, I>>(object: I): Proposal {
    const message = createBaseProposal();
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.proposedAmount = object.proposedAmount ?? 0;
    message.proposedCurrency = object.proposedCurrency ?? "";
    message.proposedTimeline = object.proposedTimeline ?? "";
    message.coverLetter = object.coverLetter ?? "";
    message.freelancerReputation = object.freelancerReputation ?? 0;
    message.isAccepted = object.isAccepted ?? false;
    message.createdAt = object.createdAt ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
