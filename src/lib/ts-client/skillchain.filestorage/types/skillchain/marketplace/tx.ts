// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "skillchain.marketplace";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateJobPosting {
  creator: string;
  index: string;
  clientAddress: string;
  title: string;
  description: string;
  skillsRequired: string;
  budgetAmount: string;
  paymentCurrency: string;
  deadline: string;
  isActive: string;
  createdAt: string;
}

export interface MsgCreateJobPostingResponse {
}

export interface MsgUpdateJobPosting {
  creator: string;
  index: string;
  clientAddress: string;
  title: string;
  description: string;
  skillsRequired: string;
  budgetAmount: string;
  paymentCurrency: string;
  deadline: string;
  isActive: string;
  createdAt: string;
}

export interface MsgUpdateJobPostingResponse {
}

export interface MsgDeleteJobPosting {
  creator: string;
  index: string;
}

export interface MsgDeleteJobPostingResponse {
}

export interface MsgCreateProposal {
  creator: string;
  index: string;
  jobPostingId: string;
  freelancerAddress: string;
  proposedAmount: string;
  proposedCurrency: string;
  proposedTimeline: string;
  coverLetter: string;
  freelancerReputation: string;
  isAccepted: string;
  createdAt: string;
}

export interface MsgCreateProposalResponse {
}

export interface MsgUpdateProposal {
  creator: string;
  index: string;
  jobPostingId: string;
  freelancerAddress: string;
  proposedAmount: string;
  proposedCurrency: string;
  proposedTimeline: string;
  coverLetter: string;
  freelancerReputation: string;
  isAccepted: string;
  createdAt: string;
}

export interface MsgUpdateProposalResponse {
}

export interface MsgDeleteProposal {
  creator: string;
  index: string;
}

export interface MsgDeleteProposalResponse {
}

export interface MsgCreateProject {
  creator: string;
  index: string;
  jobPostingId: string;
  proposalId: string;
  clientAddress: string;
  freelancerAddress: string;
  totalAmount: string;
  paidAmount: string;
  escrowAmount: string;
  status: string;
  startDate: string;
  expectedEndDate: string;
  actualEndDate: string;
}

export interface MsgCreateProjectResponse {
}

export interface MsgUpdateProject {
  creator: string;
  index: string;
  jobPostingId: string;
  proposalId: string;
  clientAddress: string;
  freelancerAddress: string;
  totalAmount: string;
  paidAmount: string;
  escrowAmount: string;
  status: string;
  startDate: string;
  expectedEndDate: string;
  actualEndDate: string;
}

export interface MsgUpdateProjectResponse {
}

export interface MsgDeleteProject {
  creator: string;
  index: string;
}

export interface MsgDeleteProjectResponse {
}

export interface MsgCreateMilestone {
  creator: string;
  index: string;
  projectId: string;
  title: string;
  description: string;
  amount: string;
  dueDate: string;
  status: string;
  isCompleted: string;
  isPaid: string;
  submittedAt: string;
  approvedAt: string;
}

export interface MsgCreateMilestoneResponse {
}

export interface MsgUpdateMilestone {
  creator: string;
  index: string;
  projectId: string;
  title: string;
  description: string;
  amount: string;
  dueDate: string;
  status: string;
  isCompleted: string;
  isPaid: string;
  submittedAt: string;
  approvedAt: string;
}

export interface MsgUpdateMilestoneResponse {
}

export interface MsgDeleteMilestone {
  creator: string;
  index: string;
}

export interface MsgDeleteMilestoneResponse {
}

export interface MsgAcceptProposal {
  creator: string;
  proposalId: string;
}

export interface MsgAcceptProposalResponse {
}

export interface MsgCompleteMilestone {
  creator: string;
  milestoneId: string;
  deliveryNotes: string;
}

export interface MsgCompleteMilestoneResponse {
}

export interface MsgReleasePayment {
  creator: string;
  milestoneId: string;
  rating: string;
  feedback: string;
}

export interface MsgReleasePaymentResponse {
}

export interface MsgDisputeProject {
  creator: string;
  projectId: string;
  reason: string;
  evidence: string;
}

export interface MsgDisputeProjectResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateJobPosting(): MsgCreateJobPosting {
  return {
    creator: "",
    index: "",
    clientAddress: "",
    title: "",
    description: "",
    skillsRequired: "",
    budgetAmount: "",
    paymentCurrency: "",
    deadline: "",
    isActive: "",
    createdAt: "",
  };
}

export const MsgCreateJobPosting: MessageFns<MsgCreateJobPosting> = {
  encode(message: MsgCreateJobPosting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.clientAddress !== "") {
      writer.uint32(26).string(message.clientAddress);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.skillsRequired !== "") {
      writer.uint32(50).string(message.skillsRequired);
    }
    if (message.budgetAmount !== "") {
      writer.uint32(58).string(message.budgetAmount);
    }
    if (message.paymentCurrency !== "") {
      writer.uint32(66).string(message.paymentCurrency);
    }
    if (message.deadline !== "") {
      writer.uint32(74).string(message.deadline);
    }
    if (message.isActive !== "") {
      writer.uint32(82).string(message.isActive);
    }
    if (message.createdAt !== "") {
      writer.uint32(90).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateJobPosting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateJobPosting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skillsRequired = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.budgetAmount = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.paymentCurrency = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.deadline = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isActive = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateJobPosting {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      skillsRequired: isSet(object.skillsRequired) ? globalThis.String(object.skillsRequired) : "",
      budgetAmount: isSet(object.budgetAmount) ? globalThis.String(object.budgetAmount) : "",
      paymentCurrency: isSet(object.paymentCurrency) ? globalThis.String(object.paymentCurrency) : "",
      deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : "",
      isActive: isSet(object.isActive) ? globalThis.String(object.isActive) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: MsgCreateJobPosting): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.skillsRequired !== "") {
      obj.skillsRequired = message.skillsRequired;
    }
    if (message.budgetAmount !== "") {
      obj.budgetAmount = message.budgetAmount;
    }
    if (message.paymentCurrency !== "") {
      obj.paymentCurrency = message.paymentCurrency;
    }
    if (message.deadline !== "") {
      obj.deadline = message.deadline;
    }
    if (message.isActive !== "") {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateJobPosting>, I>>(base?: I): MsgCreateJobPosting {
    return MsgCreateJobPosting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateJobPosting>, I>>(object: I): MsgCreateJobPosting {
    const message = createBaseMsgCreateJobPosting();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.skillsRequired = object.skillsRequired ?? "";
    message.budgetAmount = object.budgetAmount ?? "";
    message.paymentCurrency = object.paymentCurrency ?? "";
    message.deadline = object.deadline ?? "";
    message.isActive = object.isActive ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseMsgCreateJobPostingResponse(): MsgCreateJobPostingResponse {
  return {};
}

export const MsgCreateJobPostingResponse: MessageFns<MsgCreateJobPostingResponse> = {
  encode(_: MsgCreateJobPostingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateJobPostingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateJobPostingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateJobPostingResponse {
    return {};
  },

  toJSON(_: MsgCreateJobPostingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateJobPostingResponse>, I>>(base?: I): MsgCreateJobPostingResponse {
    return MsgCreateJobPostingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateJobPostingResponse>, I>>(_: I): MsgCreateJobPostingResponse {
    const message = createBaseMsgCreateJobPostingResponse();
    return message;
  },
};

function createBaseMsgUpdateJobPosting(): MsgUpdateJobPosting {
  return {
    creator: "",
    index: "",
    clientAddress: "",
    title: "",
    description: "",
    skillsRequired: "",
    budgetAmount: "",
    paymentCurrency: "",
    deadline: "",
    isActive: "",
    createdAt: "",
  };
}

export const MsgUpdateJobPosting: MessageFns<MsgUpdateJobPosting> = {
  encode(message: MsgUpdateJobPosting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.clientAddress !== "") {
      writer.uint32(26).string(message.clientAddress);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.skillsRequired !== "") {
      writer.uint32(50).string(message.skillsRequired);
    }
    if (message.budgetAmount !== "") {
      writer.uint32(58).string(message.budgetAmount);
    }
    if (message.paymentCurrency !== "") {
      writer.uint32(66).string(message.paymentCurrency);
    }
    if (message.deadline !== "") {
      writer.uint32(74).string(message.deadline);
    }
    if (message.isActive !== "") {
      writer.uint32(82).string(message.isActive);
    }
    if (message.createdAt !== "") {
      writer.uint32(90).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateJobPosting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateJobPosting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skillsRequired = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.budgetAmount = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.paymentCurrency = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.deadline = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isActive = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateJobPosting {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      skillsRequired: isSet(object.skillsRequired) ? globalThis.String(object.skillsRequired) : "",
      budgetAmount: isSet(object.budgetAmount) ? globalThis.String(object.budgetAmount) : "",
      paymentCurrency: isSet(object.paymentCurrency) ? globalThis.String(object.paymentCurrency) : "",
      deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : "",
      isActive: isSet(object.isActive) ? globalThis.String(object.isActive) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: MsgUpdateJobPosting): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.skillsRequired !== "") {
      obj.skillsRequired = message.skillsRequired;
    }
    if (message.budgetAmount !== "") {
      obj.budgetAmount = message.budgetAmount;
    }
    if (message.paymentCurrency !== "") {
      obj.paymentCurrency = message.paymentCurrency;
    }
    if (message.deadline !== "") {
      obj.deadline = message.deadline;
    }
    if (message.isActive !== "") {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateJobPosting>, I>>(base?: I): MsgUpdateJobPosting {
    return MsgUpdateJobPosting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateJobPosting>, I>>(object: I): MsgUpdateJobPosting {
    const message = createBaseMsgUpdateJobPosting();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.skillsRequired = object.skillsRequired ?? "";
    message.budgetAmount = object.budgetAmount ?? "";
    message.paymentCurrency = object.paymentCurrency ?? "";
    message.deadline = object.deadline ?? "";
    message.isActive = object.isActive ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseMsgUpdateJobPostingResponse(): MsgUpdateJobPostingResponse {
  return {};
}

export const MsgUpdateJobPostingResponse: MessageFns<MsgUpdateJobPostingResponse> = {
  encode(_: MsgUpdateJobPostingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateJobPostingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateJobPostingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateJobPostingResponse {
    return {};
  },

  toJSON(_: MsgUpdateJobPostingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateJobPostingResponse>, I>>(base?: I): MsgUpdateJobPostingResponse {
    return MsgUpdateJobPostingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateJobPostingResponse>, I>>(_: I): MsgUpdateJobPostingResponse {
    const message = createBaseMsgUpdateJobPostingResponse();
    return message;
  },
};

function createBaseMsgDeleteJobPosting(): MsgDeleteJobPosting {
  return { creator: "", index: "" };
}

export const MsgDeleteJobPosting: MessageFns<MsgDeleteJobPosting> = {
  encode(message: MsgDeleteJobPosting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteJobPosting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteJobPosting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteJobPosting {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteJobPosting): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteJobPosting>, I>>(base?: I): MsgDeleteJobPosting {
    return MsgDeleteJobPosting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteJobPosting>, I>>(object: I): MsgDeleteJobPosting {
    const message = createBaseMsgDeleteJobPosting();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteJobPostingResponse(): MsgDeleteJobPostingResponse {
  return {};
}

export const MsgDeleteJobPostingResponse: MessageFns<MsgDeleteJobPostingResponse> = {
  encode(_: MsgDeleteJobPostingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteJobPostingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteJobPostingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteJobPostingResponse {
    return {};
  },

  toJSON(_: MsgDeleteJobPostingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteJobPostingResponse>, I>>(base?: I): MsgDeleteJobPostingResponse {
    return MsgDeleteJobPostingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteJobPostingResponse>, I>>(_: I): MsgDeleteJobPostingResponse {
    const message = createBaseMsgDeleteJobPostingResponse();
    return message;
  },
};

function createBaseMsgCreateProposal(): MsgCreateProposal {
  return {
    creator: "",
    index: "",
    jobPostingId: "",
    freelancerAddress: "",
    proposedAmount: "",
    proposedCurrency: "",
    proposedTimeline: "",
    coverLetter: "",
    freelancerReputation: "",
    isAccepted: "",
    createdAt: "",
  };
}

export const MsgCreateProposal: MessageFns<MsgCreateProposal> = {
  encode(message: MsgCreateProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(26).string(message.jobPostingId);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(34).string(message.freelancerAddress);
    }
    if (message.proposedAmount !== "") {
      writer.uint32(42).string(message.proposedAmount);
    }
    if (message.proposedCurrency !== "") {
      writer.uint32(50).string(message.proposedCurrency);
    }
    if (message.proposedTimeline !== "") {
      writer.uint32(58).string(message.proposedTimeline);
    }
    if (message.coverLetter !== "") {
      writer.uint32(66).string(message.coverLetter);
    }
    if (message.freelancerReputation !== "") {
      writer.uint32(74).string(message.freelancerReputation);
    }
    if (message.isAccepted !== "") {
      writer.uint32(82).string(message.isAccepted);
    }
    if (message.createdAt !== "") {
      writer.uint32(90).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proposedAmount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proposedCurrency = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.proposedTimeline = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.coverLetter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.freelancerReputation = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isAccepted = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProposal {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      proposedAmount: isSet(object.proposedAmount) ? globalThis.String(object.proposedAmount) : "",
      proposedCurrency: isSet(object.proposedCurrency) ? globalThis.String(object.proposedCurrency) : "",
      proposedTimeline: isSet(object.proposedTimeline) ? globalThis.String(object.proposedTimeline) : "",
      coverLetter: isSet(object.coverLetter) ? globalThis.String(object.coverLetter) : "",
      freelancerReputation: isSet(object.freelancerReputation) ? globalThis.String(object.freelancerReputation) : "",
      isAccepted: isSet(object.isAccepted) ? globalThis.String(object.isAccepted) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: MsgCreateProposal): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.proposedAmount !== "") {
      obj.proposedAmount = message.proposedAmount;
    }
    if (message.proposedCurrency !== "") {
      obj.proposedCurrency = message.proposedCurrency;
    }
    if (message.proposedTimeline !== "") {
      obj.proposedTimeline = message.proposedTimeline;
    }
    if (message.coverLetter !== "") {
      obj.coverLetter = message.coverLetter;
    }
    if (message.freelancerReputation !== "") {
      obj.freelancerReputation = message.freelancerReputation;
    }
    if (message.isAccepted !== "") {
      obj.isAccepted = message.isAccepted;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProposal>, I>>(base?: I): MsgCreateProposal {
    return MsgCreateProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProposal>, I>>(object: I): MsgCreateProposal {
    const message = createBaseMsgCreateProposal();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.proposedAmount = object.proposedAmount ?? "";
    message.proposedCurrency = object.proposedCurrency ?? "";
    message.proposedTimeline = object.proposedTimeline ?? "";
    message.coverLetter = object.coverLetter ?? "";
    message.freelancerReputation = object.freelancerReputation ?? "";
    message.isAccepted = object.isAccepted ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseMsgCreateProposalResponse(): MsgCreateProposalResponse {
  return {};
}

export const MsgCreateProposalResponse: MessageFns<MsgCreateProposalResponse> = {
  encode(_: MsgCreateProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProposalResponse {
    return {};
  },

  toJSON(_: MsgCreateProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProposalResponse>, I>>(base?: I): MsgCreateProposalResponse {
    return MsgCreateProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProposalResponse>, I>>(_: I): MsgCreateProposalResponse {
    const message = createBaseMsgCreateProposalResponse();
    return message;
  },
};

function createBaseMsgUpdateProposal(): MsgUpdateProposal {
  return {
    creator: "",
    index: "",
    jobPostingId: "",
    freelancerAddress: "",
    proposedAmount: "",
    proposedCurrency: "",
    proposedTimeline: "",
    coverLetter: "",
    freelancerReputation: "",
    isAccepted: "",
    createdAt: "",
  };
}

export const MsgUpdateProposal: MessageFns<MsgUpdateProposal> = {
  encode(message: MsgUpdateProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(26).string(message.jobPostingId);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(34).string(message.freelancerAddress);
    }
    if (message.proposedAmount !== "") {
      writer.uint32(42).string(message.proposedAmount);
    }
    if (message.proposedCurrency !== "") {
      writer.uint32(50).string(message.proposedCurrency);
    }
    if (message.proposedTimeline !== "") {
      writer.uint32(58).string(message.proposedTimeline);
    }
    if (message.coverLetter !== "") {
      writer.uint32(66).string(message.coverLetter);
    }
    if (message.freelancerReputation !== "") {
      writer.uint32(74).string(message.freelancerReputation);
    }
    if (message.isAccepted !== "") {
      writer.uint32(82).string(message.isAccepted);
    }
    if (message.createdAt !== "") {
      writer.uint32(90).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proposedAmount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proposedCurrency = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.proposedTimeline = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.coverLetter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.freelancerReputation = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isAccepted = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateProposal {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      proposedAmount: isSet(object.proposedAmount) ? globalThis.String(object.proposedAmount) : "",
      proposedCurrency: isSet(object.proposedCurrency) ? globalThis.String(object.proposedCurrency) : "",
      proposedTimeline: isSet(object.proposedTimeline) ? globalThis.String(object.proposedTimeline) : "",
      coverLetter: isSet(object.coverLetter) ? globalThis.String(object.coverLetter) : "",
      freelancerReputation: isSet(object.freelancerReputation) ? globalThis.String(object.freelancerReputation) : "",
      isAccepted: isSet(object.isAccepted) ? globalThis.String(object.isAccepted) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: MsgUpdateProposal): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.proposedAmount !== "") {
      obj.proposedAmount = message.proposedAmount;
    }
    if (message.proposedCurrency !== "") {
      obj.proposedCurrency = message.proposedCurrency;
    }
    if (message.proposedTimeline !== "") {
      obj.proposedTimeline = message.proposedTimeline;
    }
    if (message.coverLetter !== "") {
      obj.coverLetter = message.coverLetter;
    }
    if (message.freelancerReputation !== "") {
      obj.freelancerReputation = message.freelancerReputation;
    }
    if (message.isAccepted !== "") {
      obj.isAccepted = message.isAccepted;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProposal>, I>>(base?: I): MsgUpdateProposal {
    return MsgUpdateProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProposal>, I>>(object: I): MsgUpdateProposal {
    const message = createBaseMsgUpdateProposal();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.proposedAmount = object.proposedAmount ?? "";
    message.proposedCurrency = object.proposedCurrency ?? "";
    message.proposedTimeline = object.proposedTimeline ?? "";
    message.coverLetter = object.coverLetter ?? "";
    message.freelancerReputation = object.freelancerReputation ?? "";
    message.isAccepted = object.isAccepted ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseMsgUpdateProposalResponse(): MsgUpdateProposalResponse {
  return {};
}

export const MsgUpdateProposalResponse: MessageFns<MsgUpdateProposalResponse> = {
  encode(_: MsgUpdateProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateProposalResponse {
    return {};
  },

  toJSON(_: MsgUpdateProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProposalResponse>, I>>(base?: I): MsgUpdateProposalResponse {
    return MsgUpdateProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProposalResponse>, I>>(_: I): MsgUpdateProposalResponse {
    const message = createBaseMsgUpdateProposalResponse();
    return message;
  },
};

function createBaseMsgDeleteProposal(): MsgDeleteProposal {
  return { creator: "", index: "" };
}

export const MsgDeleteProposal: MessageFns<MsgDeleteProposal> = {
  encode(message: MsgDeleteProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteProposal {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteProposal): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteProposal>, I>>(base?: I): MsgDeleteProposal {
    return MsgDeleteProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteProposal>, I>>(object: I): MsgDeleteProposal {
    const message = createBaseMsgDeleteProposal();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteProposalResponse(): MsgDeleteProposalResponse {
  return {};
}

export const MsgDeleteProposalResponse: MessageFns<MsgDeleteProposalResponse> = {
  encode(_: MsgDeleteProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteProposalResponse {
    return {};
  },

  toJSON(_: MsgDeleteProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteProposalResponse>, I>>(base?: I): MsgDeleteProposalResponse {
    return MsgDeleteProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteProposalResponse>, I>>(_: I): MsgDeleteProposalResponse {
    const message = createBaseMsgDeleteProposalResponse();
    return message;
  },
};

function createBaseMsgCreateProject(): MsgCreateProject {
  return {
    creator: "",
    index: "",
    jobPostingId: "",
    proposalId: "",
    clientAddress: "",
    freelancerAddress: "",
    totalAmount: "",
    paidAmount: "",
    escrowAmount: "",
    status: "",
    startDate: "",
    expectedEndDate: "",
    actualEndDate: "",
  };
}

export const MsgCreateProject: MessageFns<MsgCreateProject> = {
  encode(message: MsgCreateProject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(26).string(message.jobPostingId);
    }
    if (message.proposalId !== "") {
      writer.uint32(34).string(message.proposalId);
    }
    if (message.clientAddress !== "") {
      writer.uint32(42).string(message.clientAddress);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(50).string(message.freelancerAddress);
    }
    if (message.totalAmount !== "") {
      writer.uint32(58).string(message.totalAmount);
    }
    if (message.paidAmount !== "") {
      writer.uint32(66).string(message.paidAmount);
    }
    if (message.escrowAmount !== "") {
      writer.uint32(74).string(message.escrowAmount);
    }
    if (message.status !== "") {
      writer.uint32(82).string(message.status);
    }
    if (message.startDate !== "") {
      writer.uint32(90).string(message.startDate);
    }
    if (message.expectedEndDate !== "") {
      writer.uint32(98).string(message.expectedEndDate);
    }
    if (message.actualEndDate !== "") {
      writer.uint32(106).string(message.actualEndDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proposalId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.totalAmount = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.paidAmount = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.escrowAmount = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.expectedEndDate = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.actualEndDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProject {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      totalAmount: isSet(object.totalAmount) ? globalThis.String(object.totalAmount) : "",
      paidAmount: isSet(object.paidAmount) ? globalThis.String(object.paidAmount) : "",
      escrowAmount: isSet(object.escrowAmount) ? globalThis.String(object.escrowAmount) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      expectedEndDate: isSet(object.expectedEndDate) ? globalThis.String(object.expectedEndDate) : "",
      actualEndDate: isSet(object.actualEndDate) ? globalThis.String(object.actualEndDate) : "",
    };
  },

  toJSON(message: MsgCreateProject): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.proposalId !== "") {
      obj.proposalId = message.proposalId;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.totalAmount !== "") {
      obj.totalAmount = message.totalAmount;
    }
    if (message.paidAmount !== "") {
      obj.paidAmount = message.paidAmount;
    }
    if (message.escrowAmount !== "") {
      obj.escrowAmount = message.escrowAmount;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.expectedEndDate !== "") {
      obj.expectedEndDate = message.expectedEndDate;
    }
    if (message.actualEndDate !== "") {
      obj.actualEndDate = message.actualEndDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProject>, I>>(base?: I): MsgCreateProject {
    return MsgCreateProject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProject>, I>>(object: I): MsgCreateProject {
    const message = createBaseMsgCreateProject();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.proposalId = object.proposalId ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.totalAmount = object.totalAmount ?? "";
    message.paidAmount = object.paidAmount ?? "";
    message.escrowAmount = object.escrowAmount ?? "";
    message.status = object.status ?? "";
    message.startDate = object.startDate ?? "";
    message.expectedEndDate = object.expectedEndDate ?? "";
    message.actualEndDate = object.actualEndDate ?? "";
    return message;
  },
};

function createBaseMsgCreateProjectResponse(): MsgCreateProjectResponse {
  return {};
}

export const MsgCreateProjectResponse: MessageFns<MsgCreateProjectResponse> = {
  encode(_: MsgCreateProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProjectResponse {
    return {};
  },

  toJSON(_: MsgCreateProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProjectResponse>, I>>(base?: I): MsgCreateProjectResponse {
    return MsgCreateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProjectResponse>, I>>(_: I): MsgCreateProjectResponse {
    const message = createBaseMsgCreateProjectResponse();
    return message;
  },
};

function createBaseMsgUpdateProject(): MsgUpdateProject {
  return {
    creator: "",
    index: "",
    jobPostingId: "",
    proposalId: "",
    clientAddress: "",
    freelancerAddress: "",
    totalAmount: "",
    paidAmount: "",
    escrowAmount: "",
    status: "",
    startDate: "",
    expectedEndDate: "",
    actualEndDate: "",
  };
}

export const MsgUpdateProject: MessageFns<MsgUpdateProject> = {
  encode(message: MsgUpdateProject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(26).string(message.jobPostingId);
    }
    if (message.proposalId !== "") {
      writer.uint32(34).string(message.proposalId);
    }
    if (message.clientAddress !== "") {
      writer.uint32(42).string(message.clientAddress);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(50).string(message.freelancerAddress);
    }
    if (message.totalAmount !== "") {
      writer.uint32(58).string(message.totalAmount);
    }
    if (message.paidAmount !== "") {
      writer.uint32(66).string(message.paidAmount);
    }
    if (message.escrowAmount !== "") {
      writer.uint32(74).string(message.escrowAmount);
    }
    if (message.status !== "") {
      writer.uint32(82).string(message.status);
    }
    if (message.startDate !== "") {
      writer.uint32(90).string(message.startDate);
    }
    if (message.expectedEndDate !== "") {
      writer.uint32(98).string(message.expectedEndDate);
    }
    if (message.actualEndDate !== "") {
      writer.uint32(106).string(message.actualEndDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proposalId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.totalAmount = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.paidAmount = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.escrowAmount = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.expectedEndDate = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.actualEndDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateProject {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      totalAmount: isSet(object.totalAmount) ? globalThis.String(object.totalAmount) : "",
      paidAmount: isSet(object.paidAmount) ? globalThis.String(object.paidAmount) : "",
      escrowAmount: isSet(object.escrowAmount) ? globalThis.String(object.escrowAmount) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      expectedEndDate: isSet(object.expectedEndDate) ? globalThis.String(object.expectedEndDate) : "",
      actualEndDate: isSet(object.actualEndDate) ? globalThis.String(object.actualEndDate) : "",
    };
  },

  toJSON(message: MsgUpdateProject): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.proposalId !== "") {
      obj.proposalId = message.proposalId;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.totalAmount !== "") {
      obj.totalAmount = message.totalAmount;
    }
    if (message.paidAmount !== "") {
      obj.paidAmount = message.paidAmount;
    }
    if (message.escrowAmount !== "") {
      obj.escrowAmount = message.escrowAmount;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.expectedEndDate !== "") {
      obj.expectedEndDate = message.expectedEndDate;
    }
    if (message.actualEndDate !== "") {
      obj.actualEndDate = message.actualEndDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProject>, I>>(base?: I): MsgUpdateProject {
    return MsgUpdateProject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProject>, I>>(object: I): MsgUpdateProject {
    const message = createBaseMsgUpdateProject();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.proposalId = object.proposalId ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.totalAmount = object.totalAmount ?? "";
    message.paidAmount = object.paidAmount ?? "";
    message.escrowAmount = object.escrowAmount ?? "";
    message.status = object.status ?? "";
    message.startDate = object.startDate ?? "";
    message.expectedEndDate = object.expectedEndDate ?? "";
    message.actualEndDate = object.actualEndDate ?? "";
    return message;
  },
};

function createBaseMsgUpdateProjectResponse(): MsgUpdateProjectResponse {
  return {};
}

export const MsgUpdateProjectResponse: MessageFns<MsgUpdateProjectResponse> = {
  encode(_: MsgUpdateProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateProjectResponse {
    return {};
  },

  toJSON(_: MsgUpdateProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateProjectResponse>, I>>(base?: I): MsgUpdateProjectResponse {
    return MsgUpdateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateProjectResponse>, I>>(_: I): MsgUpdateProjectResponse {
    const message = createBaseMsgUpdateProjectResponse();
    return message;
  },
};

function createBaseMsgDeleteProject(): MsgDeleteProject {
  return { creator: "", index: "" };
}

export const MsgDeleteProject: MessageFns<MsgDeleteProject> = {
  encode(message: MsgDeleteProject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteProject {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteProject): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteProject>, I>>(base?: I): MsgDeleteProject {
    return MsgDeleteProject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteProject>, I>>(object: I): MsgDeleteProject {
    const message = createBaseMsgDeleteProject();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteProjectResponse(): MsgDeleteProjectResponse {
  return {};
}

export const MsgDeleteProjectResponse: MessageFns<MsgDeleteProjectResponse> = {
  encode(_: MsgDeleteProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteProjectResponse {
    return {};
  },

  toJSON(_: MsgDeleteProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteProjectResponse>, I>>(base?: I): MsgDeleteProjectResponse {
    return MsgDeleteProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteProjectResponse>, I>>(_: I): MsgDeleteProjectResponse {
    const message = createBaseMsgDeleteProjectResponse();
    return message;
  },
};

function createBaseMsgCreateMilestone(): MsgCreateMilestone {
  return {
    creator: "",
    index: "",
    projectId: "",
    title: "",
    description: "",
    amount: "",
    dueDate: "",
    status: "",
    isCompleted: "",
    isPaid: "",
    submittedAt: "",
    approvedAt: "",
  };
}

export const MsgCreateMilestone: MessageFns<MsgCreateMilestone> = {
  encode(message: MsgCreateMilestone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.amount !== "") {
      writer.uint32(50).string(message.amount);
    }
    if (message.dueDate !== "") {
      writer.uint32(58).string(message.dueDate);
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    if (message.isCompleted !== "") {
      writer.uint32(74).string(message.isCompleted);
    }
    if (message.isPaid !== "") {
      writer.uint32(82).string(message.isPaid);
    }
    if (message.submittedAt !== "") {
      writer.uint32(90).string(message.submittedAt);
    }
    if (message.approvedAt !== "") {
      writer.uint32(98).string(message.approvedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateMilestone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMilestone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dueDate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.isCompleted = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isPaid = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.submittedAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.approvedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMilestone {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      dueDate: isSet(object.dueDate) ? globalThis.String(object.dueDate) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      isCompleted: isSet(object.isCompleted) ? globalThis.String(object.isCompleted) : "",
      isPaid: isSet(object.isPaid) ? globalThis.String(object.isPaid) : "",
      submittedAt: isSet(object.submittedAt) ? globalThis.String(object.submittedAt) : "",
      approvedAt: isSet(object.approvedAt) ? globalThis.String(object.approvedAt) : "",
    };
  },

  toJSON(message: MsgCreateMilestone): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.dueDate !== "") {
      obj.dueDate = message.dueDate;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.isCompleted !== "") {
      obj.isCompleted = message.isCompleted;
    }
    if (message.isPaid !== "") {
      obj.isPaid = message.isPaid;
    }
    if (message.submittedAt !== "") {
      obj.submittedAt = message.submittedAt;
    }
    if (message.approvedAt !== "") {
      obj.approvedAt = message.approvedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMilestone>, I>>(base?: I): MsgCreateMilestone {
    return MsgCreateMilestone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMilestone>, I>>(object: I): MsgCreateMilestone {
    const message = createBaseMsgCreateMilestone();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.projectId = object.projectId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? "";
    message.dueDate = object.dueDate ?? "";
    message.status = object.status ?? "";
    message.isCompleted = object.isCompleted ?? "";
    message.isPaid = object.isPaid ?? "";
    message.submittedAt = object.submittedAt ?? "";
    message.approvedAt = object.approvedAt ?? "";
    return message;
  },
};

function createBaseMsgCreateMilestoneResponse(): MsgCreateMilestoneResponse {
  return {};
}

export const MsgCreateMilestoneResponse: MessageFns<MsgCreateMilestoneResponse> = {
  encode(_: MsgCreateMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateMilestoneResponse {
    return {};
  },

  toJSON(_: MsgCreateMilestoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMilestoneResponse>, I>>(base?: I): MsgCreateMilestoneResponse {
    return MsgCreateMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMilestoneResponse>, I>>(_: I): MsgCreateMilestoneResponse {
    const message = createBaseMsgCreateMilestoneResponse();
    return message;
  },
};

function createBaseMsgUpdateMilestone(): MsgUpdateMilestone {
  return {
    creator: "",
    index: "",
    projectId: "",
    title: "",
    description: "",
    amount: "",
    dueDate: "",
    status: "",
    isCompleted: "",
    isPaid: "",
    submittedAt: "",
    approvedAt: "",
  };
}

export const MsgUpdateMilestone: MessageFns<MsgUpdateMilestone> = {
  encode(message: MsgUpdateMilestone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.amount !== "") {
      writer.uint32(50).string(message.amount);
    }
    if (message.dueDate !== "") {
      writer.uint32(58).string(message.dueDate);
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    if (message.isCompleted !== "") {
      writer.uint32(74).string(message.isCompleted);
    }
    if (message.isPaid !== "") {
      writer.uint32(82).string(message.isPaid);
    }
    if (message.submittedAt !== "") {
      writer.uint32(90).string(message.submittedAt);
    }
    if (message.approvedAt !== "") {
      writer.uint32(98).string(message.approvedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMilestone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMilestone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dueDate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.isCompleted = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.isPaid = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.submittedAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.approvedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateMilestone {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      dueDate: isSet(object.dueDate) ? globalThis.String(object.dueDate) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      isCompleted: isSet(object.isCompleted) ? globalThis.String(object.isCompleted) : "",
      isPaid: isSet(object.isPaid) ? globalThis.String(object.isPaid) : "",
      submittedAt: isSet(object.submittedAt) ? globalThis.String(object.submittedAt) : "",
      approvedAt: isSet(object.approvedAt) ? globalThis.String(object.approvedAt) : "",
    };
  },

  toJSON(message: MsgUpdateMilestone): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.dueDate !== "") {
      obj.dueDate = message.dueDate;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.isCompleted !== "") {
      obj.isCompleted = message.isCompleted;
    }
    if (message.isPaid !== "") {
      obj.isPaid = message.isPaid;
    }
    if (message.submittedAt !== "") {
      obj.submittedAt = message.submittedAt;
    }
    if (message.approvedAt !== "") {
      obj.approvedAt = message.approvedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMilestone>, I>>(base?: I): MsgUpdateMilestone {
    return MsgUpdateMilestone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMilestone>, I>>(object: I): MsgUpdateMilestone {
    const message = createBaseMsgUpdateMilestone();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.projectId = object.projectId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? "";
    message.dueDate = object.dueDate ?? "";
    message.status = object.status ?? "";
    message.isCompleted = object.isCompleted ?? "";
    message.isPaid = object.isPaid ?? "";
    message.submittedAt = object.submittedAt ?? "";
    message.approvedAt = object.approvedAt ?? "";
    return message;
  },
};

function createBaseMsgUpdateMilestoneResponse(): MsgUpdateMilestoneResponse {
  return {};
}

export const MsgUpdateMilestoneResponse: MessageFns<MsgUpdateMilestoneResponse> = {
  encode(_: MsgUpdateMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateMilestoneResponse {
    return {};
  },

  toJSON(_: MsgUpdateMilestoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMilestoneResponse>, I>>(base?: I): MsgUpdateMilestoneResponse {
    return MsgUpdateMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMilestoneResponse>, I>>(_: I): MsgUpdateMilestoneResponse {
    const message = createBaseMsgUpdateMilestoneResponse();
    return message;
  },
};

function createBaseMsgDeleteMilestone(): MsgDeleteMilestone {
  return { creator: "", index: "" };
}

export const MsgDeleteMilestone: MessageFns<MsgDeleteMilestone> = {
  encode(message: MsgDeleteMilestone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteMilestone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteMilestone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteMilestone {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteMilestone): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteMilestone>, I>>(base?: I): MsgDeleteMilestone {
    return MsgDeleteMilestone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteMilestone>, I>>(object: I): MsgDeleteMilestone {
    const message = createBaseMsgDeleteMilestone();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteMilestoneResponse(): MsgDeleteMilestoneResponse {
  return {};
}

export const MsgDeleteMilestoneResponse: MessageFns<MsgDeleteMilestoneResponse> = {
  encode(_: MsgDeleteMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteMilestoneResponse {
    return {};
  },

  toJSON(_: MsgDeleteMilestoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteMilestoneResponse>, I>>(base?: I): MsgDeleteMilestoneResponse {
    return MsgDeleteMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteMilestoneResponse>, I>>(_: I): MsgDeleteMilestoneResponse {
    const message = createBaseMsgDeleteMilestoneResponse();
    return message;
  },
};

function createBaseMsgAcceptProposal(): MsgAcceptProposal {
  return { creator: "", proposalId: "" };
}

export const MsgAcceptProposal: MessageFns<MsgAcceptProposal> = {
  encode(message: MsgAcceptProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.proposalId !== "") {
      writer.uint32(18).string(message.proposalId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAcceptProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proposalId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAcceptProposal {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "",
    };
  },

  toJSON(message: MsgAcceptProposal): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.proposalId !== "") {
      obj.proposalId = message.proposalId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptProposal>, I>>(base?: I): MsgAcceptProposal {
    return MsgAcceptProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptProposal>, I>>(object: I): MsgAcceptProposal {
    const message = createBaseMsgAcceptProposal();
    message.creator = object.creator ?? "";
    message.proposalId = object.proposalId ?? "";
    return message;
  },
};

function createBaseMsgAcceptProposalResponse(): MsgAcceptProposalResponse {
  return {};
}

export const MsgAcceptProposalResponse: MessageFns<MsgAcceptProposalResponse> = {
  encode(_: MsgAcceptProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAcceptProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAcceptProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAcceptProposalResponse {
    return {};
  },

  toJSON(_: MsgAcceptProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAcceptProposalResponse>, I>>(base?: I): MsgAcceptProposalResponse {
    return MsgAcceptProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAcceptProposalResponse>, I>>(_: I): MsgAcceptProposalResponse {
    const message = createBaseMsgAcceptProposalResponse();
    return message;
  },
};

function createBaseMsgCompleteMilestone(): MsgCompleteMilestone {
  return { creator: "", milestoneId: "", deliveryNotes: "" };
}

export const MsgCompleteMilestone: MessageFns<MsgCompleteMilestone> = {
  encode(message: MsgCompleteMilestone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.milestoneId !== "") {
      writer.uint32(18).string(message.milestoneId);
    }
    if (message.deliveryNotes !== "") {
      writer.uint32(26).string(message.deliveryNotes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCompleteMilestone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCompleteMilestone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.milestoneId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deliveryNotes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCompleteMilestone {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      milestoneId: isSet(object.milestoneId) ? globalThis.String(object.milestoneId) : "",
      deliveryNotes: isSet(object.deliveryNotes) ? globalThis.String(object.deliveryNotes) : "",
    };
  },

  toJSON(message: MsgCompleteMilestone): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.milestoneId !== "") {
      obj.milestoneId = message.milestoneId;
    }
    if (message.deliveryNotes !== "") {
      obj.deliveryNotes = message.deliveryNotes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCompleteMilestone>, I>>(base?: I): MsgCompleteMilestone {
    return MsgCompleteMilestone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCompleteMilestone>, I>>(object: I): MsgCompleteMilestone {
    const message = createBaseMsgCompleteMilestone();
    message.creator = object.creator ?? "";
    message.milestoneId = object.milestoneId ?? "";
    message.deliveryNotes = object.deliveryNotes ?? "";
    return message;
  },
};

function createBaseMsgCompleteMilestoneResponse(): MsgCompleteMilestoneResponse {
  return {};
}

export const MsgCompleteMilestoneResponse: MessageFns<MsgCompleteMilestoneResponse> = {
  encode(_: MsgCompleteMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCompleteMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCompleteMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCompleteMilestoneResponse {
    return {};
  },

  toJSON(_: MsgCompleteMilestoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCompleteMilestoneResponse>, I>>(base?: I): MsgCompleteMilestoneResponse {
    return MsgCompleteMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCompleteMilestoneResponse>, I>>(_: I): MsgCompleteMilestoneResponse {
    const message = createBaseMsgCompleteMilestoneResponse();
    return message;
  },
};

function createBaseMsgReleasePayment(): MsgReleasePayment {
  return { creator: "", milestoneId: "", rating: "", feedback: "" };
}

export const MsgReleasePayment: MessageFns<MsgReleasePayment> = {
  encode(message: MsgReleasePayment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.milestoneId !== "") {
      writer.uint32(18).string(message.milestoneId);
    }
    if (message.rating !== "") {
      writer.uint32(26).string(message.rating);
    }
    if (message.feedback !== "") {
      writer.uint32(34).string(message.feedback);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgReleasePayment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReleasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.milestoneId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rating = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feedback = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReleasePayment {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      milestoneId: isSet(object.milestoneId) ? globalThis.String(object.milestoneId) : "",
      rating: isSet(object.rating) ? globalThis.String(object.rating) : "",
      feedback: isSet(object.feedback) ? globalThis.String(object.feedback) : "",
    };
  },

  toJSON(message: MsgReleasePayment): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.milestoneId !== "") {
      obj.milestoneId = message.milestoneId;
    }
    if (message.rating !== "") {
      obj.rating = message.rating;
    }
    if (message.feedback !== "") {
      obj.feedback = message.feedback;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReleasePayment>, I>>(base?: I): MsgReleasePayment {
    return MsgReleasePayment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReleasePayment>, I>>(object: I): MsgReleasePayment {
    const message = createBaseMsgReleasePayment();
    message.creator = object.creator ?? "";
    message.milestoneId = object.milestoneId ?? "";
    message.rating = object.rating ?? "";
    message.feedback = object.feedback ?? "";
    return message;
  },
};

function createBaseMsgReleasePaymentResponse(): MsgReleasePaymentResponse {
  return {};
}

export const MsgReleasePaymentResponse: MessageFns<MsgReleasePaymentResponse> = {
  encode(_: MsgReleasePaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgReleasePaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReleasePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgReleasePaymentResponse {
    return {};
  },

  toJSON(_: MsgReleasePaymentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReleasePaymentResponse>, I>>(base?: I): MsgReleasePaymentResponse {
    return MsgReleasePaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReleasePaymentResponse>, I>>(_: I): MsgReleasePaymentResponse {
    const message = createBaseMsgReleasePaymentResponse();
    return message;
  },
};

function createBaseMsgDisputeProject(): MsgDisputeProject {
  return { creator: "", projectId: "", reason: "", evidence: "" };
}

export const MsgDisputeProject: MessageFns<MsgDisputeProject> = {
  encode(message: MsgDisputeProject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    if (message.evidence !== "") {
      writer.uint32(34).string(message.evidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDisputeProject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDisputeProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.evidence = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDisputeProject {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      evidence: isSet(object.evidence) ? globalThis.String(object.evidence) : "",
    };
  },

  toJSON(message: MsgDisputeProject): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.evidence !== "") {
      obj.evidence = message.evidence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDisputeProject>, I>>(base?: I): MsgDisputeProject {
    return MsgDisputeProject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDisputeProject>, I>>(object: I): MsgDisputeProject {
    const message = createBaseMsgDisputeProject();
    message.creator = object.creator ?? "";
    message.projectId = object.projectId ?? "";
    message.reason = object.reason ?? "";
    message.evidence = object.evidence ?? "";
    return message;
  },
};

function createBaseMsgDisputeProjectResponse(): MsgDisputeProjectResponse {
  return {};
}

export const MsgDisputeProjectResponse: MessageFns<MsgDisputeProjectResponse> = {
  encode(_: MsgDisputeProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDisputeProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDisputeProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDisputeProjectResponse {
    return {};
  },

  toJSON(_: MsgDisputeProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDisputeProjectResponse>, I>>(base?: I): MsgDisputeProjectResponse {
    return MsgDisputeProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDisputeProjectResponse>, I>>(_: I): MsgDisputeProjectResponse {
    const message = createBaseMsgDisputeProjectResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreateJobPosting(request: MsgCreateJobPosting): Promise<MsgCreateJobPostingResponse>;
  UpdateJobPosting(request: MsgUpdateJobPosting): Promise<MsgUpdateJobPostingResponse>;
  DeleteJobPosting(request: MsgDeleteJobPosting): Promise<MsgDeleteJobPostingResponse>;
  CreateProposal(request: MsgCreateProposal): Promise<MsgCreateProposalResponse>;
  UpdateProposal(request: MsgUpdateProposal): Promise<MsgUpdateProposalResponse>;
  DeleteProposal(request: MsgDeleteProposal): Promise<MsgDeleteProposalResponse>;
  CreateProject(request: MsgCreateProject): Promise<MsgCreateProjectResponse>;
  UpdateProject(request: MsgUpdateProject): Promise<MsgUpdateProjectResponse>;
  DeleteProject(request: MsgDeleteProject): Promise<MsgDeleteProjectResponse>;
  CreateMilestone(request: MsgCreateMilestone): Promise<MsgCreateMilestoneResponse>;
  UpdateMilestone(request: MsgUpdateMilestone): Promise<MsgUpdateMilestoneResponse>;
  DeleteMilestone(request: MsgDeleteMilestone): Promise<MsgDeleteMilestoneResponse>;
  AcceptProposal(request: MsgAcceptProposal): Promise<MsgAcceptProposalResponse>;
  CompleteMilestone(request: MsgCompleteMilestone): Promise<MsgCompleteMilestoneResponse>;
  ReleasePayment(request: MsgReleasePayment): Promise<MsgReleasePaymentResponse>;
  DisputeProject(request: MsgDisputeProject): Promise<MsgDisputeProjectResponse>;
}

export const MsgServiceName = "skillchain.marketplace.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateJobPosting = this.CreateJobPosting.bind(this);
    this.UpdateJobPosting = this.UpdateJobPosting.bind(this);
    this.DeleteJobPosting = this.DeleteJobPosting.bind(this);
    this.CreateProposal = this.CreateProposal.bind(this);
    this.UpdateProposal = this.UpdateProposal.bind(this);
    this.DeleteProposal = this.DeleteProposal.bind(this);
    this.CreateProject = this.CreateProject.bind(this);
    this.UpdateProject = this.UpdateProject.bind(this);
    this.DeleteProject = this.DeleteProject.bind(this);
    this.CreateMilestone = this.CreateMilestone.bind(this);
    this.UpdateMilestone = this.UpdateMilestone.bind(this);
    this.DeleteMilestone = this.DeleteMilestone.bind(this);
    this.AcceptProposal = this.AcceptProposal.bind(this);
    this.CompleteMilestone = this.CompleteMilestone.bind(this);
    this.ReleasePayment = this.ReleasePayment.bind(this);
    this.DisputeProject = this.DisputeProject.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateJobPosting(request: MsgCreateJobPosting): Promise<MsgCreateJobPostingResponse> {
    const data = MsgCreateJobPosting.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateJobPosting", data);
    return promise.then((data) => MsgCreateJobPostingResponse.decode(new BinaryReader(data)));
  }

  UpdateJobPosting(request: MsgUpdateJobPosting): Promise<MsgUpdateJobPostingResponse> {
    const data = MsgUpdateJobPosting.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateJobPosting", data);
    return promise.then((data) => MsgUpdateJobPostingResponse.decode(new BinaryReader(data)));
  }

  DeleteJobPosting(request: MsgDeleteJobPosting): Promise<MsgDeleteJobPostingResponse> {
    const data = MsgDeleteJobPosting.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteJobPosting", data);
    return promise.then((data) => MsgDeleteJobPostingResponse.decode(new BinaryReader(data)));
  }

  CreateProposal(request: MsgCreateProposal): Promise<MsgCreateProposalResponse> {
    const data = MsgCreateProposal.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProposal", data);
    return promise.then((data) => MsgCreateProposalResponse.decode(new BinaryReader(data)));
  }

  UpdateProposal(request: MsgUpdateProposal): Promise<MsgUpdateProposalResponse> {
    const data = MsgUpdateProposal.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProposal", data);
    return promise.then((data) => MsgUpdateProposalResponse.decode(new BinaryReader(data)));
  }

  DeleteProposal(request: MsgDeleteProposal): Promise<MsgDeleteProposalResponse> {
    const data = MsgDeleteProposal.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProposal", data);
    return promise.then((data) => MsgDeleteProposalResponse.decode(new BinaryReader(data)));
  }

  CreateProject(request: MsgCreateProject): Promise<MsgCreateProjectResponse> {
    const data = MsgCreateProject.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProject", data);
    return promise.then((data) => MsgCreateProjectResponse.decode(new BinaryReader(data)));
  }

  UpdateProject(request: MsgUpdateProject): Promise<MsgUpdateProjectResponse> {
    const data = MsgUpdateProject.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProject", data);
    return promise.then((data) => MsgUpdateProjectResponse.decode(new BinaryReader(data)));
  }

  DeleteProject(request: MsgDeleteProject): Promise<MsgDeleteProjectResponse> {
    const data = MsgDeleteProject.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProject", data);
    return promise.then((data) => MsgDeleteProjectResponse.decode(new BinaryReader(data)));
  }

  CreateMilestone(request: MsgCreateMilestone): Promise<MsgCreateMilestoneResponse> {
    const data = MsgCreateMilestone.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateMilestone", data);
    return promise.then((data) => MsgCreateMilestoneResponse.decode(new BinaryReader(data)));
  }

  UpdateMilestone(request: MsgUpdateMilestone): Promise<MsgUpdateMilestoneResponse> {
    const data = MsgUpdateMilestone.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateMilestone", data);
    return promise.then((data) => MsgUpdateMilestoneResponse.decode(new BinaryReader(data)));
  }

  DeleteMilestone(request: MsgDeleteMilestone): Promise<MsgDeleteMilestoneResponse> {
    const data = MsgDeleteMilestone.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteMilestone", data);
    return promise.then((data) => MsgDeleteMilestoneResponse.decode(new BinaryReader(data)));
  }

  AcceptProposal(request: MsgAcceptProposal): Promise<MsgAcceptProposalResponse> {
    const data = MsgAcceptProposal.encode(request).finish();
    const promise = this.rpc.request(this.service, "AcceptProposal", data);
    return promise.then((data) => MsgAcceptProposalResponse.decode(new BinaryReader(data)));
  }

  CompleteMilestone(request: MsgCompleteMilestone): Promise<MsgCompleteMilestoneResponse> {
    const data = MsgCompleteMilestone.encode(request).finish();
    const promise = this.rpc.request(this.service, "CompleteMilestone", data);
    return promise.then((data) => MsgCompleteMilestoneResponse.decode(new BinaryReader(data)));
  }

  ReleasePayment(request: MsgReleasePayment): Promise<MsgReleasePaymentResponse> {
    const data = MsgReleasePayment.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReleasePayment", data);
    return promise.then((data) => MsgReleasePaymentResponse.decode(new BinaryReader(data)));
  }

  DisputeProject(request: MsgDisputeProject): Promise<MsgDisputeProjectResponse> {
    const data = MsgDisputeProject.encode(request).finish();
    const promise = this.rpc.request(this.service, "DisputeProject", data);
    return promise.then((data) => MsgDisputeProjectResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
