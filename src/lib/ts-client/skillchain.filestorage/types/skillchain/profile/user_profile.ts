// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/profile/user_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.profile";

export interface UserProfile {
  index: string;
  owner: string;
  displayName: string;
  bio: string;
  location: string;
  website: string;
  github: string;
  linkedin: string;
  twitter: string;
  reputationScore: number;
  createdAt: number;
  updatedAt: number;
  creator: string;
}

function createBaseUserProfile(): UserProfile {
  return {
    index: "",
    owner: "",
    displayName: "",
    bio: "",
    location: "",
    website: "",
    github: "",
    linkedin: "",
    twitter: "",
    reputationScore: 0,
    createdAt: 0,
    updatedAt: 0,
    creator: "",
  };
}

export const UserProfile: MessageFns<UserProfile> = {
  encode(message: UserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.bio !== "") {
      writer.uint32(34).string(message.bio);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    if (message.website !== "") {
      writer.uint32(50).string(message.website);
    }
    if (message.github !== "") {
      writer.uint32(58).string(message.github);
    }
    if (message.linkedin !== "") {
      writer.uint32(66).string(message.linkedin);
    }
    if (message.twitter !== "") {
      writer.uint32(74).string(message.twitter);
    }
    if (message.reputationScore !== 0) {
      writer.uint32(80).uint64(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      writer.uint32(88).uint64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(96).uint64(message.updatedAt);
    }
    if (message.creator !== "") {
      writer.uint32(106).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.reputationScore = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.updatedAt = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      reputationScore: isSet(object.reputationScore) ? globalThis.Number(object.reputationScore) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: UserProfile): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.reputationScore !== 0) {
      obj.reputationScore = Math.round(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile>, I>>(base?: I): UserProfile {
    return UserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile>, I>>(object: I): UserProfile {
    const message = createBaseUserProfile();
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.displayName = object.displayName ?? "";
    message.bio = object.bio ?? "";
    message.location = object.location ?? "";
    message.website = object.website ?? "";
    message.github = object.github ?? "";
    message.linkedin = object.linkedin ?? "";
    message.twitter = object.twitter ?? "";
    message.reputationScore = object.reputationScore ?? 0;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
