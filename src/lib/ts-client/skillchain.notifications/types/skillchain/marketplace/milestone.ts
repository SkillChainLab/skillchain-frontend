// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/milestone.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.marketplace";

export interface Milestone {
  index: string;
  projectId: string;
  title: string;
  description: string;
  amount: number;
  dueDate: number;
  status: string;
  isCompleted: boolean;
  isPaid: boolean;
  submittedAt: number;
  approvedAt: number;
  creator: string;
}

function createBaseMilestone(): Milestone {
  return {
    index: "",
    projectId: "",
    title: "",
    description: "",
    amount: 0,
    dueDate: 0,
    status: "",
    isCompleted: false,
    isPaid: false,
    submittedAt: 0,
    approvedAt: 0,
    creator: "",
  };
}

export const Milestone: MessageFns<Milestone> = {
  encode(message: Milestone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.amount !== 0) {
      writer.uint32(40).uint64(message.amount);
    }
    if (message.dueDate !== 0) {
      writer.uint32(48).int64(message.dueDate);
    }
    if (message.status !== "") {
      writer.uint32(58).string(message.status);
    }
    if (message.isCompleted !== false) {
      writer.uint32(64).bool(message.isCompleted);
    }
    if (message.isPaid !== false) {
      writer.uint32(72).bool(message.isPaid);
    }
    if (message.submittedAt !== 0) {
      writer.uint32(80).int64(message.submittedAt);
    }
    if (message.approvedAt !== 0) {
      writer.uint32(88).int64(message.approvedAt);
    }
    if (message.creator !== "") {
      writer.uint32(98).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Milestone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMilestone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.dueDate = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isCompleted = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isPaid = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.submittedAt = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.approvedAt = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Milestone {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      dueDate: isSet(object.dueDate) ? globalThis.Number(object.dueDate) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      isCompleted: isSet(object.isCompleted) ? globalThis.Boolean(object.isCompleted) : false,
      isPaid: isSet(object.isPaid) ? globalThis.Boolean(object.isPaid) : false,
      submittedAt: isSet(object.submittedAt) ? globalThis.Number(object.submittedAt) : 0,
      approvedAt: isSet(object.approvedAt) ? globalThis.Number(object.approvedAt) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Milestone): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.dueDate !== 0) {
      obj.dueDate = Math.round(message.dueDate);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.isCompleted !== false) {
      obj.isCompleted = message.isCompleted;
    }
    if (message.isPaid !== false) {
      obj.isPaid = message.isPaid;
    }
    if (message.submittedAt !== 0) {
      obj.submittedAt = Math.round(message.submittedAt);
    }
    if (message.approvedAt !== 0) {
      obj.approvedAt = Math.round(message.approvedAt);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Milestone>, I>>(base?: I): Milestone {
    return Milestone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Milestone>, I>>(object: I): Milestone {
    const message = createBaseMilestone();
    message.index = object.index ?? "";
    message.projectId = object.projectId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? 0;
    message.dueDate = object.dueDate ?? 0;
    message.status = object.status ?? "";
    message.isCompleted = object.isCompleted ?? false;
    message.isPaid = object.isPaid ?? false;
    message.submittedAt = object.submittedAt ?? 0;
    message.approvedAt = object.approvedAt ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
