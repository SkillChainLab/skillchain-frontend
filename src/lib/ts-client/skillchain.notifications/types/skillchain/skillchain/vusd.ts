// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/skillchain/vusd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.skillchain";

/** VUSDTreasury tracks the global state of the vUSD system */
export interface VUSDTreasury {
  /** Total SKILL tokens locked as collateral */
  totalSkillLocked: string;
  /** Total vUSD tokens in circulation */
  totalVusdSupply: string;
  /** Current SKILL/USD price (mock for now) */
  currentSkillPrice: string;
  /** Last price update timestamp */
  lastUpdate: number;
  /** Global collateral ratio */
  globalCollateralRatio: string;
}

/** UserVUSDPosition tracks individual user's collateral and debt */
export interface UserVUSDPosition {
  /** User's address */
  address: string;
  /** SKILL tokens locked as collateral */
  skillCollateral: string;
  /** vUSD tokens minted (debt) */
  vusdDebt: string;
  /** Individual collateral ratio */
  collateralRatio: string;
  /** Position creation timestamp */
  createdAt: number;
  /** Last update timestamp */
  updatedAt: number;
}

function createBaseVUSDTreasury(): VUSDTreasury {
  return { totalSkillLocked: "", totalVusdSupply: "", currentSkillPrice: "", lastUpdate: 0, globalCollateralRatio: "" };
}

export const VUSDTreasury: MessageFns<VUSDTreasury> = {
  encode(message: VUSDTreasury, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalSkillLocked !== "") {
      writer.uint32(10).string(message.totalSkillLocked);
    }
    if (message.totalVusdSupply !== "") {
      writer.uint32(18).string(message.totalVusdSupply);
    }
    if (message.currentSkillPrice !== "") {
      writer.uint32(26).string(message.currentSkillPrice);
    }
    if (message.lastUpdate !== 0) {
      writer.uint32(32).int64(message.lastUpdate);
    }
    if (message.globalCollateralRatio !== "") {
      writer.uint32(42).string(message.globalCollateralRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VUSDTreasury {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVUSDTreasury();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.totalSkillLocked = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalVusdSupply = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currentSkillPrice = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastUpdate = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.globalCollateralRatio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VUSDTreasury {
    return {
      totalSkillLocked: isSet(object.totalSkillLocked) ? globalThis.String(object.totalSkillLocked) : "",
      totalVusdSupply: isSet(object.totalVusdSupply) ? globalThis.String(object.totalVusdSupply) : "",
      currentSkillPrice: isSet(object.currentSkillPrice) ? globalThis.String(object.currentSkillPrice) : "",
      lastUpdate: isSet(object.lastUpdate) ? globalThis.Number(object.lastUpdate) : 0,
      globalCollateralRatio: isSet(object.globalCollateralRatio) ? globalThis.String(object.globalCollateralRatio) : "",
    };
  },

  toJSON(message: VUSDTreasury): unknown {
    const obj: any = {};
    if (message.totalSkillLocked !== "") {
      obj.totalSkillLocked = message.totalSkillLocked;
    }
    if (message.totalVusdSupply !== "") {
      obj.totalVusdSupply = message.totalVusdSupply;
    }
    if (message.currentSkillPrice !== "") {
      obj.currentSkillPrice = message.currentSkillPrice;
    }
    if (message.lastUpdate !== 0) {
      obj.lastUpdate = Math.round(message.lastUpdate);
    }
    if (message.globalCollateralRatio !== "") {
      obj.globalCollateralRatio = message.globalCollateralRatio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VUSDTreasury>, I>>(base?: I): VUSDTreasury {
    return VUSDTreasury.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VUSDTreasury>, I>>(object: I): VUSDTreasury {
    const message = createBaseVUSDTreasury();
    message.totalSkillLocked = object.totalSkillLocked ?? "";
    message.totalVusdSupply = object.totalVusdSupply ?? "";
    message.currentSkillPrice = object.currentSkillPrice ?? "";
    message.lastUpdate = object.lastUpdate ?? 0;
    message.globalCollateralRatio = object.globalCollateralRatio ?? "";
    return message;
  },
};

function createBaseUserVUSDPosition(): UserVUSDPosition {
  return { address: "", skillCollateral: "", vusdDebt: "", collateralRatio: "", createdAt: 0, updatedAt: 0 };
}

export const UserVUSDPosition: MessageFns<UserVUSDPosition> = {
  encode(message: UserVUSDPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.skillCollateral !== "") {
      writer.uint32(18).string(message.skillCollateral);
    }
    if (message.vusdDebt !== "") {
      writer.uint32(26).string(message.vusdDebt);
    }
    if (message.collateralRatio !== "") {
      writer.uint32(34).string(message.collateralRatio);
    }
    if (message.createdAt !== 0) {
      writer.uint32(40).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(48).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserVUSDPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserVUSDPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skillCollateral = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vusdDebt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.collateralRatio = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserVUSDPosition {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      skillCollateral: isSet(object.skillCollateral) ? globalThis.String(object.skillCollateral) : "",
      vusdDebt: isSet(object.vusdDebt) ? globalThis.String(object.vusdDebt) : "",
      collateralRatio: isSet(object.collateralRatio) ? globalThis.String(object.collateralRatio) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: UserVUSDPosition): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.skillCollateral !== "") {
      obj.skillCollateral = message.skillCollateral;
    }
    if (message.vusdDebt !== "") {
      obj.vusdDebt = message.vusdDebt;
    }
    if (message.collateralRatio !== "") {
      obj.collateralRatio = message.collateralRatio;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserVUSDPosition>, I>>(base?: I): UserVUSDPosition {
    return UserVUSDPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserVUSDPosition>, I>>(object: I): UserVUSDPosition {
    const message = createBaseUserVUSDPosition();
    message.address = object.address ?? "";
    message.skillCollateral = object.skillCollateral ?? "";
    message.vusdDebt = object.vusdDebt ?? "";
    message.collateralRatio = object.collateralRatio ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
