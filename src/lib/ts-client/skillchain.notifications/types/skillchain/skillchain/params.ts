// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/skillchain/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.skillchain";

/** Params defines the parameters for the module. */
export interface Params {
  burnEnabled: boolean;
  vusdEnabled: boolean;
  priceUpdateAuthority: string;
  vusdMockPrice: string;
  tokenName: string;
  tokenSymbol: string;
  tokenDecimals: number;
  tokenDescription: string;
  maxSupply: string;
  chainDescription: string;
  websiteUrl: string;
  minCollateralRatio: string;
}

function createBaseParams(): Params {
  return {
    burnEnabled: false,
    vusdEnabled: false,
    priceUpdateAuthority: "",
    vusdMockPrice: "",
    tokenName: "",
    tokenSymbol: "",
    tokenDecimals: 0,
    tokenDescription: "",
    maxSupply: "",
    chainDescription: "",
    websiteUrl: "",
    minCollateralRatio: "",
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.burnEnabled !== false) {
      writer.uint32(8).bool(message.burnEnabled);
    }
    if (message.vusdEnabled !== false) {
      writer.uint32(16).bool(message.vusdEnabled);
    }
    if (message.priceUpdateAuthority !== "") {
      writer.uint32(26).string(message.priceUpdateAuthority);
    }
    if (message.vusdMockPrice !== "") {
      writer.uint32(34).string(message.vusdMockPrice);
    }
    if (message.tokenName !== "") {
      writer.uint32(42).string(message.tokenName);
    }
    if (message.tokenSymbol !== "") {
      writer.uint32(50).string(message.tokenSymbol);
    }
    if (message.tokenDecimals !== 0) {
      writer.uint32(56).uint32(message.tokenDecimals);
    }
    if (message.tokenDescription !== "") {
      writer.uint32(66).string(message.tokenDescription);
    }
    if (message.maxSupply !== "") {
      writer.uint32(74).string(message.maxSupply);
    }
    if (message.chainDescription !== "") {
      writer.uint32(82).string(message.chainDescription);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(90).string(message.websiteUrl);
    }
    if (message.minCollateralRatio !== "") {
      writer.uint32(98).string(message.minCollateralRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.burnEnabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.vusdEnabled = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.priceUpdateAuthority = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.vusdMockPrice = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenSymbol = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.tokenDecimals = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tokenDescription = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.maxSupply = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.chainDescription = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.minCollateralRatio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      burnEnabled: isSet(object.burnEnabled) ? globalThis.Boolean(object.burnEnabled) : false,
      vusdEnabled: isSet(object.vusdEnabled) ? globalThis.Boolean(object.vusdEnabled) : false,
      priceUpdateAuthority: isSet(object.priceUpdateAuthority) ? globalThis.String(object.priceUpdateAuthority) : "",
      vusdMockPrice: isSet(object.vusdMockPrice) ? globalThis.String(object.vusdMockPrice) : "",
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      tokenSymbol: isSet(object.tokenSymbol) ? globalThis.String(object.tokenSymbol) : "",
      tokenDecimals: isSet(object.tokenDecimals) ? globalThis.Number(object.tokenDecimals) : 0,
      tokenDescription: isSet(object.tokenDescription) ? globalThis.String(object.tokenDescription) : "",
      maxSupply: isSet(object.maxSupply) ? globalThis.String(object.maxSupply) : "",
      chainDescription: isSet(object.chainDescription) ? globalThis.String(object.chainDescription) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      minCollateralRatio: isSet(object.minCollateralRatio) ? globalThis.String(object.minCollateralRatio) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.burnEnabled !== false) {
      obj.burnEnabled = message.burnEnabled;
    }
    if (message.vusdEnabled !== false) {
      obj.vusdEnabled = message.vusdEnabled;
    }
    if (message.priceUpdateAuthority !== "") {
      obj.priceUpdateAuthority = message.priceUpdateAuthority;
    }
    if (message.vusdMockPrice !== "") {
      obj.vusdMockPrice = message.vusdMockPrice;
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.tokenSymbol !== "") {
      obj.tokenSymbol = message.tokenSymbol;
    }
    if (message.tokenDecimals !== 0) {
      obj.tokenDecimals = Math.round(message.tokenDecimals);
    }
    if (message.tokenDescription !== "") {
      obj.tokenDescription = message.tokenDescription;
    }
    if (message.maxSupply !== "") {
      obj.maxSupply = message.maxSupply;
    }
    if (message.chainDescription !== "") {
      obj.chainDescription = message.chainDescription;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.minCollateralRatio !== "") {
      obj.minCollateralRatio = message.minCollateralRatio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.burnEnabled = object.burnEnabled ?? false;
    message.vusdEnabled = object.vusdEnabled ?? false;
    message.priceUpdateAuthority = object.priceUpdateAuthority ?? "";
    message.vusdMockPrice = object.vusdMockPrice ?? "";
    message.tokenName = object.tokenName ?? "";
    message.tokenSymbol = object.tokenSymbol ?? "";
    message.tokenDecimals = object.tokenDecimals ?? 0;
    message.tokenDescription = object.tokenDescription ?? "";
    message.maxSupply = object.maxSupply ?? "";
    message.chainDescription = object.chainDescription ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.minCollateralRatio = object.minCollateralRatio ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
