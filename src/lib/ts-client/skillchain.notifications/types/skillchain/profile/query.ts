// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/profile/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";
import { SkillEndorsement } from "./skill_endorsement";
import { UserProfile } from "./user_profile";
import { UserSkill } from "./user_skill";

export const protobufPackage = "skillchain.profile";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetUserProfileRequest {
  index: string;
}

export interface QueryGetUserProfileResponse {
  userProfile: UserProfile | undefined;
}

export interface QueryAllUserProfileRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllUserProfileResponse {
  userProfile: UserProfile[];
  pagination: PageResponse | undefined;
}

export interface QueryGetUserSkillRequest {
  index: string;
}

export interface QueryGetUserSkillResponse {
  userSkill: UserSkill | undefined;
}

export interface QueryAllUserSkillRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllUserSkillResponse {
  userSkill: UserSkill[];
  pagination: PageResponse | undefined;
}

export interface QueryGetSkillEndorsementRequest {
  index: string;
}

export interface QueryGetSkillEndorsementResponse {
  skillEndorsement: SkillEndorsement | undefined;
}

export interface QueryAllSkillEndorsementRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllSkillEndorsementResponse {
  skillEndorsement: SkillEndorsement[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetUserProfileRequest(): QueryGetUserProfileRequest {
  return { index: "" };
}

export const QueryGetUserProfileRequest: MessageFns<QueryGetUserProfileRequest> = {
  encode(message: QueryGetUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserProfileRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetUserProfileRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserProfileRequest>, I>>(base?: I): QueryGetUserProfileRequest {
    return QueryGetUserProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserProfileRequest>, I>>(object: I): QueryGetUserProfileRequest {
    const message = createBaseQueryGetUserProfileRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetUserProfileResponse(): QueryGetUserProfileResponse {
  return { userProfile: undefined };
}

export const QueryGetUserProfileResponse: MessageFns<QueryGetUserProfileResponse> = {
  encode(message: QueryGetUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userProfile !== undefined) {
      UserProfile.encode(message.userProfile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfile = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserProfileResponse {
    return { userProfile: isSet(object.userProfile) ? UserProfile.fromJSON(object.userProfile) : undefined };
  },

  toJSON(message: QueryGetUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userProfile !== undefined) {
      obj.userProfile = UserProfile.toJSON(message.userProfile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserProfileResponse>, I>>(base?: I): QueryGetUserProfileResponse {
    return QueryGetUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserProfileResponse>, I>>(object: I): QueryGetUserProfileResponse {
    const message = createBaseQueryGetUserProfileResponse();
    message.userProfile = (object.userProfile !== undefined && object.userProfile !== null)
      ? UserProfile.fromPartial(object.userProfile)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserProfileRequest(): QueryAllUserProfileRequest {
  return { pagination: undefined };
}

export const QueryAllUserProfileRequest: MessageFns<QueryAllUserProfileRequest> = {
  encode(message: QueryAllUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserProfileRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllUserProfileRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllUserProfileRequest>, I>>(base?: I): QueryAllUserProfileRequest {
    return QueryAllUserProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllUserProfileRequest>, I>>(object: I): QueryAllUserProfileRequest {
    const message = createBaseQueryAllUserProfileRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserProfileResponse(): QueryAllUserProfileResponse {
  return { userProfile: [], pagination: undefined };
}

export const QueryAllUserProfileResponse: MessageFns<QueryAllUserProfileResponse> = {
  encode(message: QueryAllUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userProfile) {
      UserProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfile.push(UserProfile.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserProfileResponse {
    return {
      userProfile: globalThis.Array.isArray(object?.userProfile)
        ? object.userProfile.map((e: any) => UserProfile.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userProfile?.length) {
      obj.userProfile = message.userProfile.map((e) => UserProfile.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllUserProfileResponse>, I>>(base?: I): QueryAllUserProfileResponse {
    return QueryAllUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllUserProfileResponse>, I>>(object: I): QueryAllUserProfileResponse {
    const message = createBaseQueryAllUserProfileResponse();
    message.userProfile = object.userProfile?.map((e) => UserProfile.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetUserSkillRequest(): QueryGetUserSkillRequest {
  return { index: "" };
}

export const QueryGetUserSkillRequest: MessageFns<QueryGetUserSkillRequest> = {
  encode(message: QueryGetUserSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetUserSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserSkillRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetUserSkillRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserSkillRequest>, I>>(base?: I): QueryGetUserSkillRequest {
    return QueryGetUserSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserSkillRequest>, I>>(object: I): QueryGetUserSkillRequest {
    const message = createBaseQueryGetUserSkillRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetUserSkillResponse(): QueryGetUserSkillResponse {
  return { userSkill: undefined };
}

export const QueryGetUserSkillResponse: MessageFns<QueryGetUserSkillResponse> = {
  encode(message: QueryGetUserSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userSkill !== undefined) {
      UserSkill.encode(message.userSkill, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetUserSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userSkill = UserSkill.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserSkillResponse {
    return { userSkill: isSet(object.userSkill) ? UserSkill.fromJSON(object.userSkill) : undefined };
  },

  toJSON(message: QueryGetUserSkillResponse): unknown {
    const obj: any = {};
    if (message.userSkill !== undefined) {
      obj.userSkill = UserSkill.toJSON(message.userSkill);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetUserSkillResponse>, I>>(base?: I): QueryGetUserSkillResponse {
    return QueryGetUserSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetUserSkillResponse>, I>>(object: I): QueryGetUserSkillResponse {
    const message = createBaseQueryGetUserSkillResponse();
    message.userSkill = (object.userSkill !== undefined && object.userSkill !== null)
      ? UserSkill.fromPartial(object.userSkill)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserSkillRequest(): QueryAllUserSkillRequest {
  return { pagination: undefined };
}

export const QueryAllUserSkillRequest: MessageFns<QueryAllUserSkillRequest> = {
  encode(message: QueryAllUserSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllUserSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserSkillRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllUserSkillRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllUserSkillRequest>, I>>(base?: I): QueryAllUserSkillRequest {
    return QueryAllUserSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllUserSkillRequest>, I>>(object: I): QueryAllUserSkillRequest {
    const message = createBaseQueryAllUserSkillRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserSkillResponse(): QueryAllUserSkillResponse {
  return { userSkill: [], pagination: undefined };
}

export const QueryAllUserSkillResponse: MessageFns<QueryAllUserSkillResponse> = {
  encode(message: QueryAllUserSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userSkill) {
      UserSkill.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllUserSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userSkill.push(UserSkill.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserSkillResponse {
    return {
      userSkill: globalThis.Array.isArray(object?.userSkill)
        ? object.userSkill.map((e: any) => UserSkill.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllUserSkillResponse): unknown {
    const obj: any = {};
    if (message.userSkill?.length) {
      obj.userSkill = message.userSkill.map((e) => UserSkill.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllUserSkillResponse>, I>>(base?: I): QueryAllUserSkillResponse {
    return QueryAllUserSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllUserSkillResponse>, I>>(object: I): QueryAllUserSkillResponse {
    const message = createBaseQueryAllUserSkillResponse();
    message.userSkill = object.userSkill?.map((e) => UserSkill.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetSkillEndorsementRequest(): QueryGetSkillEndorsementRequest {
  return { index: "" };
}

export const QueryGetSkillEndorsementRequest: MessageFns<QueryGetSkillEndorsementRequest> = {
  encode(message: QueryGetSkillEndorsementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSkillEndorsementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSkillEndorsementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSkillEndorsementRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetSkillEndorsementRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSkillEndorsementRequest>, I>>(base?: I): QueryGetSkillEndorsementRequest {
    return QueryGetSkillEndorsementRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSkillEndorsementRequest>, I>>(
    object: I,
  ): QueryGetSkillEndorsementRequest {
    const message = createBaseQueryGetSkillEndorsementRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetSkillEndorsementResponse(): QueryGetSkillEndorsementResponse {
  return { skillEndorsement: undefined };
}

export const QueryGetSkillEndorsementResponse: MessageFns<QueryGetSkillEndorsementResponse> = {
  encode(message: QueryGetSkillEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skillEndorsement !== undefined) {
      SkillEndorsement.encode(message.skillEndorsement, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSkillEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSkillEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skillEndorsement = SkillEndorsement.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSkillEndorsementResponse {
    return {
      skillEndorsement: isSet(object.skillEndorsement) ? SkillEndorsement.fromJSON(object.skillEndorsement) : undefined,
    };
  },

  toJSON(message: QueryGetSkillEndorsementResponse): unknown {
    const obj: any = {};
    if (message.skillEndorsement !== undefined) {
      obj.skillEndorsement = SkillEndorsement.toJSON(message.skillEndorsement);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSkillEndorsementResponse>, I>>(
    base?: I,
  ): QueryGetSkillEndorsementResponse {
    return QueryGetSkillEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSkillEndorsementResponse>, I>>(
    object: I,
  ): QueryGetSkillEndorsementResponse {
    const message = createBaseQueryGetSkillEndorsementResponse();
    message.skillEndorsement = (object.skillEndorsement !== undefined && object.skillEndorsement !== null)
      ? SkillEndorsement.fromPartial(object.skillEndorsement)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSkillEndorsementRequest(): QueryAllSkillEndorsementRequest {
  return { pagination: undefined };
}

export const QueryAllSkillEndorsementRequest: MessageFns<QueryAllSkillEndorsementRequest> = {
  encode(message: QueryAllSkillEndorsementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSkillEndorsementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSkillEndorsementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSkillEndorsementRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllSkillEndorsementRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSkillEndorsementRequest>, I>>(base?: I): QueryAllSkillEndorsementRequest {
    return QueryAllSkillEndorsementRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSkillEndorsementRequest>, I>>(
    object: I,
  ): QueryAllSkillEndorsementRequest {
    const message = createBaseQueryAllSkillEndorsementRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSkillEndorsementResponse(): QueryAllSkillEndorsementResponse {
  return { skillEndorsement: [], pagination: undefined };
}

export const QueryAllSkillEndorsementResponse: MessageFns<QueryAllSkillEndorsementResponse> = {
  encode(message: QueryAllSkillEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.skillEndorsement) {
      SkillEndorsement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSkillEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSkillEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skillEndorsement.push(SkillEndorsement.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSkillEndorsementResponse {
    return {
      skillEndorsement: globalThis.Array.isArray(object?.skillEndorsement)
        ? object.skillEndorsement.map((e: any) => SkillEndorsement.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllSkillEndorsementResponse): unknown {
    const obj: any = {};
    if (message.skillEndorsement?.length) {
      obj.skillEndorsement = message.skillEndorsement.map((e) => SkillEndorsement.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSkillEndorsementResponse>, I>>(
    base?: I,
  ): QueryAllSkillEndorsementResponse {
    return QueryAllSkillEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSkillEndorsementResponse>, I>>(
    object: I,
  ): QueryAllSkillEndorsementResponse {
    const message = createBaseQueryAllSkillEndorsementResponse();
    message.skillEndorsement = object.skillEndorsement?.map((e) => SkillEndorsement.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of UserProfile items. */
  UserProfile(request: QueryGetUserProfileRequest): Promise<QueryGetUserProfileResponse>;
  UserProfileAll(request: QueryAllUserProfileRequest): Promise<QueryAllUserProfileResponse>;
  /** Queries a list of UserSkill items. */
  UserSkill(request: QueryGetUserSkillRequest): Promise<QueryGetUserSkillResponse>;
  UserSkillAll(request: QueryAllUserSkillRequest): Promise<QueryAllUserSkillResponse>;
  /** Queries a list of SkillEndorsement items. */
  SkillEndorsement(request: QueryGetSkillEndorsementRequest): Promise<QueryGetSkillEndorsementResponse>;
  SkillEndorsementAll(request: QueryAllSkillEndorsementRequest): Promise<QueryAllSkillEndorsementResponse>;
}

export const QueryServiceName = "skillchain.profile.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.UserProfile = this.UserProfile.bind(this);
    this.UserProfileAll = this.UserProfileAll.bind(this);
    this.UserSkill = this.UserSkill.bind(this);
    this.UserSkillAll = this.UserSkillAll.bind(this);
    this.SkillEndorsement = this.SkillEndorsement.bind(this);
    this.SkillEndorsementAll = this.SkillEndorsementAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  UserProfile(request: QueryGetUserProfileRequest): Promise<QueryGetUserProfileResponse> {
    const data = QueryGetUserProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserProfile", data);
    return promise.then((data) => QueryGetUserProfileResponse.decode(new BinaryReader(data)));
  }

  UserProfileAll(request: QueryAllUserProfileRequest): Promise<QueryAllUserProfileResponse> {
    const data = QueryAllUserProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserProfileAll", data);
    return promise.then((data) => QueryAllUserProfileResponse.decode(new BinaryReader(data)));
  }

  UserSkill(request: QueryGetUserSkillRequest): Promise<QueryGetUserSkillResponse> {
    const data = QueryGetUserSkillRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserSkill", data);
    return promise.then((data) => QueryGetUserSkillResponse.decode(new BinaryReader(data)));
  }

  UserSkillAll(request: QueryAllUserSkillRequest): Promise<QueryAllUserSkillResponse> {
    const data = QueryAllUserSkillRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserSkillAll", data);
    return promise.then((data) => QueryAllUserSkillResponse.decode(new BinaryReader(data)));
  }

  SkillEndorsement(request: QueryGetSkillEndorsementRequest): Promise<QueryGetSkillEndorsementResponse> {
    const data = QueryGetSkillEndorsementRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SkillEndorsement", data);
    return promise.then((data) => QueryGetSkillEndorsementResponse.decode(new BinaryReader(data)));
  }

  SkillEndorsementAll(request: QueryAllSkillEndorsementRequest): Promise<QueryAllSkillEndorsementResponse> {
    const data = QueryAllSkillEndorsementRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SkillEndorsementAll", data);
    return promise.then((data) => QueryAllSkillEndorsementResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
