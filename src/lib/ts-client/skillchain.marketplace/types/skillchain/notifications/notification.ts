// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/notifications/notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.notifications";

export interface Notification {
  index: string;
  userAddress: string;
  notificationType: string;
  title: string;
  message: string;
  data: string;
  isRead: boolean;
  createdAt: number;
  priority: string;
  sourceModule: string;
  sourceAction: string;
  creator: string;
}

function createBaseNotification(): Notification {
  return {
    index: "",
    userAddress: "",
    notificationType: "",
    title: "",
    message: "",
    data: "",
    isRead: false,
    createdAt: 0,
    priority: "",
    sourceModule: "",
    sourceAction: "",
    creator: "",
  };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.notificationType !== "") {
      writer.uint32(26).string(message.notificationType);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.message !== "") {
      writer.uint32(42).string(message.message);
    }
    if (message.data !== "") {
      writer.uint32(50).string(message.data);
    }
    if (message.isRead !== false) {
      writer.uint32(56).bool(message.isRead);
    }
    if (message.createdAt !== 0) {
      writer.uint32(64).uint64(message.createdAt);
    }
    if (message.priority !== "") {
      writer.uint32(74).string(message.priority);
    }
    if (message.sourceModule !== "") {
      writer.uint32(82).string(message.sourceModule);
    }
    if (message.sourceAction !== "") {
      writer.uint32(90).string(message.sourceAction);
    }
    if (message.creator !== "") {
      writer.uint32(98).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.notificationType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.priority = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sourceModule = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sourceAction = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      notificationType: isSet(object.notificationType) ? globalThis.String(object.notificationType) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
      sourceModule: isSet(object.sourceModule) ? globalThis.String(object.sourceModule) : "",
      sourceAction: isSet(object.sourceAction) ? globalThis.String(object.sourceAction) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.notificationType !== "") {
      obj.notificationType = message.notificationType;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.priority !== "") {
      obj.priority = message.priority;
    }
    if (message.sourceModule !== "") {
      obj.sourceModule = message.sourceModule;
    }
    if (message.sourceAction !== "") {
      obj.sourceAction = message.sourceAction;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.notificationType = object.notificationType ?? "";
    message.title = object.title ?? "";
    message.message = object.message ?? "";
    message.data = object.data ?? "";
    message.isRead = object.isRead ?? false;
    message.createdAt = object.createdAt ?? 0;
    message.priority = object.priority ?? "";
    message.sourceModule = object.sourceModule ?? "";
    message.sourceAction = object.sourceAction ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
