// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/analytics/user_activity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.analytics";

export interface UserActivity {
  index: string;
  userAddress: string;
  activityType: string;
  action: string;
  resourceId: string;
  timestamp: number;
  ipAddress: string;
  userAgent: string;
  metadata: string;
  creator: string;
}

function createBaseUserActivity(): UserActivity {
  return {
    index: "",
    userAddress: "",
    activityType: "",
    action: "",
    resourceId: "",
    timestamp: 0,
    ipAddress: "",
    userAgent: "",
    metadata: "",
    creator: "",
  };
}

export const UserActivity: MessageFns<UserActivity> = {
  encode(message: UserActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.activityType !== "") {
      writer.uint32(26).string(message.activityType);
    }
    if (message.action !== "") {
      writer.uint32(34).string(message.action);
    }
    if (message.resourceId !== "") {
      writer.uint32(42).string(message.resourceId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(48).uint64(message.timestamp);
    }
    if (message.ipAddress !== "") {
      writer.uint32(58).string(message.ipAddress);
    }
    if (message.userAgent !== "") {
      writer.uint32(66).string(message.userAgent);
    }
    if (message.metadata !== "") {
      writer.uint32(74).string(message.metadata);
    }
    if (message.creator !== "") {
      writer.uint32(82).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.activityType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserActivity {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      activityType: isSet(object.activityType) ? globalThis.String(object.activityType) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: UserActivity): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.activityType !== "") {
      obj.activityType = message.activityType;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserActivity>, I>>(base?: I): UserActivity {
    return UserActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserActivity>, I>>(object: I): UserActivity {
    const message = createBaseUserActivity();
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.activityType = object.activityType ?? "";
    message.action = object.action ?? "";
    message.resourceId = object.resourceId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.ipAddress = object.ipAddress ?? "";
    message.userAgent = object.userAgent ?? "";
    message.metadata = object.metadata ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
