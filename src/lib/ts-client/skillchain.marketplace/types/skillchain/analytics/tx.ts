// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/analytics/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "skillchain.analytics";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreatePlatformMetric {
  creator: string;
  index: string;
  metricName: string;
  metricValue: number;
  metricType: string;
  period: string;
  timestamp: number;
  metadata: string;
}

export interface MsgCreatePlatformMetricResponse {
}

export interface MsgUpdatePlatformMetric {
  creator: string;
  index: string;
  metricName: string;
  metricValue: number;
  metricType: string;
  period: string;
  timestamp: number;
  metadata: string;
}

export interface MsgUpdatePlatformMetricResponse {
}

export interface MsgDeletePlatformMetric {
  creator: string;
  index: string;
}

export interface MsgDeletePlatformMetricResponse {
}

export interface MsgCreateUserActivity {
  creator: string;
  index: string;
  userAddress: string;
  activityType: string;
  action: string;
  resourceId: string;
  timestamp: number;
  ipAddress: string;
  userAgent: string;
  metadata: string;
}

export interface MsgCreateUserActivityResponse {
}

export interface MsgUpdateUserActivity {
  creator: string;
  index: string;
  userAddress: string;
  activityType: string;
  action: string;
  resourceId: string;
  timestamp: number;
  ipAddress: string;
  userAgent: string;
  metadata: string;
}

export interface MsgUpdateUserActivityResponse {
}

export interface MsgDeleteUserActivity {
  creator: string;
  index: string;
}

export interface MsgDeleteUserActivityResponse {
}

export interface MsgCreateRevenueRecord {
  creator: string;
  index: string;
  transactionType: string;
  amount: number;
  currency: string;
  fromAddress: string;
  toAddress: string;
  timestamp: number;
  feeAmount: number;
  projectId: string;
  platformFee: number;
}

export interface MsgCreateRevenueRecordResponse {
}

export interface MsgUpdateRevenueRecord {
  creator: string;
  index: string;
  transactionType: string;
  amount: number;
  currency: string;
  fromAddress: string;
  toAddress: string;
  timestamp: number;
  feeAmount: number;
  projectId: string;
  platformFee: number;
}

export interface MsgUpdateRevenueRecordResponse {
}

export interface MsgDeleteRevenueRecord {
  creator: string;
  index: string;
}

export interface MsgDeleteRevenueRecordResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreatePlatformMetric(): MsgCreatePlatformMetric {
  return {
    creator: "",
    index: "",
    metricName: "",
    metricValue: 0,
    metricType: "",
    period: "",
    timestamp: 0,
    metadata: "",
  };
}

export const MsgCreatePlatformMetric: MessageFns<MsgCreatePlatformMetric> = {
  encode(message: MsgCreatePlatformMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.metricName !== "") {
      writer.uint32(26).string(message.metricName);
    }
    if (message.metricValue !== 0) {
      writer.uint32(32).uint64(message.metricValue);
    }
    if (message.metricType !== "") {
      writer.uint32(42).string(message.metricType);
    }
    if (message.period !== "") {
      writer.uint32(50).string(message.period);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).uint64(message.timestamp);
    }
    if (message.metadata !== "") {
      writer.uint32(66).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePlatformMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlatformMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metricName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.metricValue = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metricType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.period = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlatformMetric {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      metricName: isSet(object.metricName) ? globalThis.String(object.metricName) : "",
      metricValue: isSet(object.metricValue) ? globalThis.Number(object.metricValue) : 0,
      metricType: isSet(object.metricType) ? globalThis.String(object.metricType) : "",
      period: isSet(object.period) ? globalThis.String(object.period) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: MsgCreatePlatformMetric): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.metricName !== "") {
      obj.metricName = message.metricName;
    }
    if (message.metricValue !== 0) {
      obj.metricValue = Math.round(message.metricValue);
    }
    if (message.metricType !== "") {
      obj.metricType = message.metricType;
    }
    if (message.period !== "") {
      obj.period = message.period;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlatformMetric>, I>>(base?: I): MsgCreatePlatformMetric {
    return MsgCreatePlatformMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlatformMetric>, I>>(object: I): MsgCreatePlatformMetric {
    const message = createBaseMsgCreatePlatformMetric();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.metricName = object.metricName ?? "";
    message.metricValue = object.metricValue ?? 0;
    message.metricType = object.metricType ?? "";
    message.period = object.period ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseMsgCreatePlatformMetricResponse(): MsgCreatePlatformMetricResponse {
  return {};
}

export const MsgCreatePlatformMetricResponse: MessageFns<MsgCreatePlatformMetricResponse> = {
  encode(_: MsgCreatePlatformMetricResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePlatformMetricResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlatformMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreatePlatformMetricResponse {
    return {};
  },

  toJSON(_: MsgCreatePlatformMetricResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlatformMetricResponse>, I>>(base?: I): MsgCreatePlatformMetricResponse {
    return MsgCreatePlatformMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlatformMetricResponse>, I>>(_: I): MsgCreatePlatformMetricResponse {
    const message = createBaseMsgCreatePlatformMetricResponse();
    return message;
  },
};

function createBaseMsgUpdatePlatformMetric(): MsgUpdatePlatformMetric {
  return {
    creator: "",
    index: "",
    metricName: "",
    metricValue: 0,
    metricType: "",
    period: "",
    timestamp: 0,
    metadata: "",
  };
}

export const MsgUpdatePlatformMetric: MessageFns<MsgUpdatePlatformMetric> = {
  encode(message: MsgUpdatePlatformMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.metricName !== "") {
      writer.uint32(26).string(message.metricName);
    }
    if (message.metricValue !== 0) {
      writer.uint32(32).uint64(message.metricValue);
    }
    if (message.metricType !== "") {
      writer.uint32(42).string(message.metricType);
    }
    if (message.period !== "") {
      writer.uint32(50).string(message.period);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).uint64(message.timestamp);
    }
    if (message.metadata !== "") {
      writer.uint32(66).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdatePlatformMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlatformMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metricName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.metricValue = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metricType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.period = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdatePlatformMetric {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      metricName: isSet(object.metricName) ? globalThis.String(object.metricName) : "",
      metricValue: isSet(object.metricValue) ? globalThis.Number(object.metricValue) : 0,
      metricType: isSet(object.metricType) ? globalThis.String(object.metricType) : "",
      period: isSet(object.period) ? globalThis.String(object.period) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: MsgUpdatePlatformMetric): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.metricName !== "") {
      obj.metricName = message.metricName;
    }
    if (message.metricValue !== 0) {
      obj.metricValue = Math.round(message.metricValue);
    }
    if (message.metricType !== "") {
      obj.metricType = message.metricType;
    }
    if (message.period !== "") {
      obj.period = message.period;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlatformMetric>, I>>(base?: I): MsgUpdatePlatformMetric {
    return MsgUpdatePlatformMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlatformMetric>, I>>(object: I): MsgUpdatePlatformMetric {
    const message = createBaseMsgUpdatePlatformMetric();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.metricName = object.metricName ?? "";
    message.metricValue = object.metricValue ?? 0;
    message.metricType = object.metricType ?? "";
    message.period = object.period ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseMsgUpdatePlatformMetricResponse(): MsgUpdatePlatformMetricResponse {
  return {};
}

export const MsgUpdatePlatformMetricResponse: MessageFns<MsgUpdatePlatformMetricResponse> = {
  encode(_: MsgUpdatePlatformMetricResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdatePlatformMetricResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlatformMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdatePlatformMetricResponse {
    return {};
  },

  toJSON(_: MsgUpdatePlatformMetricResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlatformMetricResponse>, I>>(base?: I): MsgUpdatePlatformMetricResponse {
    return MsgUpdatePlatformMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlatformMetricResponse>, I>>(_: I): MsgUpdatePlatformMetricResponse {
    const message = createBaseMsgUpdatePlatformMetricResponse();
    return message;
  },
};

function createBaseMsgDeletePlatformMetric(): MsgDeletePlatformMetric {
  return { creator: "", index: "" };
}

export const MsgDeletePlatformMetric: MessageFns<MsgDeletePlatformMetric> = {
  encode(message: MsgDeletePlatformMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeletePlatformMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeletePlatformMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeletePlatformMetric {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeletePlatformMetric): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeletePlatformMetric>, I>>(base?: I): MsgDeletePlatformMetric {
    return MsgDeletePlatformMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeletePlatformMetric>, I>>(object: I): MsgDeletePlatformMetric {
    const message = createBaseMsgDeletePlatformMetric();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeletePlatformMetricResponse(): MsgDeletePlatformMetricResponse {
  return {};
}

export const MsgDeletePlatformMetricResponse: MessageFns<MsgDeletePlatformMetricResponse> = {
  encode(_: MsgDeletePlatformMetricResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeletePlatformMetricResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeletePlatformMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeletePlatformMetricResponse {
    return {};
  },

  toJSON(_: MsgDeletePlatformMetricResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeletePlatformMetricResponse>, I>>(base?: I): MsgDeletePlatformMetricResponse {
    return MsgDeletePlatformMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeletePlatformMetricResponse>, I>>(_: I): MsgDeletePlatformMetricResponse {
    const message = createBaseMsgDeletePlatformMetricResponse();
    return message;
  },
};

function createBaseMsgCreateUserActivity(): MsgCreateUserActivity {
  return {
    creator: "",
    index: "",
    userAddress: "",
    activityType: "",
    action: "",
    resourceId: "",
    timestamp: 0,
    ipAddress: "",
    userAgent: "",
    metadata: "",
  };
}

export const MsgCreateUserActivity: MessageFns<MsgCreateUserActivity> = {
  encode(message: MsgCreateUserActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.activityType !== "") {
      writer.uint32(34).string(message.activityType);
    }
    if (message.action !== "") {
      writer.uint32(42).string(message.action);
    }
    if (message.resourceId !== "") {
      writer.uint32(50).string(message.resourceId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).uint64(message.timestamp);
    }
    if (message.ipAddress !== "") {
      writer.uint32(66).string(message.ipAddress);
    }
    if (message.userAgent !== "") {
      writer.uint32(74).string(message.userAgent);
    }
    if (message.metadata !== "") {
      writer.uint32(82).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.activityType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateUserActivity {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      activityType: isSet(object.activityType) ? globalThis.String(object.activityType) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: MsgCreateUserActivity): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.activityType !== "") {
      obj.activityType = message.activityType;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserActivity>, I>>(base?: I): MsgCreateUserActivity {
    return MsgCreateUserActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserActivity>, I>>(object: I): MsgCreateUserActivity {
    const message = createBaseMsgCreateUserActivity();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.activityType = object.activityType ?? "";
    message.action = object.action ?? "";
    message.resourceId = object.resourceId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.ipAddress = object.ipAddress ?? "";
    message.userAgent = object.userAgent ?? "";
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseMsgCreateUserActivityResponse(): MsgCreateUserActivityResponse {
  return {};
}

export const MsgCreateUserActivityResponse: MessageFns<MsgCreateUserActivityResponse> = {
  encode(_: MsgCreateUserActivityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserActivityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateUserActivityResponse {
    return {};
  },

  toJSON(_: MsgCreateUserActivityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserActivityResponse>, I>>(base?: I): MsgCreateUserActivityResponse {
    return MsgCreateUserActivityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserActivityResponse>, I>>(_: I): MsgCreateUserActivityResponse {
    const message = createBaseMsgCreateUserActivityResponse();
    return message;
  },
};

function createBaseMsgUpdateUserActivity(): MsgUpdateUserActivity {
  return {
    creator: "",
    index: "",
    userAddress: "",
    activityType: "",
    action: "",
    resourceId: "",
    timestamp: 0,
    ipAddress: "",
    userAgent: "",
    metadata: "",
  };
}

export const MsgUpdateUserActivity: MessageFns<MsgUpdateUserActivity> = {
  encode(message: MsgUpdateUserActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.activityType !== "") {
      writer.uint32(34).string(message.activityType);
    }
    if (message.action !== "") {
      writer.uint32(42).string(message.action);
    }
    if (message.resourceId !== "") {
      writer.uint32(50).string(message.resourceId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).uint64(message.timestamp);
    }
    if (message.ipAddress !== "") {
      writer.uint32(66).string(message.ipAddress);
    }
    if (message.userAgent !== "") {
      writer.uint32(74).string(message.userAgent);
    }
    if (message.metadata !== "") {
      writer.uint32(82).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.activityType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateUserActivity {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      activityType: isSet(object.activityType) ? globalThis.String(object.activityType) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: MsgUpdateUserActivity): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.activityType !== "") {
      obj.activityType = message.activityType;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== "") {
      obj.userAgent = message.userAgent;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserActivity>, I>>(base?: I): MsgUpdateUserActivity {
    return MsgUpdateUserActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserActivity>, I>>(object: I): MsgUpdateUserActivity {
    const message = createBaseMsgUpdateUserActivity();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.activityType = object.activityType ?? "";
    message.action = object.action ?? "";
    message.resourceId = object.resourceId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.ipAddress = object.ipAddress ?? "";
    message.userAgent = object.userAgent ?? "";
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseMsgUpdateUserActivityResponse(): MsgUpdateUserActivityResponse {
  return {};
}

export const MsgUpdateUserActivityResponse: MessageFns<MsgUpdateUserActivityResponse> = {
  encode(_: MsgUpdateUserActivityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserActivityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateUserActivityResponse {
    return {};
  },

  toJSON(_: MsgUpdateUserActivityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserActivityResponse>, I>>(base?: I): MsgUpdateUserActivityResponse {
    return MsgUpdateUserActivityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserActivityResponse>, I>>(_: I): MsgUpdateUserActivityResponse {
    const message = createBaseMsgUpdateUserActivityResponse();
    return message;
  },
};

function createBaseMsgDeleteUserActivity(): MsgDeleteUserActivity {
  return { creator: "", index: "" };
}

export const MsgDeleteUserActivity: MessageFns<MsgDeleteUserActivity> = {
  encode(message: MsgDeleteUserActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteUserActivity {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteUserActivity): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserActivity>, I>>(base?: I): MsgDeleteUserActivity {
    return MsgDeleteUserActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserActivity>, I>>(object: I): MsgDeleteUserActivity {
    const message = createBaseMsgDeleteUserActivity();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteUserActivityResponse(): MsgDeleteUserActivityResponse {
  return {};
}

export const MsgDeleteUserActivityResponse: MessageFns<MsgDeleteUserActivityResponse> = {
  encode(_: MsgDeleteUserActivityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserActivityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteUserActivityResponse {
    return {};
  },

  toJSON(_: MsgDeleteUserActivityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserActivityResponse>, I>>(base?: I): MsgDeleteUserActivityResponse {
    return MsgDeleteUserActivityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserActivityResponse>, I>>(_: I): MsgDeleteUserActivityResponse {
    const message = createBaseMsgDeleteUserActivityResponse();
    return message;
  },
};

function createBaseMsgCreateRevenueRecord(): MsgCreateRevenueRecord {
  return {
    creator: "",
    index: "",
    transactionType: "",
    amount: 0,
    currency: "",
    fromAddress: "",
    toAddress: "",
    timestamp: 0,
    feeAmount: 0,
    projectId: "",
    platformFee: 0,
  };
}

export const MsgCreateRevenueRecord: MessageFns<MsgCreateRevenueRecord> = {
  encode(message: MsgCreateRevenueRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.transactionType !== "") {
      writer.uint32(26).string(message.transactionType);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(42).string(message.currency);
    }
    if (message.fromAddress !== "") {
      writer.uint32(50).string(message.fromAddress);
    }
    if (message.toAddress !== "") {
      writer.uint32(58).string(message.toAddress);
    }
    if (message.timestamp !== 0) {
      writer.uint32(64).uint64(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      writer.uint32(72).uint64(message.feeAmount);
    }
    if (message.projectId !== "") {
      writer.uint32(82).string(message.projectId);
    }
    if (message.platformFee !== 0) {
      writer.uint32(88).uint64(message.platformFee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRevenueRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRevenueRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fromAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.feeAmount = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.platformFee = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateRevenueRecord {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      fromAddress: isSet(object.fromAddress) ? globalThis.String(object.fromAddress) : "",
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      feeAmount: isSet(object.feeAmount) ? globalThis.Number(object.feeAmount) : 0,
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      platformFee: isSet(object.platformFee) ? globalThis.Number(object.platformFee) : 0,
    };
  },

  toJSON(message: MsgCreateRevenueRecord): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.fromAddress !== "") {
      obj.fromAddress = message.fromAddress;
    }
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      obj.feeAmount = Math.round(message.feeAmount);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.platformFee !== 0) {
      obj.platformFee = Math.round(message.platformFee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateRevenueRecord>, I>>(base?: I): MsgCreateRevenueRecord {
    return MsgCreateRevenueRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateRevenueRecord>, I>>(object: I): MsgCreateRevenueRecord {
    const message = createBaseMsgCreateRevenueRecord();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.transactionType = object.transactionType ?? "";
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.fromAddress = object.fromAddress ?? "";
    message.toAddress = object.toAddress ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.feeAmount = object.feeAmount ?? 0;
    message.projectId = object.projectId ?? "";
    message.platformFee = object.platformFee ?? 0;
    return message;
  },
};

function createBaseMsgCreateRevenueRecordResponse(): MsgCreateRevenueRecordResponse {
  return {};
}

export const MsgCreateRevenueRecordResponse: MessageFns<MsgCreateRevenueRecordResponse> = {
  encode(_: MsgCreateRevenueRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRevenueRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRevenueRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateRevenueRecordResponse {
    return {};
  },

  toJSON(_: MsgCreateRevenueRecordResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateRevenueRecordResponse>, I>>(base?: I): MsgCreateRevenueRecordResponse {
    return MsgCreateRevenueRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateRevenueRecordResponse>, I>>(_: I): MsgCreateRevenueRecordResponse {
    const message = createBaseMsgCreateRevenueRecordResponse();
    return message;
  },
};

function createBaseMsgUpdateRevenueRecord(): MsgUpdateRevenueRecord {
  return {
    creator: "",
    index: "",
    transactionType: "",
    amount: 0,
    currency: "",
    fromAddress: "",
    toAddress: "",
    timestamp: 0,
    feeAmount: 0,
    projectId: "",
    platformFee: 0,
  };
}

export const MsgUpdateRevenueRecord: MessageFns<MsgUpdateRevenueRecord> = {
  encode(message: MsgUpdateRevenueRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.transactionType !== "") {
      writer.uint32(26).string(message.transactionType);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(42).string(message.currency);
    }
    if (message.fromAddress !== "") {
      writer.uint32(50).string(message.fromAddress);
    }
    if (message.toAddress !== "") {
      writer.uint32(58).string(message.toAddress);
    }
    if (message.timestamp !== 0) {
      writer.uint32(64).uint64(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      writer.uint32(72).uint64(message.feeAmount);
    }
    if (message.projectId !== "") {
      writer.uint32(82).string(message.projectId);
    }
    if (message.platformFee !== 0) {
      writer.uint32(88).uint64(message.platformFee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRevenueRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRevenueRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fromAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.feeAmount = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.platformFee = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateRevenueRecord {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      fromAddress: isSet(object.fromAddress) ? globalThis.String(object.fromAddress) : "",
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      feeAmount: isSet(object.feeAmount) ? globalThis.Number(object.feeAmount) : 0,
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      platformFee: isSet(object.platformFee) ? globalThis.Number(object.platformFee) : 0,
    };
  },

  toJSON(message: MsgUpdateRevenueRecord): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.fromAddress !== "") {
      obj.fromAddress = message.fromAddress;
    }
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.feeAmount !== 0) {
      obj.feeAmount = Math.round(message.feeAmount);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.platformFee !== 0) {
      obj.platformFee = Math.round(message.platformFee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRevenueRecord>, I>>(base?: I): MsgUpdateRevenueRecord {
    return MsgUpdateRevenueRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRevenueRecord>, I>>(object: I): MsgUpdateRevenueRecord {
    const message = createBaseMsgUpdateRevenueRecord();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.transactionType = object.transactionType ?? "";
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.fromAddress = object.fromAddress ?? "";
    message.toAddress = object.toAddress ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.feeAmount = object.feeAmount ?? 0;
    message.projectId = object.projectId ?? "";
    message.platformFee = object.platformFee ?? 0;
    return message;
  },
};

function createBaseMsgUpdateRevenueRecordResponse(): MsgUpdateRevenueRecordResponse {
  return {};
}

export const MsgUpdateRevenueRecordResponse: MessageFns<MsgUpdateRevenueRecordResponse> = {
  encode(_: MsgUpdateRevenueRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRevenueRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRevenueRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateRevenueRecordResponse {
    return {};
  },

  toJSON(_: MsgUpdateRevenueRecordResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRevenueRecordResponse>, I>>(base?: I): MsgUpdateRevenueRecordResponse {
    return MsgUpdateRevenueRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRevenueRecordResponse>, I>>(_: I): MsgUpdateRevenueRecordResponse {
    const message = createBaseMsgUpdateRevenueRecordResponse();
    return message;
  },
};

function createBaseMsgDeleteRevenueRecord(): MsgDeleteRevenueRecord {
  return { creator: "", index: "" };
}

export const MsgDeleteRevenueRecord: MessageFns<MsgDeleteRevenueRecord> = {
  encode(message: MsgDeleteRevenueRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteRevenueRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteRevenueRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteRevenueRecord {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteRevenueRecord): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteRevenueRecord>, I>>(base?: I): MsgDeleteRevenueRecord {
    return MsgDeleteRevenueRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteRevenueRecord>, I>>(object: I): MsgDeleteRevenueRecord {
    const message = createBaseMsgDeleteRevenueRecord();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteRevenueRecordResponse(): MsgDeleteRevenueRecordResponse {
  return {};
}

export const MsgDeleteRevenueRecordResponse: MessageFns<MsgDeleteRevenueRecordResponse> = {
  encode(_: MsgDeleteRevenueRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteRevenueRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteRevenueRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteRevenueRecordResponse {
    return {};
  },

  toJSON(_: MsgDeleteRevenueRecordResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteRevenueRecordResponse>, I>>(base?: I): MsgDeleteRevenueRecordResponse {
    return MsgDeleteRevenueRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteRevenueRecordResponse>, I>>(_: I): MsgDeleteRevenueRecordResponse {
    const message = createBaseMsgDeleteRevenueRecordResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreatePlatformMetric(request: MsgCreatePlatformMetric): Promise<MsgCreatePlatformMetricResponse>;
  UpdatePlatformMetric(request: MsgUpdatePlatformMetric): Promise<MsgUpdatePlatformMetricResponse>;
  DeletePlatformMetric(request: MsgDeletePlatformMetric): Promise<MsgDeletePlatformMetricResponse>;
  CreateUserActivity(request: MsgCreateUserActivity): Promise<MsgCreateUserActivityResponse>;
  UpdateUserActivity(request: MsgUpdateUserActivity): Promise<MsgUpdateUserActivityResponse>;
  DeleteUserActivity(request: MsgDeleteUserActivity): Promise<MsgDeleteUserActivityResponse>;
  CreateRevenueRecord(request: MsgCreateRevenueRecord): Promise<MsgCreateRevenueRecordResponse>;
  UpdateRevenueRecord(request: MsgUpdateRevenueRecord): Promise<MsgUpdateRevenueRecordResponse>;
  DeleteRevenueRecord(request: MsgDeleteRevenueRecord): Promise<MsgDeleteRevenueRecordResponse>;
}

export const MsgServiceName = "skillchain.analytics.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreatePlatformMetric = this.CreatePlatformMetric.bind(this);
    this.UpdatePlatformMetric = this.UpdatePlatformMetric.bind(this);
    this.DeletePlatformMetric = this.DeletePlatformMetric.bind(this);
    this.CreateUserActivity = this.CreateUserActivity.bind(this);
    this.UpdateUserActivity = this.UpdateUserActivity.bind(this);
    this.DeleteUserActivity = this.DeleteUserActivity.bind(this);
    this.CreateRevenueRecord = this.CreateRevenueRecord.bind(this);
    this.UpdateRevenueRecord = this.UpdateRevenueRecord.bind(this);
    this.DeleteRevenueRecord = this.DeleteRevenueRecord.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreatePlatformMetric(request: MsgCreatePlatformMetric): Promise<MsgCreatePlatformMetricResponse> {
    const data = MsgCreatePlatformMetric.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePlatformMetric", data);
    return promise.then((data) => MsgCreatePlatformMetricResponse.decode(new BinaryReader(data)));
  }

  UpdatePlatformMetric(request: MsgUpdatePlatformMetric): Promise<MsgUpdatePlatformMetricResponse> {
    const data = MsgUpdatePlatformMetric.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePlatformMetric", data);
    return promise.then((data) => MsgUpdatePlatformMetricResponse.decode(new BinaryReader(data)));
  }

  DeletePlatformMetric(request: MsgDeletePlatformMetric): Promise<MsgDeletePlatformMetricResponse> {
    const data = MsgDeletePlatformMetric.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeletePlatformMetric", data);
    return promise.then((data) => MsgDeletePlatformMetricResponse.decode(new BinaryReader(data)));
  }

  CreateUserActivity(request: MsgCreateUserActivity): Promise<MsgCreateUserActivityResponse> {
    const data = MsgCreateUserActivity.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUserActivity", data);
    return promise.then((data) => MsgCreateUserActivityResponse.decode(new BinaryReader(data)));
  }

  UpdateUserActivity(request: MsgUpdateUserActivity): Promise<MsgUpdateUserActivityResponse> {
    const data = MsgUpdateUserActivity.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserActivity", data);
    return promise.then((data) => MsgUpdateUserActivityResponse.decode(new BinaryReader(data)));
  }

  DeleteUserActivity(request: MsgDeleteUserActivity): Promise<MsgDeleteUserActivityResponse> {
    const data = MsgDeleteUserActivity.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserActivity", data);
    return promise.then((data) => MsgDeleteUserActivityResponse.decode(new BinaryReader(data)));
  }

  CreateRevenueRecord(request: MsgCreateRevenueRecord): Promise<MsgCreateRevenueRecordResponse> {
    const data = MsgCreateRevenueRecord.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateRevenueRecord", data);
    return promise.then((data) => MsgCreateRevenueRecordResponse.decode(new BinaryReader(data)));
  }

  UpdateRevenueRecord(request: MsgUpdateRevenueRecord): Promise<MsgUpdateRevenueRecordResponse> {
    const data = MsgUpdateRevenueRecord.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateRevenueRecord", data);
    return promise.then((data) => MsgUpdateRevenueRecordResponse.decode(new BinaryReader(data)));
  }

  DeleteRevenueRecord(request: MsgDeleteRevenueRecord): Promise<MsgDeleteRevenueRecordResponse> {
    const data = MsgDeleteRevenueRecord.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteRevenueRecord", data);
    return promise.then((data) => MsgDeleteRevenueRecordResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
