// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/analytics/platform_metric.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.analytics";

export interface PlatformMetric {
  index: string;
  metricName: string;
  metricValue: number;
  metricType: string;
  period: string;
  timestamp: number;
  metadata: string;
  creator: string;
}

function createBasePlatformMetric(): PlatformMetric {
  return {
    index: "",
    metricName: "",
    metricValue: 0,
    metricType: "",
    period: "",
    timestamp: 0,
    metadata: "",
    creator: "",
  };
}

export const PlatformMetric: MessageFns<PlatformMetric> = {
  encode(message: PlatformMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.metricName !== "") {
      writer.uint32(18).string(message.metricName);
    }
    if (message.metricValue !== 0) {
      writer.uint32(24).uint64(message.metricValue);
    }
    if (message.metricType !== "") {
      writer.uint32(34).string(message.metricType);
    }
    if (message.period !== "") {
      writer.uint32(42).string(message.period);
    }
    if (message.timestamp !== 0) {
      writer.uint32(48).uint64(message.timestamp);
    }
    if (message.metadata !== "") {
      writer.uint32(58).string(message.metadata);
    }
    if (message.creator !== "") {
      writer.uint32(66).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metricName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.metricValue = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metricType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.period = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformMetric {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      metricName: isSet(object.metricName) ? globalThis.String(object.metricName) : "",
      metricValue: isSet(object.metricValue) ? globalThis.Number(object.metricValue) : 0,
      metricType: isSet(object.metricType) ? globalThis.String(object.metricType) : "",
      period: isSet(object.period) ? globalThis.String(object.period) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: PlatformMetric): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.metricName !== "") {
      obj.metricName = message.metricName;
    }
    if (message.metricValue !== 0) {
      obj.metricValue = Math.round(message.metricValue);
    }
    if (message.metricType !== "") {
      obj.metricType = message.metricType;
    }
    if (message.period !== "") {
      obj.period = message.period;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlatformMetric>, I>>(base?: I): PlatformMetric {
    return PlatformMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlatformMetric>, I>>(object: I): PlatformMetric {
    const message = createBasePlatformMetric();
    message.index = object.index ?? "";
    message.metricName = object.metricName ?? "";
    message.metricValue = object.metricValue ?? 0;
    message.metricType = object.metricType ?? "";
    message.period = object.period ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.metadata = object.metadata ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
