// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/profile/user_skill.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.profile";

export interface UserSkill {
  index: string;
  owner: string;
  skillName: string;
  proficiencyLevel: string;
  yearsExperience: number;
  verified: boolean;
  verifiedBy: string;
  verificationDate: number;
  endorsementCount: number;
  creator: string;
}

function createBaseUserSkill(): UserSkill {
  return {
    index: "",
    owner: "",
    skillName: "",
    proficiencyLevel: "",
    yearsExperience: 0,
    verified: false,
    verifiedBy: "",
    verificationDate: 0,
    endorsementCount: 0,
    creator: "",
  };
}

export const UserSkill: MessageFns<UserSkill> = {
  encode(message: UserSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.skillName !== "") {
      writer.uint32(26).string(message.skillName);
    }
    if (message.proficiencyLevel !== "") {
      writer.uint32(34).string(message.proficiencyLevel);
    }
    if (message.yearsExperience !== 0) {
      writer.uint32(40).uint64(message.yearsExperience);
    }
    if (message.verified !== false) {
      writer.uint32(48).bool(message.verified);
    }
    if (message.verifiedBy !== "") {
      writer.uint32(58).string(message.verifiedBy);
    }
    if (message.verificationDate !== 0) {
      writer.uint32(64).uint64(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      writer.uint32(72).uint64(message.endorsementCount);
    }
    if (message.creator !== "") {
      writer.uint32(82).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proficiencyLevel = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.yearsExperience = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.verifiedBy = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.verificationDate = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.endorsementCount = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserSkill {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      proficiencyLevel: isSet(object.proficiencyLevel) ? globalThis.String(object.proficiencyLevel) : "",
      yearsExperience: isSet(object.yearsExperience) ? globalThis.Number(object.yearsExperience) : 0,
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      verifiedBy: isSet(object.verifiedBy) ? globalThis.String(object.verifiedBy) : "",
      verificationDate: isSet(object.verificationDate) ? globalThis.Number(object.verificationDate) : 0,
      endorsementCount: isSet(object.endorsementCount) ? globalThis.Number(object.endorsementCount) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: UserSkill): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.proficiencyLevel !== "") {
      obj.proficiencyLevel = message.proficiencyLevel;
    }
    if (message.yearsExperience !== 0) {
      obj.yearsExperience = Math.round(message.yearsExperience);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.verifiedBy !== "") {
      obj.verifiedBy = message.verifiedBy;
    }
    if (message.verificationDate !== 0) {
      obj.verificationDate = Math.round(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      obj.endorsementCount = Math.round(message.endorsementCount);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserSkill>, I>>(base?: I): UserSkill {
    return UserSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserSkill>, I>>(object: I): UserSkill {
    const message = createBaseUserSkill();
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.skillName = object.skillName ?? "";
    message.proficiencyLevel = object.proficiencyLevel ?? "";
    message.yearsExperience = object.yearsExperience ?? 0;
    message.verified = object.verified ?? false;
    message.verifiedBy = object.verifiedBy ?? "";
    message.verificationDate = object.verificationDate ?? 0;
    message.endorsementCount = object.endorsementCount ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
