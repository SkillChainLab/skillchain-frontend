// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/profile/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "skillchain.profile";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateProfile {
  creator: string;
  displayName: string;
  bio: string;
  location: string;
  website: string;
  github: string;
  linkedin: string;
  twitter: string;
  avatar: string;
}

export interface MsgCreateProfileResponse {
}

export interface MsgCreateUserProfile {
  creator: string;
  index: string;
  owner: string;
  displayName: string;
  bio: string;
  location: string;
  website: string;
  github: string;
  linkedin: string;
  twitter: string;
  avatar: string;
  reputationScore: number;
  createdAt: number;
  updatedAt: number;
}

export interface MsgCreateUserProfileResponse {
}

export interface MsgUpdateUserProfile {
  creator: string;
  index: string;
  owner: string;
  displayName: string;
  bio: string;
  location: string;
  website: string;
  github: string;
  linkedin: string;
  twitter: string;
  avatar: string;
  reputationScore: number;
  createdAt: number;
  updatedAt: number;
}

export interface MsgUpdateUserProfileResponse {
}

export interface MsgDeleteUserProfile {
  creator: string;
  index: string;
}

export interface MsgDeleteUserProfileResponse {
}

export interface MsgCreateUserSkill {
  creator: string;
  index: string;
  owner: string;
  skillName: string;
  proficiencyLevel: string;
  yearsExperience: number;
  verified: boolean;
  verifiedBy: string;
  verificationDate: number;
  endorsementCount: number;
}

export interface MsgCreateUserSkillResponse {
}

export interface MsgUpdateUserSkill {
  creator: string;
  index: string;
  owner: string;
  skillName: string;
  proficiencyLevel: string;
  yearsExperience: number;
  verified: boolean;
  verifiedBy: string;
  verificationDate: number;
  endorsementCount: number;
}

export interface MsgUpdateUserSkillResponse {
}

export interface MsgDeleteUserSkill {
  creator: string;
  index: string;
}

export interface MsgDeleteUserSkillResponse {
}

export interface MsgEndorseSkill {
  creator: string;
  targetUser: string;
  skillName: string;
  endorsementType: string;
  comment: string;
  stakeTokens: number;
}

export interface MsgEndorseSkillResponse {
}

export interface MsgCreateSkillEndorsement {
  creator: string;
  index: string;
  endorser: string;
  targetUser: string;
  skillName: string;
  endorsementType: string;
  comment: string;
  createdAt: number;
  skillTokensStaked: number;
}

export interface MsgCreateSkillEndorsementResponse {
}

export interface MsgUpdateSkillEndorsement {
  creator: string;
  index: string;
  endorser: string;
  targetUser: string;
  skillName: string;
  endorsementType: string;
  comment: string;
  createdAt: number;
  skillTokensStaked: number;
}

export interface MsgUpdateSkillEndorsementResponse {
}

export interface MsgDeleteSkillEndorsement {
  creator: string;
  index: string;
}

export interface MsgDeleteSkillEndorsementResponse {
}

export interface MsgDisputeEndorsement {
  /** Client who hired the freelancer */
  creator: string;
  /** The endorsement being disputed */
  endorsementId: string;
  /** Why the job was unsuccessful */
  disputeReason: string;
  /** Additional evidence or documentation */
  evidence: string;
}

export interface MsgDisputeEndorsementResponse {
}

export interface MsgWithdrawStakedTokens {
  creator: string;
  skillName: string;
}

export interface MsgWithdrawStakedTokensResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateProfile(): MsgCreateProfile {
  return {
    creator: "",
    displayName: "",
    bio: "",
    location: "",
    website: "",
    github: "",
    linkedin: "",
    twitter: "",
    avatar: "",
  };
}

export const MsgCreateProfile: MessageFns<MsgCreateProfile> = {
  encode(message: MsgCreateProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.bio !== "") {
      writer.uint32(26).string(message.bio);
    }
    if (message.location !== "") {
      writer.uint32(34).string(message.location);
    }
    if (message.website !== "") {
      writer.uint32(42).string(message.website);
    }
    if (message.github !== "") {
      writer.uint32(50).string(message.github);
    }
    if (message.linkedin !== "") {
      writer.uint32(58).string(message.linkedin);
    }
    if (message.twitter !== "") {
      writer.uint32(66).string(message.twitter);
    }
    if (message.avatar !== "") {
      writer.uint32(74).string(message.avatar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProfile {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
    };
  },

  toJSON(message: MsgCreateProfile): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProfile>, I>>(base?: I): MsgCreateProfile {
    return MsgCreateProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProfile>, I>>(object: I): MsgCreateProfile {
    const message = createBaseMsgCreateProfile();
    message.creator = object.creator ?? "";
    message.displayName = object.displayName ?? "";
    message.bio = object.bio ?? "";
    message.location = object.location ?? "";
    message.website = object.website ?? "";
    message.github = object.github ?? "";
    message.linkedin = object.linkedin ?? "";
    message.twitter = object.twitter ?? "";
    message.avatar = object.avatar ?? "";
    return message;
  },
};

function createBaseMsgCreateProfileResponse(): MsgCreateProfileResponse {
  return {};
}

export const MsgCreateProfileResponse: MessageFns<MsgCreateProfileResponse> = {
  encode(_: MsgCreateProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProfileResponse {
    return {};
  },

  toJSON(_: MsgCreateProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProfileResponse>, I>>(base?: I): MsgCreateProfileResponse {
    return MsgCreateProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProfileResponse>, I>>(_: I): MsgCreateProfileResponse {
    const message = createBaseMsgCreateProfileResponse();
    return message;
  },
};

function createBaseMsgCreateUserProfile(): MsgCreateUserProfile {
  return {
    creator: "",
    index: "",
    owner: "",
    displayName: "",
    bio: "",
    location: "",
    website: "",
    github: "",
    linkedin: "",
    twitter: "",
    avatar: "",
    reputationScore: 0,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const MsgCreateUserProfile: MessageFns<MsgCreateUserProfile> = {
  encode(message: MsgCreateUserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    if (message.website !== "") {
      writer.uint32(58).string(message.website);
    }
    if (message.github !== "") {
      writer.uint32(66).string(message.github);
    }
    if (message.linkedin !== "") {
      writer.uint32(74).string(message.linkedin);
    }
    if (message.twitter !== "") {
      writer.uint32(82).string(message.twitter);
    }
    if (message.avatar !== "") {
      writer.uint32(90).string(message.avatar);
    }
    if (message.reputationScore !== 0) {
      writer.uint32(96).uint64(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      writer.uint32(104).uint64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(112).uint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.reputationScore = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.updatedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateUserProfile {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      reputationScore: isSet(object.reputationScore) ? globalThis.Number(object.reputationScore) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: MsgCreateUserProfile): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.reputationScore !== 0) {
      obj.reputationScore = Math.round(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserProfile>, I>>(base?: I): MsgCreateUserProfile {
    return MsgCreateUserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserProfile>, I>>(object: I): MsgCreateUserProfile {
    const message = createBaseMsgCreateUserProfile();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.displayName = object.displayName ?? "";
    message.bio = object.bio ?? "";
    message.location = object.location ?? "";
    message.website = object.website ?? "";
    message.github = object.github ?? "";
    message.linkedin = object.linkedin ?? "";
    message.twitter = object.twitter ?? "";
    message.avatar = object.avatar ?? "";
    message.reputationScore = object.reputationScore ?? 0;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseMsgCreateUserProfileResponse(): MsgCreateUserProfileResponse {
  return {};
}

export const MsgCreateUserProfileResponse: MessageFns<MsgCreateUserProfileResponse> = {
  encode(_: MsgCreateUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateUserProfileResponse {
    return {};
  },

  toJSON(_: MsgCreateUserProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserProfileResponse>, I>>(base?: I): MsgCreateUserProfileResponse {
    return MsgCreateUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserProfileResponse>, I>>(_: I): MsgCreateUserProfileResponse {
    const message = createBaseMsgCreateUserProfileResponse();
    return message;
  },
};

function createBaseMsgUpdateUserProfile(): MsgUpdateUserProfile {
  return {
    creator: "",
    index: "",
    owner: "",
    displayName: "",
    bio: "",
    location: "",
    website: "",
    github: "",
    linkedin: "",
    twitter: "",
    avatar: "",
    reputationScore: 0,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const MsgUpdateUserProfile: MessageFns<MsgUpdateUserProfile> = {
  encode(message: MsgUpdateUserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    if (message.website !== "") {
      writer.uint32(58).string(message.website);
    }
    if (message.github !== "") {
      writer.uint32(66).string(message.github);
    }
    if (message.linkedin !== "") {
      writer.uint32(74).string(message.linkedin);
    }
    if (message.twitter !== "") {
      writer.uint32(82).string(message.twitter);
    }
    if (message.avatar !== "") {
      writer.uint32(90).string(message.avatar);
    }
    if (message.reputationScore !== 0) {
      writer.uint32(96).uint64(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      writer.uint32(104).uint64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(112).uint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.reputationScore = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.updatedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateUserProfile {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      reputationScore: isSet(object.reputationScore) ? globalThis.Number(object.reputationScore) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: MsgUpdateUserProfile): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.reputationScore !== 0) {
      obj.reputationScore = Math.round(message.reputationScore);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserProfile>, I>>(base?: I): MsgUpdateUserProfile {
    return MsgUpdateUserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserProfile>, I>>(object: I): MsgUpdateUserProfile {
    const message = createBaseMsgUpdateUserProfile();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.displayName = object.displayName ?? "";
    message.bio = object.bio ?? "";
    message.location = object.location ?? "";
    message.website = object.website ?? "";
    message.github = object.github ?? "";
    message.linkedin = object.linkedin ?? "";
    message.twitter = object.twitter ?? "";
    message.avatar = object.avatar ?? "";
    message.reputationScore = object.reputationScore ?? 0;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseMsgUpdateUserProfileResponse(): MsgUpdateUserProfileResponse {
  return {};
}

export const MsgUpdateUserProfileResponse: MessageFns<MsgUpdateUserProfileResponse> = {
  encode(_: MsgUpdateUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateUserProfileResponse {
    return {};
  },

  toJSON(_: MsgUpdateUserProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserProfileResponse>, I>>(base?: I): MsgUpdateUserProfileResponse {
    return MsgUpdateUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserProfileResponse>, I>>(_: I): MsgUpdateUserProfileResponse {
    const message = createBaseMsgUpdateUserProfileResponse();
    return message;
  },
};

function createBaseMsgDeleteUserProfile(): MsgDeleteUserProfile {
  return { creator: "", index: "" };
}

export const MsgDeleteUserProfile: MessageFns<MsgDeleteUserProfile> = {
  encode(message: MsgDeleteUserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteUserProfile {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteUserProfile): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserProfile>, I>>(base?: I): MsgDeleteUserProfile {
    return MsgDeleteUserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserProfile>, I>>(object: I): MsgDeleteUserProfile {
    const message = createBaseMsgDeleteUserProfile();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteUserProfileResponse(): MsgDeleteUserProfileResponse {
  return {};
}

export const MsgDeleteUserProfileResponse: MessageFns<MsgDeleteUserProfileResponse> = {
  encode(_: MsgDeleteUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteUserProfileResponse {
    return {};
  },

  toJSON(_: MsgDeleteUserProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserProfileResponse>, I>>(base?: I): MsgDeleteUserProfileResponse {
    return MsgDeleteUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserProfileResponse>, I>>(_: I): MsgDeleteUserProfileResponse {
    const message = createBaseMsgDeleteUserProfileResponse();
    return message;
  },
};

function createBaseMsgCreateUserSkill(): MsgCreateUserSkill {
  return {
    creator: "",
    index: "",
    owner: "",
    skillName: "",
    proficiencyLevel: "",
    yearsExperience: 0,
    verified: false,
    verifiedBy: "",
    verificationDate: 0,
    endorsementCount: 0,
  };
}

export const MsgCreateUserSkill: MessageFns<MsgCreateUserSkill> = {
  encode(message: MsgCreateUserSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.skillName !== "") {
      writer.uint32(34).string(message.skillName);
    }
    if (message.proficiencyLevel !== "") {
      writer.uint32(42).string(message.proficiencyLevel);
    }
    if (message.yearsExperience !== 0) {
      writer.uint32(48).uint64(message.yearsExperience);
    }
    if (message.verified !== false) {
      writer.uint32(56).bool(message.verified);
    }
    if (message.verifiedBy !== "") {
      writer.uint32(66).string(message.verifiedBy);
    }
    if (message.verificationDate !== 0) {
      writer.uint32(72).uint64(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      writer.uint32(80).uint64(message.endorsementCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proficiencyLevel = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.yearsExperience = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.verifiedBy = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.verificationDate = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endorsementCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateUserSkill {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      proficiencyLevel: isSet(object.proficiencyLevel) ? globalThis.String(object.proficiencyLevel) : "",
      yearsExperience: isSet(object.yearsExperience) ? globalThis.Number(object.yearsExperience) : 0,
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      verifiedBy: isSet(object.verifiedBy) ? globalThis.String(object.verifiedBy) : "",
      verificationDate: isSet(object.verificationDate) ? globalThis.Number(object.verificationDate) : 0,
      endorsementCount: isSet(object.endorsementCount) ? globalThis.Number(object.endorsementCount) : 0,
    };
  },

  toJSON(message: MsgCreateUserSkill): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.proficiencyLevel !== "") {
      obj.proficiencyLevel = message.proficiencyLevel;
    }
    if (message.yearsExperience !== 0) {
      obj.yearsExperience = Math.round(message.yearsExperience);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.verifiedBy !== "") {
      obj.verifiedBy = message.verifiedBy;
    }
    if (message.verificationDate !== 0) {
      obj.verificationDate = Math.round(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      obj.endorsementCount = Math.round(message.endorsementCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserSkill>, I>>(base?: I): MsgCreateUserSkill {
    return MsgCreateUserSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserSkill>, I>>(object: I): MsgCreateUserSkill {
    const message = createBaseMsgCreateUserSkill();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.skillName = object.skillName ?? "";
    message.proficiencyLevel = object.proficiencyLevel ?? "";
    message.yearsExperience = object.yearsExperience ?? 0;
    message.verified = object.verified ?? false;
    message.verifiedBy = object.verifiedBy ?? "";
    message.verificationDate = object.verificationDate ?? 0;
    message.endorsementCount = object.endorsementCount ?? 0;
    return message;
  },
};

function createBaseMsgCreateUserSkillResponse(): MsgCreateUserSkillResponse {
  return {};
}

export const MsgCreateUserSkillResponse: MessageFns<MsgCreateUserSkillResponse> = {
  encode(_: MsgCreateUserSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateUserSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateUserSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateUserSkillResponse {
    return {};
  },

  toJSON(_: MsgCreateUserSkillResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateUserSkillResponse>, I>>(base?: I): MsgCreateUserSkillResponse {
    return MsgCreateUserSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateUserSkillResponse>, I>>(_: I): MsgCreateUserSkillResponse {
    const message = createBaseMsgCreateUserSkillResponse();
    return message;
  },
};

function createBaseMsgUpdateUserSkill(): MsgUpdateUserSkill {
  return {
    creator: "",
    index: "",
    owner: "",
    skillName: "",
    proficiencyLevel: "",
    yearsExperience: 0,
    verified: false,
    verifiedBy: "",
    verificationDate: 0,
    endorsementCount: 0,
  };
}

export const MsgUpdateUserSkill: MessageFns<MsgUpdateUserSkill> = {
  encode(message: MsgUpdateUserSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.skillName !== "") {
      writer.uint32(34).string(message.skillName);
    }
    if (message.proficiencyLevel !== "") {
      writer.uint32(42).string(message.proficiencyLevel);
    }
    if (message.yearsExperience !== 0) {
      writer.uint32(48).uint64(message.yearsExperience);
    }
    if (message.verified !== false) {
      writer.uint32(56).bool(message.verified);
    }
    if (message.verifiedBy !== "") {
      writer.uint32(66).string(message.verifiedBy);
    }
    if (message.verificationDate !== 0) {
      writer.uint32(72).uint64(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      writer.uint32(80).uint64(message.endorsementCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proficiencyLevel = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.yearsExperience = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.verifiedBy = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.verificationDate = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endorsementCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateUserSkill {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      proficiencyLevel: isSet(object.proficiencyLevel) ? globalThis.String(object.proficiencyLevel) : "",
      yearsExperience: isSet(object.yearsExperience) ? globalThis.Number(object.yearsExperience) : 0,
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      verifiedBy: isSet(object.verifiedBy) ? globalThis.String(object.verifiedBy) : "",
      verificationDate: isSet(object.verificationDate) ? globalThis.Number(object.verificationDate) : 0,
      endorsementCount: isSet(object.endorsementCount) ? globalThis.Number(object.endorsementCount) : 0,
    };
  },

  toJSON(message: MsgUpdateUserSkill): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.proficiencyLevel !== "") {
      obj.proficiencyLevel = message.proficiencyLevel;
    }
    if (message.yearsExperience !== 0) {
      obj.yearsExperience = Math.round(message.yearsExperience);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.verifiedBy !== "") {
      obj.verifiedBy = message.verifiedBy;
    }
    if (message.verificationDate !== 0) {
      obj.verificationDate = Math.round(message.verificationDate);
    }
    if (message.endorsementCount !== 0) {
      obj.endorsementCount = Math.round(message.endorsementCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserSkill>, I>>(base?: I): MsgUpdateUserSkill {
    return MsgUpdateUserSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserSkill>, I>>(object: I): MsgUpdateUserSkill {
    const message = createBaseMsgUpdateUserSkill();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.owner = object.owner ?? "";
    message.skillName = object.skillName ?? "";
    message.proficiencyLevel = object.proficiencyLevel ?? "";
    message.yearsExperience = object.yearsExperience ?? 0;
    message.verified = object.verified ?? false;
    message.verifiedBy = object.verifiedBy ?? "";
    message.verificationDate = object.verificationDate ?? 0;
    message.endorsementCount = object.endorsementCount ?? 0;
    return message;
  },
};

function createBaseMsgUpdateUserSkillResponse(): MsgUpdateUserSkillResponse {
  return {};
}

export const MsgUpdateUserSkillResponse: MessageFns<MsgUpdateUserSkillResponse> = {
  encode(_: MsgUpdateUserSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateUserSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateUserSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateUserSkillResponse {
    return {};
  },

  toJSON(_: MsgUpdateUserSkillResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateUserSkillResponse>, I>>(base?: I): MsgUpdateUserSkillResponse {
    return MsgUpdateUserSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateUserSkillResponse>, I>>(_: I): MsgUpdateUserSkillResponse {
    const message = createBaseMsgUpdateUserSkillResponse();
    return message;
  },
};

function createBaseMsgDeleteUserSkill(): MsgDeleteUserSkill {
  return { creator: "", index: "" };
}

export const MsgDeleteUserSkill: MessageFns<MsgDeleteUserSkill> = {
  encode(message: MsgDeleteUserSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteUserSkill {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteUserSkill): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserSkill>, I>>(base?: I): MsgDeleteUserSkill {
    return MsgDeleteUserSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserSkill>, I>>(object: I): MsgDeleteUserSkill {
    const message = createBaseMsgDeleteUserSkill();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteUserSkillResponse(): MsgDeleteUserSkillResponse {
  return {};
}

export const MsgDeleteUserSkillResponse: MessageFns<MsgDeleteUserSkillResponse> = {
  encode(_: MsgDeleteUserSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteUserSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteUserSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteUserSkillResponse {
    return {};
  },

  toJSON(_: MsgDeleteUserSkillResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteUserSkillResponse>, I>>(base?: I): MsgDeleteUserSkillResponse {
    return MsgDeleteUserSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteUserSkillResponse>, I>>(_: I): MsgDeleteUserSkillResponse {
    const message = createBaseMsgDeleteUserSkillResponse();
    return message;
  },
};

function createBaseMsgEndorseSkill(): MsgEndorseSkill {
  return { creator: "", targetUser: "", skillName: "", endorsementType: "", comment: "", stakeTokens: 0 };
}

export const MsgEndorseSkill: MessageFns<MsgEndorseSkill> = {
  encode(message: MsgEndorseSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.targetUser !== "") {
      writer.uint32(18).string(message.targetUser);
    }
    if (message.skillName !== "") {
      writer.uint32(26).string(message.skillName);
    }
    if (message.endorsementType !== "") {
      writer.uint32(34).string(message.endorsementType);
    }
    if (message.comment !== "") {
      writer.uint32(42).string(message.comment);
    }
    if (message.stakeTokens !== 0) {
      writer.uint32(48).uint64(message.stakeTokens);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgEndorseSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEndorseSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetUser = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endorsementType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.stakeTokens = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgEndorseSkill {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      targetUser: isSet(object.targetUser) ? globalThis.String(object.targetUser) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      endorsementType: isSet(object.endorsementType) ? globalThis.String(object.endorsementType) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      stakeTokens: isSet(object.stakeTokens) ? globalThis.Number(object.stakeTokens) : 0,
    };
  },

  toJSON(message: MsgEndorseSkill): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.targetUser !== "") {
      obj.targetUser = message.targetUser;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.endorsementType !== "") {
      obj.endorsementType = message.endorsementType;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.stakeTokens !== 0) {
      obj.stakeTokens = Math.round(message.stakeTokens);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEndorseSkill>, I>>(base?: I): MsgEndorseSkill {
    return MsgEndorseSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEndorseSkill>, I>>(object: I): MsgEndorseSkill {
    const message = createBaseMsgEndorseSkill();
    message.creator = object.creator ?? "";
    message.targetUser = object.targetUser ?? "";
    message.skillName = object.skillName ?? "";
    message.endorsementType = object.endorsementType ?? "";
    message.comment = object.comment ?? "";
    message.stakeTokens = object.stakeTokens ?? 0;
    return message;
  },
};

function createBaseMsgEndorseSkillResponse(): MsgEndorseSkillResponse {
  return {};
}

export const MsgEndorseSkillResponse: MessageFns<MsgEndorseSkillResponse> = {
  encode(_: MsgEndorseSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgEndorseSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEndorseSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgEndorseSkillResponse {
    return {};
  },

  toJSON(_: MsgEndorseSkillResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEndorseSkillResponse>, I>>(base?: I): MsgEndorseSkillResponse {
    return MsgEndorseSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEndorseSkillResponse>, I>>(_: I): MsgEndorseSkillResponse {
    const message = createBaseMsgEndorseSkillResponse();
    return message;
  },
};

function createBaseMsgCreateSkillEndorsement(): MsgCreateSkillEndorsement {
  return {
    creator: "",
    index: "",
    endorser: "",
    targetUser: "",
    skillName: "",
    endorsementType: "",
    comment: "",
    createdAt: 0,
    skillTokensStaked: 0,
  };
}

export const MsgCreateSkillEndorsement: MessageFns<MsgCreateSkillEndorsement> = {
  encode(message: MsgCreateSkillEndorsement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.endorser !== "") {
      writer.uint32(26).string(message.endorser);
    }
    if (message.targetUser !== "") {
      writer.uint32(34).string(message.targetUser);
    }
    if (message.skillName !== "") {
      writer.uint32(42).string(message.skillName);
    }
    if (message.endorsementType !== "") {
      writer.uint32(50).string(message.endorsementType);
    }
    if (message.comment !== "") {
      writer.uint32(58).string(message.comment);
    }
    if (message.createdAt !== 0) {
      writer.uint32(64).uint64(message.createdAt);
    }
    if (message.skillTokensStaked !== 0) {
      writer.uint32(72).uint64(message.skillTokensStaked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateSkillEndorsement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSkillEndorsement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endorser = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetUser = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endorsementType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.skillTokensStaked = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateSkillEndorsement {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      endorser: isSet(object.endorser) ? globalThis.String(object.endorser) : "",
      targetUser: isSet(object.targetUser) ? globalThis.String(object.targetUser) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      endorsementType: isSet(object.endorsementType) ? globalThis.String(object.endorsementType) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      skillTokensStaked: isSet(object.skillTokensStaked) ? globalThis.Number(object.skillTokensStaked) : 0,
    };
  },

  toJSON(message: MsgCreateSkillEndorsement): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.endorser !== "") {
      obj.endorser = message.endorser;
    }
    if (message.targetUser !== "") {
      obj.targetUser = message.targetUser;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.endorsementType !== "") {
      obj.endorsementType = message.endorsementType;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.skillTokensStaked !== 0) {
      obj.skillTokensStaked = Math.round(message.skillTokensStaked);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateSkillEndorsement>, I>>(base?: I): MsgCreateSkillEndorsement {
    return MsgCreateSkillEndorsement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateSkillEndorsement>, I>>(object: I): MsgCreateSkillEndorsement {
    const message = createBaseMsgCreateSkillEndorsement();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.endorser = object.endorser ?? "";
    message.targetUser = object.targetUser ?? "";
    message.skillName = object.skillName ?? "";
    message.endorsementType = object.endorsementType ?? "";
    message.comment = object.comment ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.skillTokensStaked = object.skillTokensStaked ?? 0;
    return message;
  },
};

function createBaseMsgCreateSkillEndorsementResponse(): MsgCreateSkillEndorsementResponse {
  return {};
}

export const MsgCreateSkillEndorsementResponse: MessageFns<MsgCreateSkillEndorsementResponse> = {
  encode(_: MsgCreateSkillEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateSkillEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSkillEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateSkillEndorsementResponse {
    return {};
  },

  toJSON(_: MsgCreateSkillEndorsementResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateSkillEndorsementResponse>, I>>(
    base?: I,
  ): MsgCreateSkillEndorsementResponse {
    return MsgCreateSkillEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateSkillEndorsementResponse>, I>>(
    _: I,
  ): MsgCreateSkillEndorsementResponse {
    const message = createBaseMsgCreateSkillEndorsementResponse();
    return message;
  },
};

function createBaseMsgUpdateSkillEndorsement(): MsgUpdateSkillEndorsement {
  return {
    creator: "",
    index: "",
    endorser: "",
    targetUser: "",
    skillName: "",
    endorsementType: "",
    comment: "",
    createdAt: 0,
    skillTokensStaked: 0,
  };
}

export const MsgUpdateSkillEndorsement: MessageFns<MsgUpdateSkillEndorsement> = {
  encode(message: MsgUpdateSkillEndorsement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.endorser !== "") {
      writer.uint32(26).string(message.endorser);
    }
    if (message.targetUser !== "") {
      writer.uint32(34).string(message.targetUser);
    }
    if (message.skillName !== "") {
      writer.uint32(42).string(message.skillName);
    }
    if (message.endorsementType !== "") {
      writer.uint32(50).string(message.endorsementType);
    }
    if (message.comment !== "") {
      writer.uint32(58).string(message.comment);
    }
    if (message.createdAt !== 0) {
      writer.uint32(64).uint64(message.createdAt);
    }
    if (message.skillTokensStaked !== 0) {
      writer.uint32(72).uint64(message.skillTokensStaked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateSkillEndorsement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateSkillEndorsement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endorser = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetUser = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endorsementType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.skillTokensStaked = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateSkillEndorsement {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      endorser: isSet(object.endorser) ? globalThis.String(object.endorser) : "",
      targetUser: isSet(object.targetUser) ? globalThis.String(object.targetUser) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
      endorsementType: isSet(object.endorsementType) ? globalThis.String(object.endorsementType) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      skillTokensStaked: isSet(object.skillTokensStaked) ? globalThis.Number(object.skillTokensStaked) : 0,
    };
  },

  toJSON(message: MsgUpdateSkillEndorsement): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.endorser !== "") {
      obj.endorser = message.endorser;
    }
    if (message.targetUser !== "") {
      obj.targetUser = message.targetUser;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    if (message.endorsementType !== "") {
      obj.endorsementType = message.endorsementType;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.skillTokensStaked !== 0) {
      obj.skillTokensStaked = Math.round(message.skillTokensStaked);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateSkillEndorsement>, I>>(base?: I): MsgUpdateSkillEndorsement {
    return MsgUpdateSkillEndorsement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateSkillEndorsement>, I>>(object: I): MsgUpdateSkillEndorsement {
    const message = createBaseMsgUpdateSkillEndorsement();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.endorser = object.endorser ?? "";
    message.targetUser = object.targetUser ?? "";
    message.skillName = object.skillName ?? "";
    message.endorsementType = object.endorsementType ?? "";
    message.comment = object.comment ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.skillTokensStaked = object.skillTokensStaked ?? 0;
    return message;
  },
};

function createBaseMsgUpdateSkillEndorsementResponse(): MsgUpdateSkillEndorsementResponse {
  return {};
}

export const MsgUpdateSkillEndorsementResponse: MessageFns<MsgUpdateSkillEndorsementResponse> = {
  encode(_: MsgUpdateSkillEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateSkillEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateSkillEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateSkillEndorsementResponse {
    return {};
  },

  toJSON(_: MsgUpdateSkillEndorsementResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateSkillEndorsementResponse>, I>>(
    base?: I,
  ): MsgUpdateSkillEndorsementResponse {
    return MsgUpdateSkillEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateSkillEndorsementResponse>, I>>(
    _: I,
  ): MsgUpdateSkillEndorsementResponse {
    const message = createBaseMsgUpdateSkillEndorsementResponse();
    return message;
  },
};

function createBaseMsgDeleteSkillEndorsement(): MsgDeleteSkillEndorsement {
  return { creator: "", index: "" };
}

export const MsgDeleteSkillEndorsement: MessageFns<MsgDeleteSkillEndorsement> = {
  encode(message: MsgDeleteSkillEndorsement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteSkillEndorsement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteSkillEndorsement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteSkillEndorsement {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteSkillEndorsement): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteSkillEndorsement>, I>>(base?: I): MsgDeleteSkillEndorsement {
    return MsgDeleteSkillEndorsement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteSkillEndorsement>, I>>(object: I): MsgDeleteSkillEndorsement {
    const message = createBaseMsgDeleteSkillEndorsement();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteSkillEndorsementResponse(): MsgDeleteSkillEndorsementResponse {
  return {};
}

export const MsgDeleteSkillEndorsementResponse: MessageFns<MsgDeleteSkillEndorsementResponse> = {
  encode(_: MsgDeleteSkillEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteSkillEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteSkillEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteSkillEndorsementResponse {
    return {};
  },

  toJSON(_: MsgDeleteSkillEndorsementResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteSkillEndorsementResponse>, I>>(
    base?: I,
  ): MsgDeleteSkillEndorsementResponse {
    return MsgDeleteSkillEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteSkillEndorsementResponse>, I>>(
    _: I,
  ): MsgDeleteSkillEndorsementResponse {
    const message = createBaseMsgDeleteSkillEndorsementResponse();
    return message;
  },
};

function createBaseMsgDisputeEndorsement(): MsgDisputeEndorsement {
  return { creator: "", endorsementId: "", disputeReason: "", evidence: "" };
}

export const MsgDisputeEndorsement: MessageFns<MsgDisputeEndorsement> = {
  encode(message: MsgDisputeEndorsement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.endorsementId !== "") {
      writer.uint32(18).string(message.endorsementId);
    }
    if (message.disputeReason !== "") {
      writer.uint32(26).string(message.disputeReason);
    }
    if (message.evidence !== "") {
      writer.uint32(34).string(message.evidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDisputeEndorsement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDisputeEndorsement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endorsementId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.disputeReason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.evidence = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDisputeEndorsement {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      endorsementId: isSet(object.endorsementId) ? globalThis.String(object.endorsementId) : "",
      disputeReason: isSet(object.disputeReason) ? globalThis.String(object.disputeReason) : "",
      evidence: isSet(object.evidence) ? globalThis.String(object.evidence) : "",
    };
  },

  toJSON(message: MsgDisputeEndorsement): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.endorsementId !== "") {
      obj.endorsementId = message.endorsementId;
    }
    if (message.disputeReason !== "") {
      obj.disputeReason = message.disputeReason;
    }
    if (message.evidence !== "") {
      obj.evidence = message.evidence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDisputeEndorsement>, I>>(base?: I): MsgDisputeEndorsement {
    return MsgDisputeEndorsement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDisputeEndorsement>, I>>(object: I): MsgDisputeEndorsement {
    const message = createBaseMsgDisputeEndorsement();
    message.creator = object.creator ?? "";
    message.endorsementId = object.endorsementId ?? "";
    message.disputeReason = object.disputeReason ?? "";
    message.evidence = object.evidence ?? "";
    return message;
  },
};

function createBaseMsgDisputeEndorsementResponse(): MsgDisputeEndorsementResponse {
  return {};
}

export const MsgDisputeEndorsementResponse: MessageFns<MsgDisputeEndorsementResponse> = {
  encode(_: MsgDisputeEndorsementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDisputeEndorsementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDisputeEndorsementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDisputeEndorsementResponse {
    return {};
  },

  toJSON(_: MsgDisputeEndorsementResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDisputeEndorsementResponse>, I>>(base?: I): MsgDisputeEndorsementResponse {
    return MsgDisputeEndorsementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDisputeEndorsementResponse>, I>>(_: I): MsgDisputeEndorsementResponse {
    const message = createBaseMsgDisputeEndorsementResponse();
    return message;
  },
};

function createBaseMsgWithdrawStakedTokens(): MsgWithdrawStakedTokens {
  return { creator: "", skillName: "" };
}

export const MsgWithdrawStakedTokens: MessageFns<MsgWithdrawStakedTokens> = {
  encode(message: MsgWithdrawStakedTokens, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.skillName !== "") {
      writer.uint32(18).string(message.skillName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawStakedTokens {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawStakedTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skillName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawStakedTokens {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      skillName: isSet(object.skillName) ? globalThis.String(object.skillName) : "",
    };
  },

  toJSON(message: MsgWithdrawStakedTokens): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.skillName !== "") {
      obj.skillName = message.skillName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWithdrawStakedTokens>, I>>(base?: I): MsgWithdrawStakedTokens {
    return MsgWithdrawStakedTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWithdrawStakedTokens>, I>>(object: I): MsgWithdrawStakedTokens {
    const message = createBaseMsgWithdrawStakedTokens();
    message.creator = object.creator ?? "";
    message.skillName = object.skillName ?? "";
    return message;
  },
};

function createBaseMsgWithdrawStakedTokensResponse(): MsgWithdrawStakedTokensResponse {
  return {};
}

export const MsgWithdrawStakedTokensResponse: MessageFns<MsgWithdrawStakedTokensResponse> = {
  encode(_: MsgWithdrawStakedTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawStakedTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawStakedTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgWithdrawStakedTokensResponse {
    return {};
  },

  toJSON(_: MsgWithdrawStakedTokensResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWithdrawStakedTokensResponse>, I>>(base?: I): MsgWithdrawStakedTokensResponse {
    return MsgWithdrawStakedTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWithdrawStakedTokensResponse>, I>>(_: I): MsgWithdrawStakedTokensResponse {
    const message = createBaseMsgWithdrawStakedTokensResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreateProfile(request: MsgCreateProfile): Promise<MsgCreateProfileResponse>;
  CreateUserProfile(request: MsgCreateUserProfile): Promise<MsgCreateUserProfileResponse>;
  UpdateUserProfile(request: MsgUpdateUserProfile): Promise<MsgUpdateUserProfileResponse>;
  DeleteUserProfile(request: MsgDeleteUserProfile): Promise<MsgDeleteUserProfileResponse>;
  CreateUserSkill(request: MsgCreateUserSkill): Promise<MsgCreateUserSkillResponse>;
  UpdateUserSkill(request: MsgUpdateUserSkill): Promise<MsgUpdateUserSkillResponse>;
  DeleteUserSkill(request: MsgDeleteUserSkill): Promise<MsgDeleteUserSkillResponse>;
  EndorseSkill(request: MsgEndorseSkill): Promise<MsgEndorseSkillResponse>;
  CreateSkillEndorsement(request: MsgCreateSkillEndorsement): Promise<MsgCreateSkillEndorsementResponse>;
  UpdateSkillEndorsement(request: MsgUpdateSkillEndorsement): Promise<MsgUpdateSkillEndorsementResponse>;
  DeleteSkillEndorsement(request: MsgDeleteSkillEndorsement): Promise<MsgDeleteSkillEndorsementResponse>;
  DisputeEndorsement(request: MsgDisputeEndorsement): Promise<MsgDisputeEndorsementResponse>;
  WithdrawStakedTokens(request: MsgWithdrawStakedTokens): Promise<MsgWithdrawStakedTokensResponse>;
}

export const MsgServiceName = "skillchain.profile.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateProfile = this.CreateProfile.bind(this);
    this.CreateUserProfile = this.CreateUserProfile.bind(this);
    this.UpdateUserProfile = this.UpdateUserProfile.bind(this);
    this.DeleteUserProfile = this.DeleteUserProfile.bind(this);
    this.CreateUserSkill = this.CreateUserSkill.bind(this);
    this.UpdateUserSkill = this.UpdateUserSkill.bind(this);
    this.DeleteUserSkill = this.DeleteUserSkill.bind(this);
    this.EndorseSkill = this.EndorseSkill.bind(this);
    this.CreateSkillEndorsement = this.CreateSkillEndorsement.bind(this);
    this.UpdateSkillEndorsement = this.UpdateSkillEndorsement.bind(this);
    this.DeleteSkillEndorsement = this.DeleteSkillEndorsement.bind(this);
    this.DisputeEndorsement = this.DisputeEndorsement.bind(this);
    this.WithdrawStakedTokens = this.WithdrawStakedTokens.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateProfile(request: MsgCreateProfile): Promise<MsgCreateProfileResponse> {
    const data = MsgCreateProfile.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProfile", data);
    return promise.then((data) => MsgCreateProfileResponse.decode(new BinaryReader(data)));
  }

  CreateUserProfile(request: MsgCreateUserProfile): Promise<MsgCreateUserProfileResponse> {
    const data = MsgCreateUserProfile.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUserProfile", data);
    return promise.then((data) => MsgCreateUserProfileResponse.decode(new BinaryReader(data)));
  }

  UpdateUserProfile(request: MsgUpdateUserProfile): Promise<MsgUpdateUserProfileResponse> {
    const data = MsgUpdateUserProfile.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserProfile", data);
    return promise.then((data) => MsgUpdateUserProfileResponse.decode(new BinaryReader(data)));
  }

  DeleteUserProfile(request: MsgDeleteUserProfile): Promise<MsgDeleteUserProfileResponse> {
    const data = MsgDeleteUserProfile.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserProfile", data);
    return promise.then((data) => MsgDeleteUserProfileResponse.decode(new BinaryReader(data)));
  }

  CreateUserSkill(request: MsgCreateUserSkill): Promise<MsgCreateUserSkillResponse> {
    const data = MsgCreateUserSkill.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUserSkill", data);
    return promise.then((data) => MsgCreateUserSkillResponse.decode(new BinaryReader(data)));
  }

  UpdateUserSkill(request: MsgUpdateUserSkill): Promise<MsgUpdateUserSkillResponse> {
    const data = MsgUpdateUserSkill.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserSkill", data);
    return promise.then((data) => MsgUpdateUserSkillResponse.decode(new BinaryReader(data)));
  }

  DeleteUserSkill(request: MsgDeleteUserSkill): Promise<MsgDeleteUserSkillResponse> {
    const data = MsgDeleteUserSkill.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserSkill", data);
    return promise.then((data) => MsgDeleteUserSkillResponse.decode(new BinaryReader(data)));
  }

  EndorseSkill(request: MsgEndorseSkill): Promise<MsgEndorseSkillResponse> {
    const data = MsgEndorseSkill.encode(request).finish();
    const promise = this.rpc.request(this.service, "EndorseSkill", data);
    return promise.then((data) => MsgEndorseSkillResponse.decode(new BinaryReader(data)));
  }

  CreateSkillEndorsement(request: MsgCreateSkillEndorsement): Promise<MsgCreateSkillEndorsementResponse> {
    const data = MsgCreateSkillEndorsement.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateSkillEndorsement", data);
    return promise.then((data) => MsgCreateSkillEndorsementResponse.decode(new BinaryReader(data)));
  }

  UpdateSkillEndorsement(request: MsgUpdateSkillEndorsement): Promise<MsgUpdateSkillEndorsementResponse> {
    const data = MsgUpdateSkillEndorsement.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSkillEndorsement", data);
    return promise.then((data) => MsgUpdateSkillEndorsementResponse.decode(new BinaryReader(data)));
  }

  DeleteSkillEndorsement(request: MsgDeleteSkillEndorsement): Promise<MsgDeleteSkillEndorsementResponse> {
    const data = MsgDeleteSkillEndorsement.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteSkillEndorsement", data);
    return promise.then((data) => MsgDeleteSkillEndorsementResponse.decode(new BinaryReader(data)));
  }

  DisputeEndorsement(request: MsgDisputeEndorsement): Promise<MsgDisputeEndorsementResponse> {
    const data = MsgDisputeEndorsement.encode(request).finish();
    const promise = this.rpc.request(this.service, "DisputeEndorsement", data);
    return promise.then((data) => MsgDisputeEndorsementResponse.decode(new BinaryReader(data)));
  }

  WithdrawStakedTokens(request: MsgWithdrawStakedTokens): Promise<MsgWithdrawStakedTokensResponse> {
    const data = MsgWithdrawStakedTokens.encode(request).finish();
    const promise = this.rpc.request(this.service, "WithdrawStakedTokens", data);
    return promise.then((data) => MsgWithdrawStakedTokensResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
