// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { JobPosting } from "./job_posting";
import { Milestone } from "./milestone";
import { Params } from "./params";
import { Project } from "./project";
import { Proposal } from "./proposal";

export const protobufPackage = "skillchain.marketplace";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetJobPostingRequest {
  index: string;
}

export interface QueryGetJobPostingResponse {
  jobPosting: JobPosting | undefined;
}

export interface QueryAllJobPostingRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllJobPostingResponse {
  jobPosting: JobPosting[];
  pagination: PageResponse | undefined;
}

export interface QueryGetProposalRequest {
  index: string;
}

export interface QueryGetProposalResponse {
  proposal: Proposal | undefined;
}

export interface QueryAllProposalRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllProposalResponse {
  proposal: Proposal[];
  pagination: PageResponse | undefined;
}

export interface QueryGetProjectRequest {
  index: string;
}

export interface QueryGetProjectResponse {
  project: Project | undefined;
}

export interface QueryAllProjectRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllProjectResponse {
  project: Project[];
  pagination: PageResponse | undefined;
}

export interface QueryGetMilestoneRequest {
  index: string;
}

export interface QueryGetMilestoneResponse {
  milestone: Milestone | undefined;
}

export interface QueryAllMilestoneRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllMilestoneResponse {
  milestone: Milestone[];
  pagination: PageResponse | undefined;
}

export interface QueryListJobPostingsRequest {
}

export interface QueryListJobPostingsResponse {
}

export interface QueryListProposalsRequest {
}

export interface QueryListProposalsResponse {
}

export interface QueryListProjectsRequest {
}

export interface QueryListProjectsResponse {
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetJobPostingRequest(): QueryGetJobPostingRequest {
  return { index: "" };
}

export const QueryGetJobPostingRequest: MessageFns<QueryGetJobPostingRequest> = {
  encode(message: QueryGetJobPostingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetJobPostingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetJobPostingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetJobPostingRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetJobPostingRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetJobPostingRequest>, I>>(base?: I): QueryGetJobPostingRequest {
    return QueryGetJobPostingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetJobPostingRequest>, I>>(object: I): QueryGetJobPostingRequest {
    const message = createBaseQueryGetJobPostingRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetJobPostingResponse(): QueryGetJobPostingResponse {
  return { jobPosting: undefined };
}

export const QueryGetJobPostingResponse: MessageFns<QueryGetJobPostingResponse> = {
  encode(message: QueryGetJobPostingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobPosting !== undefined) {
      JobPosting.encode(message.jobPosting, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetJobPostingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetJobPostingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobPosting = JobPosting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetJobPostingResponse {
    return { jobPosting: isSet(object.jobPosting) ? JobPosting.fromJSON(object.jobPosting) : undefined };
  },

  toJSON(message: QueryGetJobPostingResponse): unknown {
    const obj: any = {};
    if (message.jobPosting !== undefined) {
      obj.jobPosting = JobPosting.toJSON(message.jobPosting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetJobPostingResponse>, I>>(base?: I): QueryGetJobPostingResponse {
    return QueryGetJobPostingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetJobPostingResponse>, I>>(object: I): QueryGetJobPostingResponse {
    const message = createBaseQueryGetJobPostingResponse();
    message.jobPosting = (object.jobPosting !== undefined && object.jobPosting !== null)
      ? JobPosting.fromPartial(object.jobPosting)
      : undefined;
    return message;
  },
};

function createBaseQueryAllJobPostingRequest(): QueryAllJobPostingRequest {
  return { pagination: undefined };
}

export const QueryAllJobPostingRequest: MessageFns<QueryAllJobPostingRequest> = {
  encode(message: QueryAllJobPostingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllJobPostingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllJobPostingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllJobPostingRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllJobPostingRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllJobPostingRequest>, I>>(base?: I): QueryAllJobPostingRequest {
    return QueryAllJobPostingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllJobPostingRequest>, I>>(object: I): QueryAllJobPostingRequest {
    const message = createBaseQueryAllJobPostingRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllJobPostingResponse(): QueryAllJobPostingResponse {
  return { jobPosting: [], pagination: undefined };
}

export const QueryAllJobPostingResponse: MessageFns<QueryAllJobPostingResponse> = {
  encode(message: QueryAllJobPostingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobPosting) {
      JobPosting.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllJobPostingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllJobPostingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobPosting.push(JobPosting.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllJobPostingResponse {
    return {
      jobPosting: globalThis.Array.isArray(object?.jobPosting)
        ? object.jobPosting.map((e: any) => JobPosting.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllJobPostingResponse): unknown {
    const obj: any = {};
    if (message.jobPosting?.length) {
      obj.jobPosting = message.jobPosting.map((e) => JobPosting.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllJobPostingResponse>, I>>(base?: I): QueryAllJobPostingResponse {
    return QueryAllJobPostingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllJobPostingResponse>, I>>(object: I): QueryAllJobPostingResponse {
    const message = createBaseQueryAllJobPostingResponse();
    message.jobPosting = object.jobPosting?.map((e) => JobPosting.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetProposalRequest(): QueryGetProposalRequest {
  return { index: "" };
}

export const QueryGetProposalRequest: MessageFns<QueryGetProposalRequest> = {
  encode(message: QueryGetProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProposalRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetProposalRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProposalRequest>, I>>(base?: I): QueryGetProposalRequest {
    return QueryGetProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProposalRequest>, I>>(object: I): QueryGetProposalRequest {
    const message = createBaseQueryGetProposalRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetProposalResponse(): QueryGetProposalResponse {
  return { proposal: undefined };
}

export const QueryGetProposalResponse: MessageFns<QueryGetProposalResponse> = {
  encode(message: QueryGetProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proposal !== undefined) {
      Proposal.encode(message.proposal, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposal = Proposal.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProposalResponse {
    return { proposal: isSet(object.proposal) ? Proposal.fromJSON(object.proposal) : undefined };
  },

  toJSON(message: QueryGetProposalResponse): unknown {
    const obj: any = {};
    if (message.proposal !== undefined) {
      obj.proposal = Proposal.toJSON(message.proposal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProposalResponse>, I>>(base?: I): QueryGetProposalResponse {
    return QueryGetProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProposalResponse>, I>>(object: I): QueryGetProposalResponse {
    const message = createBaseQueryGetProposalResponse();
    message.proposal = (object.proposal !== undefined && object.proposal !== null)
      ? Proposal.fromPartial(object.proposal)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProposalRequest(): QueryAllProposalRequest {
  return { pagination: undefined };
}

export const QueryAllProposalRequest: MessageFns<QueryAllProposalRequest> = {
  encode(message: QueryAllProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProposalRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProposalRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProposalRequest>, I>>(base?: I): QueryAllProposalRequest {
    return QueryAllProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProposalRequest>, I>>(object: I): QueryAllProposalRequest {
    const message = createBaseQueryAllProposalRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProposalResponse(): QueryAllProposalResponse {
  return { proposal: [], pagination: undefined };
}

export const QueryAllProposalResponse: MessageFns<QueryAllProposalResponse> = {
  encode(message: QueryAllProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.proposal) {
      Proposal.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposal.push(Proposal.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProposalResponse {
    return {
      proposal: globalThis.Array.isArray(object?.proposal) ? object.proposal.map((e: any) => Proposal.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllProposalResponse): unknown {
    const obj: any = {};
    if (message.proposal?.length) {
      obj.proposal = message.proposal.map((e) => Proposal.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProposalResponse>, I>>(base?: I): QueryAllProposalResponse {
    return QueryAllProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProposalResponse>, I>>(object: I): QueryAllProposalResponse {
    const message = createBaseQueryAllProposalResponse();
    message.proposal = object.proposal?.map((e) => Proposal.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetProjectRequest(): QueryGetProjectRequest {
  return { index: "" };
}

export const QueryGetProjectRequest: MessageFns<QueryGetProjectRequest> = {
  encode(message: QueryGetProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProjectRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetProjectRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProjectRequest>, I>>(base?: I): QueryGetProjectRequest {
    return QueryGetProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProjectRequest>, I>>(object: I): QueryGetProjectRequest {
    const message = createBaseQueryGetProjectRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetProjectResponse(): QueryGetProjectResponse {
  return { project: undefined };
}

export const QueryGetProjectResponse: MessageFns<QueryGetProjectResponse> = {
  encode(message: QueryGetProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProjectResponse {
    return { project: isSet(object.project) ? Project.fromJSON(object.project) : undefined };
  },

  toJSON(message: QueryGetProjectResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProjectResponse>, I>>(base?: I): QueryGetProjectResponse {
    return QueryGetProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProjectResponse>, I>>(object: I): QueryGetProjectResponse {
    const message = createBaseQueryGetProjectResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProjectRequest(): QueryAllProjectRequest {
  return { pagination: undefined };
}

export const QueryAllProjectRequest: MessageFns<QueryAllProjectRequest> = {
  encode(message: QueryAllProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProjectRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProjectRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProjectRequest>, I>>(base?: I): QueryAllProjectRequest {
    return QueryAllProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProjectRequest>, I>>(object: I): QueryAllProjectRequest {
    const message = createBaseQueryAllProjectRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProjectResponse(): QueryAllProjectResponse {
  return { project: [], pagination: undefined };
}

export const QueryAllProjectResponse: MessageFns<QueryAllProjectResponse> = {
  encode(message: QueryAllProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.project) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project.push(Project.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProjectResponse {
    return {
      project: globalThis.Array.isArray(object?.project) ? object.project.map((e: any) => Project.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllProjectResponse): unknown {
    const obj: any = {};
    if (message.project?.length) {
      obj.project = message.project.map((e) => Project.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProjectResponse>, I>>(base?: I): QueryAllProjectResponse {
    return QueryAllProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProjectResponse>, I>>(object: I): QueryAllProjectResponse {
    const message = createBaseQueryAllProjectResponse();
    message.project = object.project?.map((e) => Project.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetMilestoneRequest(): QueryGetMilestoneRequest {
  return { index: "" };
}

export const QueryGetMilestoneRequest: MessageFns<QueryGetMilestoneRequest> = {
  encode(message: QueryGetMilestoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMilestoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMilestoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMilestoneRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetMilestoneRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMilestoneRequest>, I>>(base?: I): QueryGetMilestoneRequest {
    return QueryGetMilestoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMilestoneRequest>, I>>(object: I): QueryGetMilestoneRequest {
    const message = createBaseQueryGetMilestoneRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetMilestoneResponse(): QueryGetMilestoneResponse {
  return { milestone: undefined };
}

export const QueryGetMilestoneResponse: MessageFns<QueryGetMilestoneResponse> = {
  encode(message: QueryGetMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.milestone !== undefined) {
      Milestone.encode(message.milestone, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.milestone = Milestone.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMilestoneResponse {
    return { milestone: isSet(object.milestone) ? Milestone.fromJSON(object.milestone) : undefined };
  },

  toJSON(message: QueryGetMilestoneResponse): unknown {
    const obj: any = {};
    if (message.milestone !== undefined) {
      obj.milestone = Milestone.toJSON(message.milestone);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMilestoneResponse>, I>>(base?: I): QueryGetMilestoneResponse {
    return QueryGetMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMilestoneResponse>, I>>(object: I): QueryGetMilestoneResponse {
    const message = createBaseQueryGetMilestoneResponse();
    message.milestone = (object.milestone !== undefined && object.milestone !== null)
      ? Milestone.fromPartial(object.milestone)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMilestoneRequest(): QueryAllMilestoneRequest {
  return { pagination: undefined };
}

export const QueryAllMilestoneRequest: MessageFns<QueryAllMilestoneRequest> = {
  encode(message: QueryAllMilestoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMilestoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMilestoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMilestoneRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMilestoneRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMilestoneRequest>, I>>(base?: I): QueryAllMilestoneRequest {
    return QueryAllMilestoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMilestoneRequest>, I>>(object: I): QueryAllMilestoneRequest {
    const message = createBaseQueryAllMilestoneRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMilestoneResponse(): QueryAllMilestoneResponse {
  return { milestone: [], pagination: undefined };
}

export const QueryAllMilestoneResponse: MessageFns<QueryAllMilestoneResponse> = {
  encode(message: QueryAllMilestoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.milestone) {
      Milestone.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMilestoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMilestoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.milestone.push(Milestone.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMilestoneResponse {
    return {
      milestone: globalThis.Array.isArray(object?.milestone)
        ? object.milestone.map((e: any) => Milestone.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMilestoneResponse): unknown {
    const obj: any = {};
    if (message.milestone?.length) {
      obj.milestone = message.milestone.map((e) => Milestone.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMilestoneResponse>, I>>(base?: I): QueryAllMilestoneResponse {
    return QueryAllMilestoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMilestoneResponse>, I>>(object: I): QueryAllMilestoneResponse {
    const message = createBaseQueryAllMilestoneResponse();
    message.milestone = object.milestone?.map((e) => Milestone.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryListJobPostingsRequest(): QueryListJobPostingsRequest {
  return {};
}

export const QueryListJobPostingsRequest: MessageFns<QueryListJobPostingsRequest> = {
  encode(_: QueryListJobPostingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListJobPostingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListJobPostingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListJobPostingsRequest {
    return {};
  },

  toJSON(_: QueryListJobPostingsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListJobPostingsRequest>, I>>(base?: I): QueryListJobPostingsRequest {
    return QueryListJobPostingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListJobPostingsRequest>, I>>(_: I): QueryListJobPostingsRequest {
    const message = createBaseQueryListJobPostingsRequest();
    return message;
  },
};

function createBaseQueryListJobPostingsResponse(): QueryListJobPostingsResponse {
  return {};
}

export const QueryListJobPostingsResponse: MessageFns<QueryListJobPostingsResponse> = {
  encode(_: QueryListJobPostingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListJobPostingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListJobPostingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListJobPostingsResponse {
    return {};
  },

  toJSON(_: QueryListJobPostingsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListJobPostingsResponse>, I>>(base?: I): QueryListJobPostingsResponse {
    return QueryListJobPostingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListJobPostingsResponse>, I>>(_: I): QueryListJobPostingsResponse {
    const message = createBaseQueryListJobPostingsResponse();
    return message;
  },
};

function createBaseQueryListProposalsRequest(): QueryListProposalsRequest {
  return {};
}

export const QueryListProposalsRequest: MessageFns<QueryListProposalsRequest> = {
  encode(_: QueryListProposalsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListProposalsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListProposalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListProposalsRequest {
    return {};
  },

  toJSON(_: QueryListProposalsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListProposalsRequest>, I>>(base?: I): QueryListProposalsRequest {
    return QueryListProposalsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListProposalsRequest>, I>>(_: I): QueryListProposalsRequest {
    const message = createBaseQueryListProposalsRequest();
    return message;
  },
};

function createBaseQueryListProposalsResponse(): QueryListProposalsResponse {
  return {};
}

export const QueryListProposalsResponse: MessageFns<QueryListProposalsResponse> = {
  encode(_: QueryListProposalsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListProposalsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListProposalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListProposalsResponse {
    return {};
  },

  toJSON(_: QueryListProposalsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListProposalsResponse>, I>>(base?: I): QueryListProposalsResponse {
    return QueryListProposalsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListProposalsResponse>, I>>(_: I): QueryListProposalsResponse {
    const message = createBaseQueryListProposalsResponse();
    return message;
  },
};

function createBaseQueryListProjectsRequest(): QueryListProjectsRequest {
  return {};
}

export const QueryListProjectsRequest: MessageFns<QueryListProjectsRequest> = {
  encode(_: QueryListProjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListProjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListProjectsRequest {
    return {};
  },

  toJSON(_: QueryListProjectsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListProjectsRequest>, I>>(base?: I): QueryListProjectsRequest {
    return QueryListProjectsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListProjectsRequest>, I>>(_: I): QueryListProjectsRequest {
    const message = createBaseQueryListProjectsRequest();
    return message;
  },
};

function createBaseQueryListProjectsResponse(): QueryListProjectsResponse {
  return {};
}

export const QueryListProjectsResponse: MessageFns<QueryListProjectsResponse> = {
  encode(_: QueryListProjectsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListProjectsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryListProjectsResponse {
    return {};
  },

  toJSON(_: QueryListProjectsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListProjectsResponse>, I>>(base?: I): QueryListProjectsResponse {
    return QueryListProjectsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListProjectsResponse>, I>>(_: I): QueryListProjectsResponse {
    const message = createBaseQueryListProjectsResponse();
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of JobPosting items. */
  JobPosting(request: QueryGetJobPostingRequest): Promise<QueryGetJobPostingResponse>;
  JobPostingAll(request: QueryAllJobPostingRequest): Promise<QueryAllJobPostingResponse>;
  /** Queries a list of Proposal items. */
  Proposal(request: QueryGetProposalRequest): Promise<QueryGetProposalResponse>;
  ProposalAll(request: QueryAllProposalRequest): Promise<QueryAllProposalResponse>;
  /** Queries a list of Project items. */
  Project(request: QueryGetProjectRequest): Promise<QueryGetProjectResponse>;
  ProjectAll(request: QueryAllProjectRequest): Promise<QueryAllProjectResponse>;
  /** Queries a list of Milestone items. */
  Milestone(request: QueryGetMilestoneRequest): Promise<QueryGetMilestoneResponse>;
  MilestoneAll(request: QueryAllMilestoneRequest): Promise<QueryAllMilestoneResponse>;
  /** Queries a list of ListJobPostings items. */
  ListJobPostings(request: QueryListJobPostingsRequest): Promise<QueryListJobPostingsResponse>;
  /** Queries a list of ListProposals items. */
  ListProposals(request: QueryListProposalsRequest): Promise<QueryListProposalsResponse>;
  /** Queries a list of ListProjects items. */
  ListProjects(request: QueryListProjectsRequest): Promise<QueryListProjectsResponse>;
}

export const QueryServiceName = "skillchain.marketplace.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.JobPosting = this.JobPosting.bind(this);
    this.JobPostingAll = this.JobPostingAll.bind(this);
    this.Proposal = this.Proposal.bind(this);
    this.ProposalAll = this.ProposalAll.bind(this);
    this.Project = this.Project.bind(this);
    this.ProjectAll = this.ProjectAll.bind(this);
    this.Milestone = this.Milestone.bind(this);
    this.MilestoneAll = this.MilestoneAll.bind(this);
    this.ListJobPostings = this.ListJobPostings.bind(this);
    this.ListProposals = this.ListProposals.bind(this);
    this.ListProjects = this.ListProjects.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  JobPosting(request: QueryGetJobPostingRequest): Promise<QueryGetJobPostingResponse> {
    const data = QueryGetJobPostingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "JobPosting", data);
    return promise.then((data) => QueryGetJobPostingResponse.decode(new BinaryReader(data)));
  }

  JobPostingAll(request: QueryAllJobPostingRequest): Promise<QueryAllJobPostingResponse> {
    const data = QueryAllJobPostingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "JobPostingAll", data);
    return promise.then((data) => QueryAllJobPostingResponse.decode(new BinaryReader(data)));
  }

  Proposal(request: QueryGetProposalRequest): Promise<QueryGetProposalResponse> {
    const data = QueryGetProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Proposal", data);
    return promise.then((data) => QueryGetProposalResponse.decode(new BinaryReader(data)));
  }

  ProposalAll(request: QueryAllProposalRequest): Promise<QueryAllProposalResponse> {
    const data = QueryAllProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProposalAll", data);
    return promise.then((data) => QueryAllProposalResponse.decode(new BinaryReader(data)));
  }

  Project(request: QueryGetProjectRequest): Promise<QueryGetProjectResponse> {
    const data = QueryGetProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Project", data);
    return promise.then((data) => QueryGetProjectResponse.decode(new BinaryReader(data)));
  }

  ProjectAll(request: QueryAllProjectRequest): Promise<QueryAllProjectResponse> {
    const data = QueryAllProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProjectAll", data);
    return promise.then((data) => QueryAllProjectResponse.decode(new BinaryReader(data)));
  }

  Milestone(request: QueryGetMilestoneRequest): Promise<QueryGetMilestoneResponse> {
    const data = QueryGetMilestoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Milestone", data);
    return promise.then((data) => QueryGetMilestoneResponse.decode(new BinaryReader(data)));
  }

  MilestoneAll(request: QueryAllMilestoneRequest): Promise<QueryAllMilestoneResponse> {
    const data = QueryAllMilestoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MilestoneAll", data);
    return promise.then((data) => QueryAllMilestoneResponse.decode(new BinaryReader(data)));
  }

  ListJobPostings(request: QueryListJobPostingsRequest): Promise<QueryListJobPostingsResponse> {
    const data = QueryListJobPostingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListJobPostings", data);
    return promise.then((data) => QueryListJobPostingsResponse.decode(new BinaryReader(data)));
  }

  ListProposals(request: QueryListProposalsRequest): Promise<QueryListProposalsResponse> {
    const data = QueryListProposalsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListProposals", data);
    return promise.then((data) => QueryListProposalsResponse.decode(new BinaryReader(data)));
  }

  ListProjects(request: QueryListProjectsRequest): Promise<QueryListProjectsResponse> {
    const data = QueryListProjectsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListProjects", data);
    return promise.then((data) => QueryListProjectsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
