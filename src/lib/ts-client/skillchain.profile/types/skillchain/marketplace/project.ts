// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/project.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.marketplace";

export interface Project {
  index: string;
  jobPostingId: string;
  proposalId: string;
  clientAddress: string;
  freelancerAddress: string;
  totalAmount: number;
  paidAmount: number;
  escrowAmount: number;
  status: string;
  startDate: number;
  expectedEndDate: number;
  actualEndDate: number;
  creator: string;
}

function createBaseProject(): Project {
  return {
    index: "",
    jobPostingId: "",
    proposalId: "",
    clientAddress: "",
    freelancerAddress: "",
    totalAmount: 0,
    paidAmount: 0,
    escrowAmount: 0,
    status: "",
    startDate: 0,
    expectedEndDate: 0,
    actualEndDate: 0,
    creator: "",
  };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.jobPostingId !== "") {
      writer.uint32(18).string(message.jobPostingId);
    }
    if (message.proposalId !== "") {
      writer.uint32(26).string(message.proposalId);
    }
    if (message.clientAddress !== "") {
      writer.uint32(34).string(message.clientAddress);
    }
    if (message.freelancerAddress !== "") {
      writer.uint32(42).string(message.freelancerAddress);
    }
    if (message.totalAmount !== 0) {
      writer.uint32(48).uint64(message.totalAmount);
    }
    if (message.paidAmount !== 0) {
      writer.uint32(56).uint64(message.paidAmount);
    }
    if (message.escrowAmount !== 0) {
      writer.uint32(64).uint64(message.escrowAmount);
    }
    if (message.status !== "") {
      writer.uint32(74).string(message.status);
    }
    if (message.startDate !== 0) {
      writer.uint32(80).int64(message.startDate);
    }
    if (message.expectedEndDate !== 0) {
      writer.uint32(88).int64(message.expectedEndDate);
    }
    if (message.actualEndDate !== 0) {
      writer.uint32(96).int64(message.actualEndDate);
    }
    if (message.creator !== "") {
      writer.uint32(106).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jobPostingId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proposalId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.freelancerAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalAmount = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.paidAmount = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.escrowAmount = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.startDate = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.expectedEndDate = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.actualEndDate = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      jobPostingId: isSet(object.jobPostingId) ? globalThis.String(object.jobPostingId) : "",
      proposalId: isSet(object.proposalId) ? globalThis.String(object.proposalId) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      freelancerAddress: isSet(object.freelancerAddress) ? globalThis.String(object.freelancerAddress) : "",
      totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : 0,
      paidAmount: isSet(object.paidAmount) ? globalThis.Number(object.paidAmount) : 0,
      escrowAmount: isSet(object.escrowAmount) ? globalThis.Number(object.escrowAmount) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      startDate: isSet(object.startDate) ? globalThis.Number(object.startDate) : 0,
      expectedEndDate: isSet(object.expectedEndDate) ? globalThis.Number(object.expectedEndDate) : 0,
      actualEndDate: isSet(object.actualEndDate) ? globalThis.Number(object.actualEndDate) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.jobPostingId !== "") {
      obj.jobPostingId = message.jobPostingId;
    }
    if (message.proposalId !== "") {
      obj.proposalId = message.proposalId;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.freelancerAddress !== "") {
      obj.freelancerAddress = message.freelancerAddress;
    }
    if (message.totalAmount !== 0) {
      obj.totalAmount = Math.round(message.totalAmount);
    }
    if (message.paidAmount !== 0) {
      obj.paidAmount = Math.round(message.paidAmount);
    }
    if (message.escrowAmount !== 0) {
      obj.escrowAmount = Math.round(message.escrowAmount);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.startDate !== 0) {
      obj.startDate = Math.round(message.startDate);
    }
    if (message.expectedEndDate !== 0) {
      obj.expectedEndDate = Math.round(message.expectedEndDate);
    }
    if (message.actualEndDate !== 0) {
      obj.actualEndDate = Math.round(message.actualEndDate);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Project>, I>>(base?: I): Project {
    return Project.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Project>, I>>(object: I): Project {
    const message = createBaseProject();
    message.index = object.index ?? "";
    message.jobPostingId = object.jobPostingId ?? "";
    message.proposalId = object.proposalId ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.freelancerAddress = object.freelancerAddress ?? "";
    message.totalAmount = object.totalAmount ?? 0;
    message.paidAmount = object.paidAmount ?? 0;
    message.escrowAmount = object.escrowAmount ?? 0;
    message.status = object.status ?? "";
    message.startDate = object.startDate ?? 0;
    message.expectedEndDate = object.expectedEndDate ?? 0;
    message.actualEndDate = object.actualEndDate ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
