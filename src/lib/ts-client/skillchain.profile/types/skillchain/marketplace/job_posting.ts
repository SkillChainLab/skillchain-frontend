// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/marketplace/job_posting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.marketplace";

export interface JobPosting {
  index: string;
  clientAddress: string;
  title: string;
  description: string;
  skillsRequired: string;
  budgetAmount: number;
  paymentCurrency: string;
  deadline: number;
  isActive: boolean;
  createdAt: number;
  creator: string;
}

function createBaseJobPosting(): JobPosting {
  return {
    index: "",
    clientAddress: "",
    title: "",
    description: "",
    skillsRequired: "",
    budgetAmount: 0,
    paymentCurrency: "",
    deadline: 0,
    isActive: false,
    createdAt: 0,
    creator: "",
  };
}

export const JobPosting: MessageFns<JobPosting> = {
  encode(message: JobPosting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.clientAddress !== "") {
      writer.uint32(18).string(message.clientAddress);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.skillsRequired !== "") {
      writer.uint32(42).string(message.skillsRequired);
    }
    if (message.budgetAmount !== 0) {
      writer.uint32(48).uint64(message.budgetAmount);
    }
    if (message.paymentCurrency !== "") {
      writer.uint32(58).string(message.paymentCurrency);
    }
    if (message.deadline !== 0) {
      writer.uint32(64).int64(message.deadline);
    }
    if (message.isActive !== false) {
      writer.uint32(72).bool(message.isActive);
    }
    if (message.createdAt !== 0) {
      writer.uint32(80).int64(message.createdAt);
    }
    if (message.creator !== "") {
      writer.uint32(90).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobPosting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobPosting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.skillsRequired = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.budgetAmount = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.paymentCurrency = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.deadline = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobPosting {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      clientAddress: isSet(object.clientAddress) ? globalThis.String(object.clientAddress) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      skillsRequired: isSet(object.skillsRequired) ? globalThis.String(object.skillsRequired) : "",
      budgetAmount: isSet(object.budgetAmount) ? globalThis.Number(object.budgetAmount) : 0,
      paymentCurrency: isSet(object.paymentCurrency) ? globalThis.String(object.paymentCurrency) : "",
      deadline: isSet(object.deadline) ? globalThis.Number(object.deadline) : 0,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: JobPosting): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.clientAddress !== "") {
      obj.clientAddress = message.clientAddress;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.skillsRequired !== "") {
      obj.skillsRequired = message.skillsRequired;
    }
    if (message.budgetAmount !== 0) {
      obj.budgetAmount = Math.round(message.budgetAmount);
    }
    if (message.paymentCurrency !== "") {
      obj.paymentCurrency = message.paymentCurrency;
    }
    if (message.deadline !== 0) {
      obj.deadline = Math.round(message.deadline);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobPosting>, I>>(base?: I): JobPosting {
    return JobPosting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobPosting>, I>>(object: I): JobPosting {
    const message = createBaseJobPosting();
    message.index = object.index ?? "";
    message.clientAddress = object.clientAddress ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.skillsRequired = object.skillsRequired ?? "";
    message.budgetAmount = object.budgetAmount ?? 0;
    message.paymentCurrency = object.paymentCurrency ?? "";
    message.deadline = object.deadline ?? 0;
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
