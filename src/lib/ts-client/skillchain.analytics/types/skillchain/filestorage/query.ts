// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/filestorage/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { FilePermission } from "./file_permission";
import { FileRecord } from "./file_record";
import { Params } from "./params";

export const protobufPackage = "skillchain.filestorage";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetFileRecordRequest {
  index: string;
}

export interface QueryGetFileRecordResponse {
  fileRecord: FileRecord | undefined;
}

export interface QueryAllFileRecordRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllFileRecordResponse {
  fileRecord: FileRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetFilePermissionRequest {
  index: string;
}

export interface QueryGetFilePermissionResponse {
  filePermission: FilePermission | undefined;
}

export interface QueryAllFilePermissionRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllFilePermissionResponse {
  filePermission: FilePermission[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetFileRecordRequest(): QueryGetFileRecordRequest {
  return { index: "" };
}

export const QueryGetFileRecordRequest: MessageFns<QueryGetFileRecordRequest> = {
  encode(message: QueryGetFileRecordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFileRecordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFileRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFileRecordRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetFileRecordRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFileRecordRequest>, I>>(base?: I): QueryGetFileRecordRequest {
    return QueryGetFileRecordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFileRecordRequest>, I>>(object: I): QueryGetFileRecordRequest {
    const message = createBaseQueryGetFileRecordRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetFileRecordResponse(): QueryGetFileRecordResponse {
  return { fileRecord: undefined };
}

export const QueryGetFileRecordResponse: MessageFns<QueryGetFileRecordResponse> = {
  encode(message: QueryGetFileRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileRecord !== undefined) {
      FileRecord.encode(message.fileRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFileRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFileRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileRecord = FileRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFileRecordResponse {
    return { fileRecord: isSet(object.fileRecord) ? FileRecord.fromJSON(object.fileRecord) : undefined };
  },

  toJSON(message: QueryGetFileRecordResponse): unknown {
    const obj: any = {};
    if (message.fileRecord !== undefined) {
      obj.fileRecord = FileRecord.toJSON(message.fileRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFileRecordResponse>, I>>(base?: I): QueryGetFileRecordResponse {
    return QueryGetFileRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFileRecordResponse>, I>>(object: I): QueryGetFileRecordResponse {
    const message = createBaseQueryGetFileRecordResponse();
    message.fileRecord = (object.fileRecord !== undefined && object.fileRecord !== null)
      ? FileRecord.fromPartial(object.fileRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllFileRecordRequest(): QueryAllFileRecordRequest {
  return { pagination: undefined };
}

export const QueryAllFileRecordRequest: MessageFns<QueryAllFileRecordRequest> = {
  encode(message: QueryAllFileRecordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFileRecordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFileRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFileRecordRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllFileRecordRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFileRecordRequest>, I>>(base?: I): QueryAllFileRecordRequest {
    return QueryAllFileRecordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFileRecordRequest>, I>>(object: I): QueryAllFileRecordRequest {
    const message = createBaseQueryAllFileRecordRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllFileRecordResponse(): QueryAllFileRecordResponse {
  return { fileRecord: [], pagination: undefined };
}

export const QueryAllFileRecordResponse: MessageFns<QueryAllFileRecordResponse> = {
  encode(message: QueryAllFileRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fileRecord) {
      FileRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFileRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFileRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileRecord.push(FileRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFileRecordResponse {
    return {
      fileRecord: globalThis.Array.isArray(object?.fileRecord)
        ? object.fileRecord.map((e: any) => FileRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllFileRecordResponse): unknown {
    const obj: any = {};
    if (message.fileRecord?.length) {
      obj.fileRecord = message.fileRecord.map((e) => FileRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFileRecordResponse>, I>>(base?: I): QueryAllFileRecordResponse {
    return QueryAllFileRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFileRecordResponse>, I>>(object: I): QueryAllFileRecordResponse {
    const message = createBaseQueryAllFileRecordResponse();
    message.fileRecord = object.fileRecord?.map((e) => FileRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetFilePermissionRequest(): QueryGetFilePermissionRequest {
  return { index: "" };
}

export const QueryGetFilePermissionRequest: MessageFns<QueryGetFilePermissionRequest> = {
  encode(message: QueryGetFilePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFilePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFilePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFilePermissionRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetFilePermissionRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFilePermissionRequest>, I>>(base?: I): QueryGetFilePermissionRequest {
    return QueryGetFilePermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFilePermissionRequest>, I>>(
    object: I,
  ): QueryGetFilePermissionRequest {
    const message = createBaseQueryGetFilePermissionRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetFilePermissionResponse(): QueryGetFilePermissionResponse {
  return { filePermission: undefined };
}

export const QueryGetFilePermissionResponse: MessageFns<QueryGetFilePermissionResponse> = {
  encode(message: QueryGetFilePermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePermission !== undefined) {
      FilePermission.encode(message.filePermission, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFilePermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFilePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePermission = FilePermission.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFilePermissionResponse {
    return {
      filePermission: isSet(object.filePermission) ? FilePermission.fromJSON(object.filePermission) : undefined,
    };
  },

  toJSON(message: QueryGetFilePermissionResponse): unknown {
    const obj: any = {};
    if (message.filePermission !== undefined) {
      obj.filePermission = FilePermission.toJSON(message.filePermission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFilePermissionResponse>, I>>(base?: I): QueryGetFilePermissionResponse {
    return QueryGetFilePermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFilePermissionResponse>, I>>(
    object: I,
  ): QueryGetFilePermissionResponse {
    const message = createBaseQueryGetFilePermissionResponse();
    message.filePermission = (object.filePermission !== undefined && object.filePermission !== null)
      ? FilePermission.fromPartial(object.filePermission)
      : undefined;
    return message;
  },
};

function createBaseQueryAllFilePermissionRequest(): QueryAllFilePermissionRequest {
  return { pagination: undefined };
}

export const QueryAllFilePermissionRequest: MessageFns<QueryAllFilePermissionRequest> = {
  encode(message: QueryAllFilePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFilePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFilePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFilePermissionRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllFilePermissionRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFilePermissionRequest>, I>>(base?: I): QueryAllFilePermissionRequest {
    return QueryAllFilePermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFilePermissionRequest>, I>>(
    object: I,
  ): QueryAllFilePermissionRequest {
    const message = createBaseQueryAllFilePermissionRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllFilePermissionResponse(): QueryAllFilePermissionResponse {
  return { filePermission: [], pagination: undefined };
}

export const QueryAllFilePermissionResponse: MessageFns<QueryAllFilePermissionResponse> = {
  encode(message: QueryAllFilePermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filePermission) {
      FilePermission.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFilePermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFilePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePermission.push(FilePermission.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFilePermissionResponse {
    return {
      filePermission: globalThis.Array.isArray(object?.filePermission)
        ? object.filePermission.map((e: any) => FilePermission.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllFilePermissionResponse): unknown {
    const obj: any = {};
    if (message.filePermission?.length) {
      obj.filePermission = message.filePermission.map((e) => FilePermission.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFilePermissionResponse>, I>>(base?: I): QueryAllFilePermissionResponse {
    return QueryAllFilePermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFilePermissionResponse>, I>>(
    object: I,
  ): QueryAllFilePermissionResponse {
    const message = createBaseQueryAllFilePermissionResponse();
    message.filePermission = object.filePermission?.map((e) => FilePermission.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of FileRecord items. */
  FileRecord(request: QueryGetFileRecordRequest): Promise<QueryGetFileRecordResponse>;
  FileRecordAll(request: QueryAllFileRecordRequest): Promise<QueryAllFileRecordResponse>;
  /** Queries a list of FilePermission items. */
  FilePermission(request: QueryGetFilePermissionRequest): Promise<QueryGetFilePermissionResponse>;
  FilePermissionAll(request: QueryAllFilePermissionRequest): Promise<QueryAllFilePermissionResponse>;
}

export const QueryServiceName = "skillchain.filestorage.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.FileRecord = this.FileRecord.bind(this);
    this.FileRecordAll = this.FileRecordAll.bind(this);
    this.FilePermission = this.FilePermission.bind(this);
    this.FilePermissionAll = this.FilePermissionAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  FileRecord(request: QueryGetFileRecordRequest): Promise<QueryGetFileRecordResponse> {
    const data = QueryGetFileRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FileRecord", data);
    return promise.then((data) => QueryGetFileRecordResponse.decode(new BinaryReader(data)));
  }

  FileRecordAll(request: QueryAllFileRecordRequest): Promise<QueryAllFileRecordResponse> {
    const data = QueryAllFileRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FileRecordAll", data);
    return promise.then((data) => QueryAllFileRecordResponse.decode(new BinaryReader(data)));
  }

  FilePermission(request: QueryGetFilePermissionRequest): Promise<QueryGetFilePermissionResponse> {
    const data = QueryGetFilePermissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FilePermission", data);
    return promise.then((data) => QueryGetFilePermissionResponse.decode(new BinaryReader(data)));
  }

  FilePermissionAll(request: QueryAllFilePermissionRequest): Promise<QueryAllFilePermissionResponse> {
    const data = QueryAllFilePermissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FilePermissionAll", data);
    return promise.then((data) => QueryAllFilePermissionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
