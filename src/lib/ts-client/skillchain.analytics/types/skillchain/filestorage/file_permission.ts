// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/filestorage/file_permission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.filestorage";

export interface FilePermission {
  index: string;
  fileId: string;
  userAddress: string;
  permissionLevel: string;
  grantedBy: string;
  grantedAt: number;
  expiresAt: number;
  creator: string;
}

function createBaseFilePermission(): FilePermission {
  return {
    index: "",
    fileId: "",
    userAddress: "",
    permissionLevel: "",
    grantedBy: "",
    grantedAt: 0,
    expiresAt: 0,
    creator: "",
  };
}

export const FilePermission: MessageFns<FilePermission> = {
  encode(message: FilePermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.fileId !== "") {
      writer.uint32(18).string(message.fileId);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.permissionLevel !== "") {
      writer.uint32(34).string(message.permissionLevel);
    }
    if (message.grantedBy !== "") {
      writer.uint32(42).string(message.grantedBy);
    }
    if (message.grantedAt !== 0) {
      writer.uint32(48).uint64(message.grantedAt);
    }
    if (message.expiresAt !== 0) {
      writer.uint32(56).uint64(message.expiresAt);
    }
    if (message.creator !== "") {
      writer.uint32(66).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilePermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilePermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permissionLevel = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.grantedBy = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.grantedAt = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expiresAt = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilePermission {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      fileId: isSet(object.fileId) ? globalThis.String(object.fileId) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      permissionLevel: isSet(object.permissionLevel) ? globalThis.String(object.permissionLevel) : "",
      grantedBy: isSet(object.grantedBy) ? globalThis.String(object.grantedBy) : "",
      grantedAt: isSet(object.grantedAt) ? globalThis.Number(object.grantedAt) : 0,
      expiresAt: isSet(object.expiresAt) ? globalThis.Number(object.expiresAt) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: FilePermission): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.fileId !== "") {
      obj.fileId = message.fileId;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.permissionLevel !== "") {
      obj.permissionLevel = message.permissionLevel;
    }
    if (message.grantedBy !== "") {
      obj.grantedBy = message.grantedBy;
    }
    if (message.grantedAt !== 0) {
      obj.grantedAt = Math.round(message.grantedAt);
    }
    if (message.expiresAt !== 0) {
      obj.expiresAt = Math.round(message.expiresAt);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilePermission>, I>>(base?: I): FilePermission {
    return FilePermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilePermission>, I>>(object: I): FilePermission {
    const message = createBaseFilePermission();
    message.index = object.index ?? "";
    message.fileId = object.fileId ?? "";
    message.userAddress = object.userAddress ?? "";
    message.permissionLevel = object.permissionLevel ?? "";
    message.grantedBy = object.grantedBy ?? "";
    message.grantedAt = object.grantedAt ?? 0;
    message.expiresAt = object.expiresAt ?? 0;
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
