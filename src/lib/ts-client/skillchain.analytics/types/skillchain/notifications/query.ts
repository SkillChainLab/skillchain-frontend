// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/notifications/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Notification } from "./notification";
import { NotificationSettings } from "./notification_settings";
import { Params } from "./params";

export const protobufPackage = "skillchain.notifications";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetNotificationRequest {
  index: string;
}

export interface QueryGetNotificationResponse {
  notification: Notification | undefined;
}

export interface QueryAllNotificationRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllNotificationResponse {
  notification: Notification[];
  pagination: PageResponse | undefined;
}

export interface QueryGetNotificationSettingsRequest {
  index: string;
}

export interface QueryGetNotificationSettingsResponse {
  notificationSettings: NotificationSettings | undefined;
}

export interface QueryAllNotificationSettingsRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllNotificationSettingsResponse {
  notificationSettings: NotificationSettings[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetNotificationRequest(): QueryGetNotificationRequest {
  return { index: "" };
}

export const QueryGetNotificationRequest: MessageFns<QueryGetNotificationRequest> = {
  encode(message: QueryGetNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNotificationRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetNotificationRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetNotificationRequest>, I>>(base?: I): QueryGetNotificationRequest {
    return QueryGetNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetNotificationRequest>, I>>(object: I): QueryGetNotificationRequest {
    const message = createBaseQueryGetNotificationRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetNotificationResponse(): QueryGetNotificationResponse {
  return { notification: undefined };
}

export const QueryGetNotificationResponse: MessageFns<QueryGetNotificationResponse> = {
  encode(message: QueryGetNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notification !== undefined) {
      Notification.encode(message.notification, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notification = Notification.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNotificationResponse {
    return { notification: isSet(object.notification) ? Notification.fromJSON(object.notification) : undefined };
  },

  toJSON(message: QueryGetNotificationResponse): unknown {
    const obj: any = {};
    if (message.notification !== undefined) {
      obj.notification = Notification.toJSON(message.notification);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetNotificationResponse>, I>>(base?: I): QueryGetNotificationResponse {
    return QueryGetNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetNotificationResponse>, I>>(object: I): QueryGetNotificationResponse {
    const message = createBaseQueryGetNotificationResponse();
    message.notification = (object.notification !== undefined && object.notification !== null)
      ? Notification.fromPartial(object.notification)
      : undefined;
    return message;
  },
};

function createBaseQueryAllNotificationRequest(): QueryAllNotificationRequest {
  return { pagination: undefined };
}

export const QueryAllNotificationRequest: MessageFns<QueryAllNotificationRequest> = {
  encode(message: QueryAllNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllNotificationRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllNotificationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllNotificationRequest>, I>>(base?: I): QueryAllNotificationRequest {
    return QueryAllNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllNotificationRequest>, I>>(object: I): QueryAllNotificationRequest {
    const message = createBaseQueryAllNotificationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllNotificationResponse(): QueryAllNotificationResponse {
  return { notification: [], pagination: undefined };
}

export const QueryAllNotificationResponse: MessageFns<QueryAllNotificationResponse> = {
  encode(message: QueryAllNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notification) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notification.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllNotificationResponse {
    return {
      notification: globalThis.Array.isArray(object?.notification)
        ? object.notification.map((e: any) => Notification.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllNotificationResponse): unknown {
    const obj: any = {};
    if (message.notification?.length) {
      obj.notification = message.notification.map((e) => Notification.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllNotificationResponse>, I>>(base?: I): QueryAllNotificationResponse {
    return QueryAllNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllNotificationResponse>, I>>(object: I): QueryAllNotificationResponse {
    const message = createBaseQueryAllNotificationResponse();
    message.notification = object.notification?.map((e) => Notification.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetNotificationSettingsRequest(): QueryGetNotificationSettingsRequest {
  return { index: "" };
}

export const QueryGetNotificationSettingsRequest: MessageFns<QueryGetNotificationSettingsRequest> = {
  encode(message: QueryGetNotificationSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetNotificationSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNotificationSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNotificationSettingsRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetNotificationSettingsRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetNotificationSettingsRequest>, I>>(
    base?: I,
  ): QueryGetNotificationSettingsRequest {
    return QueryGetNotificationSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetNotificationSettingsRequest>, I>>(
    object: I,
  ): QueryGetNotificationSettingsRequest {
    const message = createBaseQueryGetNotificationSettingsRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetNotificationSettingsResponse(): QueryGetNotificationSettingsResponse {
  return { notificationSettings: undefined };
}

export const QueryGetNotificationSettingsResponse: MessageFns<QueryGetNotificationSettingsResponse> = {
  encode(message: QueryGetNotificationSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationSettings !== undefined) {
      NotificationSettings.encode(message.notificationSettings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetNotificationSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNotificationSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationSettings = NotificationSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNotificationSettingsResponse {
    return {
      notificationSettings: isSet(object.notificationSettings)
        ? NotificationSettings.fromJSON(object.notificationSettings)
        : undefined,
    };
  },

  toJSON(message: QueryGetNotificationSettingsResponse): unknown {
    const obj: any = {};
    if (message.notificationSettings !== undefined) {
      obj.notificationSettings = NotificationSettings.toJSON(message.notificationSettings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetNotificationSettingsResponse>, I>>(
    base?: I,
  ): QueryGetNotificationSettingsResponse {
    return QueryGetNotificationSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetNotificationSettingsResponse>, I>>(
    object: I,
  ): QueryGetNotificationSettingsResponse {
    const message = createBaseQueryGetNotificationSettingsResponse();
    message.notificationSettings = (object.notificationSettings !== undefined && object.notificationSettings !== null)
      ? NotificationSettings.fromPartial(object.notificationSettings)
      : undefined;
    return message;
  },
};

function createBaseQueryAllNotificationSettingsRequest(): QueryAllNotificationSettingsRequest {
  return { pagination: undefined };
}

export const QueryAllNotificationSettingsRequest: MessageFns<QueryAllNotificationSettingsRequest> = {
  encode(message: QueryAllNotificationSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllNotificationSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllNotificationSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllNotificationSettingsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllNotificationSettingsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllNotificationSettingsRequest>, I>>(
    base?: I,
  ): QueryAllNotificationSettingsRequest {
    return QueryAllNotificationSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllNotificationSettingsRequest>, I>>(
    object: I,
  ): QueryAllNotificationSettingsRequest {
    const message = createBaseQueryAllNotificationSettingsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllNotificationSettingsResponse(): QueryAllNotificationSettingsResponse {
  return { notificationSettings: [], pagination: undefined };
}

export const QueryAllNotificationSettingsResponse: MessageFns<QueryAllNotificationSettingsResponse> = {
  encode(message: QueryAllNotificationSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notificationSettings) {
      NotificationSettings.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllNotificationSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllNotificationSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationSettings.push(NotificationSettings.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllNotificationSettingsResponse {
    return {
      notificationSettings: globalThis.Array.isArray(object?.notificationSettings)
        ? object.notificationSettings.map((e: any) => NotificationSettings.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllNotificationSettingsResponse): unknown {
    const obj: any = {};
    if (message.notificationSettings?.length) {
      obj.notificationSettings = message.notificationSettings.map((e) => NotificationSettings.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllNotificationSettingsResponse>, I>>(
    base?: I,
  ): QueryAllNotificationSettingsResponse {
    return QueryAllNotificationSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllNotificationSettingsResponse>, I>>(
    object: I,
  ): QueryAllNotificationSettingsResponse {
    const message = createBaseQueryAllNotificationSettingsResponse();
    message.notificationSettings = object.notificationSettings?.map((e) => NotificationSettings.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Notification items. */
  Notification(request: QueryGetNotificationRequest): Promise<QueryGetNotificationResponse>;
  NotificationAll(request: QueryAllNotificationRequest): Promise<QueryAllNotificationResponse>;
  /** Queries a list of NotificationSettings items. */
  NotificationSettings(request: QueryGetNotificationSettingsRequest): Promise<QueryGetNotificationSettingsResponse>;
  NotificationSettingsAll(request: QueryAllNotificationSettingsRequest): Promise<QueryAllNotificationSettingsResponse>;
}

export const QueryServiceName = "skillchain.notifications.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Notification = this.Notification.bind(this);
    this.NotificationAll = this.NotificationAll.bind(this);
    this.NotificationSettings = this.NotificationSettings.bind(this);
    this.NotificationSettingsAll = this.NotificationSettingsAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Notification(request: QueryGetNotificationRequest): Promise<QueryGetNotificationResponse> {
    const data = QueryGetNotificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Notification", data);
    return promise.then((data) => QueryGetNotificationResponse.decode(new BinaryReader(data)));
  }

  NotificationAll(request: QueryAllNotificationRequest): Promise<QueryAllNotificationResponse> {
    const data = QueryAllNotificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "NotificationAll", data);
    return promise.then((data) => QueryAllNotificationResponse.decode(new BinaryReader(data)));
  }

  NotificationSettings(request: QueryGetNotificationSettingsRequest): Promise<QueryGetNotificationSettingsResponse> {
    const data = QueryGetNotificationSettingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "NotificationSettings", data);
    return promise.then((data) => QueryGetNotificationSettingsResponse.decode(new BinaryReader(data)));
  }

  NotificationSettingsAll(request: QueryAllNotificationSettingsRequest): Promise<QueryAllNotificationSettingsResponse> {
    const data = QueryAllNotificationSettingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "NotificationSettingsAll", data);
    return promise.then((data) => QueryAllNotificationSettingsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
