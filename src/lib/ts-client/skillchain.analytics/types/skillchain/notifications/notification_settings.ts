// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/notifications/notification_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "skillchain.notifications";

export interface NotificationSettings {
  index: string;
  userAddress: string;
  emailEnabled: boolean;
  pushEnabled: boolean;
  smsEnabled: boolean;
  emailAddress: string;
  phoneNumber: string;
  notificationTypes: string[];
  frequency: string;
  creator: string;
}

function createBaseNotificationSettings(): NotificationSettings {
  return {
    index: "",
    userAddress: "",
    emailEnabled: false,
    pushEnabled: false,
    smsEnabled: false,
    emailAddress: "",
    phoneNumber: "",
    notificationTypes: [],
    frequency: "",
    creator: "",
  };
}

export const NotificationSettings: MessageFns<NotificationSettings> = {
  encode(message: NotificationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.emailEnabled !== false) {
      writer.uint32(24).bool(message.emailEnabled);
    }
    if (message.pushEnabled !== false) {
      writer.uint32(32).bool(message.pushEnabled);
    }
    if (message.smsEnabled !== false) {
      writer.uint32(40).bool(message.smsEnabled);
    }
    if (message.emailAddress !== "") {
      writer.uint32(50).string(message.emailAddress);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(58).string(message.phoneNumber);
    }
    for (const v of message.notificationTypes) {
      writer.uint32(66).string(v!);
    }
    if (message.frequency !== "") {
      writer.uint32(74).string(message.frequency);
    }
    if (message.creator !== "") {
      writer.uint32(82).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.emailEnabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pushEnabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.smsEnabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.notificationTypes.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.frequency = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationSettings {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      emailEnabled: isSet(object.emailEnabled) ? globalThis.Boolean(object.emailEnabled) : false,
      pushEnabled: isSet(object.pushEnabled) ? globalThis.Boolean(object.pushEnabled) : false,
      smsEnabled: isSet(object.smsEnabled) ? globalThis.Boolean(object.smsEnabled) : false,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      notificationTypes: globalThis.Array.isArray(object?.notificationTypes)
        ? object.notificationTypes.map((e: any) => globalThis.String(e))
        : [],
      frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: NotificationSettings): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.emailEnabled !== false) {
      obj.emailEnabled = message.emailEnabled;
    }
    if (message.pushEnabled !== false) {
      obj.pushEnabled = message.pushEnabled;
    }
    if (message.smsEnabled !== false) {
      obj.smsEnabled = message.smsEnabled;
    }
    if (message.emailAddress !== "") {
      obj.emailAddress = message.emailAddress;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.notificationTypes?.length) {
      obj.notificationTypes = message.notificationTypes;
    }
    if (message.frequency !== "") {
      obj.frequency = message.frequency;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationSettings>, I>>(base?: I): NotificationSettings {
    return NotificationSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationSettings>, I>>(object: I): NotificationSettings {
    const message = createBaseNotificationSettings();
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.emailEnabled = object.emailEnabled ?? false;
    message.pushEnabled = object.pushEnabled ?? false;
    message.smsEnabled = object.smsEnabled ?? false;
    message.emailAddress = object.emailAddress ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.notificationTypes = object.notificationTypes?.map((e) => e) || [];
    message.frequency = object.frequency ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
