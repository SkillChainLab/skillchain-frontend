// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: skillchain/notifications/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "skillchain.notifications";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateNotification {
  creator: string;
  index: string;
  userAddress: string;
  notificationType: string;
  title: string;
  message: string;
  data: string;
  isRead: boolean;
  createdAt: number;
  priority: string;
  sourceModule: string;
  sourceAction: string;
}

export interface MsgCreateNotificationResponse {
}

export interface MsgUpdateNotification {
  creator: string;
  index: string;
  userAddress: string;
  notificationType: string;
  title: string;
  message: string;
  data: string;
  isRead: boolean;
  createdAt: number;
  priority: string;
  sourceModule: string;
  sourceAction: string;
}

export interface MsgUpdateNotificationResponse {
}

export interface MsgDeleteNotification {
  creator: string;
  index: string;
}

export interface MsgDeleteNotificationResponse {
}

export interface MsgCreateNotificationSettings {
  creator: string;
  index: string;
  userAddress: string;
  emailEnabled: boolean;
  pushEnabled: boolean;
  smsEnabled: boolean;
  emailAddress: string;
  phoneNumber: string;
  notificationTypes: string[];
  frequency: string;
}

export interface MsgCreateNotificationSettingsResponse {
}

export interface MsgUpdateNotificationSettings {
  creator: string;
  index: string;
  userAddress: string;
  emailEnabled: boolean;
  pushEnabled: boolean;
  smsEnabled: boolean;
  emailAddress: string;
  phoneNumber: string;
  notificationTypes: string[];
  frequency: string;
}

export interface MsgUpdateNotificationSettingsResponse {
}

export interface MsgDeleteNotificationSettings {
  creator: string;
  index: string;
}

export interface MsgDeleteNotificationSettingsResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateNotification(): MsgCreateNotification {
  return {
    creator: "",
    index: "",
    userAddress: "",
    notificationType: "",
    title: "",
    message: "",
    data: "",
    isRead: false,
    createdAt: 0,
    priority: "",
    sourceModule: "",
    sourceAction: "",
  };
}

export const MsgCreateNotification: MessageFns<MsgCreateNotification> = {
  encode(message: MsgCreateNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.notificationType !== "") {
      writer.uint32(34).string(message.notificationType);
    }
    if (message.title !== "") {
      writer.uint32(42).string(message.title);
    }
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    if (message.data !== "") {
      writer.uint32(58).string(message.data);
    }
    if (message.isRead !== false) {
      writer.uint32(64).bool(message.isRead);
    }
    if (message.createdAt !== 0) {
      writer.uint32(72).uint64(message.createdAt);
    }
    if (message.priority !== "") {
      writer.uint32(82).string(message.priority);
    }
    if (message.sourceModule !== "") {
      writer.uint32(90).string(message.sourceModule);
    }
    if (message.sourceAction !== "") {
      writer.uint32(98).string(message.sourceAction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.notificationType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.priority = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sourceModule = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.sourceAction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNotification {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      notificationType: isSet(object.notificationType) ? globalThis.String(object.notificationType) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
      sourceModule: isSet(object.sourceModule) ? globalThis.String(object.sourceModule) : "",
      sourceAction: isSet(object.sourceAction) ? globalThis.String(object.sourceAction) : "",
    };
  },

  toJSON(message: MsgCreateNotification): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.notificationType !== "") {
      obj.notificationType = message.notificationType;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.priority !== "") {
      obj.priority = message.priority;
    }
    if (message.sourceModule !== "") {
      obj.sourceModule = message.sourceModule;
    }
    if (message.sourceAction !== "") {
      obj.sourceAction = message.sourceAction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNotification>, I>>(base?: I): MsgCreateNotification {
    return MsgCreateNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNotification>, I>>(object: I): MsgCreateNotification {
    const message = createBaseMsgCreateNotification();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.notificationType = object.notificationType ?? "";
    message.title = object.title ?? "";
    message.message = object.message ?? "";
    message.data = object.data ?? "";
    message.isRead = object.isRead ?? false;
    message.createdAt = object.createdAt ?? 0;
    message.priority = object.priority ?? "";
    message.sourceModule = object.sourceModule ?? "";
    message.sourceAction = object.sourceAction ?? "";
    return message;
  },
};

function createBaseMsgCreateNotificationResponse(): MsgCreateNotificationResponse {
  return {};
}

export const MsgCreateNotificationResponse: MessageFns<MsgCreateNotificationResponse> = {
  encode(_: MsgCreateNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateNotificationResponse {
    return {};
  },

  toJSON(_: MsgCreateNotificationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNotificationResponse>, I>>(base?: I): MsgCreateNotificationResponse {
    return MsgCreateNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNotificationResponse>, I>>(_: I): MsgCreateNotificationResponse {
    const message = createBaseMsgCreateNotificationResponse();
    return message;
  },
};

function createBaseMsgUpdateNotification(): MsgUpdateNotification {
  return {
    creator: "",
    index: "",
    userAddress: "",
    notificationType: "",
    title: "",
    message: "",
    data: "",
    isRead: false,
    createdAt: 0,
    priority: "",
    sourceModule: "",
    sourceAction: "",
  };
}

export const MsgUpdateNotification: MessageFns<MsgUpdateNotification> = {
  encode(message: MsgUpdateNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.notificationType !== "") {
      writer.uint32(34).string(message.notificationType);
    }
    if (message.title !== "") {
      writer.uint32(42).string(message.title);
    }
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    if (message.data !== "") {
      writer.uint32(58).string(message.data);
    }
    if (message.isRead !== false) {
      writer.uint32(64).bool(message.isRead);
    }
    if (message.createdAt !== 0) {
      writer.uint32(72).uint64(message.createdAt);
    }
    if (message.priority !== "") {
      writer.uint32(82).string(message.priority);
    }
    if (message.sourceModule !== "") {
      writer.uint32(90).string(message.sourceModule);
    }
    if (message.sourceAction !== "") {
      writer.uint32(98).string(message.sourceAction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.notificationType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.priority = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sourceModule = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.sourceAction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateNotification {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      notificationType: isSet(object.notificationType) ? globalThis.String(object.notificationType) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
      sourceModule: isSet(object.sourceModule) ? globalThis.String(object.sourceModule) : "",
      sourceAction: isSet(object.sourceAction) ? globalThis.String(object.sourceAction) : "",
    };
  },

  toJSON(message: MsgUpdateNotification): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.notificationType !== "") {
      obj.notificationType = message.notificationType;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.priority !== "") {
      obj.priority = message.priority;
    }
    if (message.sourceModule !== "") {
      obj.sourceModule = message.sourceModule;
    }
    if (message.sourceAction !== "") {
      obj.sourceAction = message.sourceAction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNotification>, I>>(base?: I): MsgUpdateNotification {
    return MsgUpdateNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNotification>, I>>(object: I): MsgUpdateNotification {
    const message = createBaseMsgUpdateNotification();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.notificationType = object.notificationType ?? "";
    message.title = object.title ?? "";
    message.message = object.message ?? "";
    message.data = object.data ?? "";
    message.isRead = object.isRead ?? false;
    message.createdAt = object.createdAt ?? 0;
    message.priority = object.priority ?? "";
    message.sourceModule = object.sourceModule ?? "";
    message.sourceAction = object.sourceAction ?? "";
    return message;
  },
};

function createBaseMsgUpdateNotificationResponse(): MsgUpdateNotificationResponse {
  return {};
}

export const MsgUpdateNotificationResponse: MessageFns<MsgUpdateNotificationResponse> = {
  encode(_: MsgUpdateNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateNotificationResponse {
    return {};
  },

  toJSON(_: MsgUpdateNotificationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNotificationResponse>, I>>(base?: I): MsgUpdateNotificationResponse {
    return MsgUpdateNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNotificationResponse>, I>>(_: I): MsgUpdateNotificationResponse {
    const message = createBaseMsgUpdateNotificationResponse();
    return message;
  },
};

function createBaseMsgDeleteNotification(): MsgDeleteNotification {
  return { creator: "", index: "" };
}

export const MsgDeleteNotification: MessageFns<MsgDeleteNotification> = {
  encode(message: MsgDeleteNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteNotification {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteNotification): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteNotification>, I>>(base?: I): MsgDeleteNotification {
    return MsgDeleteNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteNotification>, I>>(object: I): MsgDeleteNotification {
    const message = createBaseMsgDeleteNotification();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteNotificationResponse(): MsgDeleteNotificationResponse {
  return {};
}

export const MsgDeleteNotificationResponse: MessageFns<MsgDeleteNotificationResponse> = {
  encode(_: MsgDeleteNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteNotificationResponse {
    return {};
  },

  toJSON(_: MsgDeleteNotificationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteNotificationResponse>, I>>(base?: I): MsgDeleteNotificationResponse {
    return MsgDeleteNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteNotificationResponse>, I>>(_: I): MsgDeleteNotificationResponse {
    const message = createBaseMsgDeleteNotificationResponse();
    return message;
  },
};

function createBaseMsgCreateNotificationSettings(): MsgCreateNotificationSettings {
  return {
    creator: "",
    index: "",
    userAddress: "",
    emailEnabled: false,
    pushEnabled: false,
    smsEnabled: false,
    emailAddress: "",
    phoneNumber: "",
    notificationTypes: [],
    frequency: "",
  };
}

export const MsgCreateNotificationSettings: MessageFns<MsgCreateNotificationSettings> = {
  encode(message: MsgCreateNotificationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.emailEnabled !== false) {
      writer.uint32(32).bool(message.emailEnabled);
    }
    if (message.pushEnabled !== false) {
      writer.uint32(40).bool(message.pushEnabled);
    }
    if (message.smsEnabled !== false) {
      writer.uint32(48).bool(message.smsEnabled);
    }
    if (message.emailAddress !== "") {
      writer.uint32(58).string(message.emailAddress);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(66).string(message.phoneNumber);
    }
    for (const v of message.notificationTypes) {
      writer.uint32(74).string(v!);
    }
    if (message.frequency !== "") {
      writer.uint32(82).string(message.frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateNotificationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNotificationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.emailEnabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pushEnabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.smsEnabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.notificationTypes.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.frequency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNotificationSettings {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      emailEnabled: isSet(object.emailEnabled) ? globalThis.Boolean(object.emailEnabled) : false,
      pushEnabled: isSet(object.pushEnabled) ? globalThis.Boolean(object.pushEnabled) : false,
      smsEnabled: isSet(object.smsEnabled) ? globalThis.Boolean(object.smsEnabled) : false,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      notificationTypes: globalThis.Array.isArray(object?.notificationTypes)
        ? object.notificationTypes.map((e: any) => globalThis.String(e))
        : [],
      frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : "",
    };
  },

  toJSON(message: MsgCreateNotificationSettings): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.emailEnabled !== false) {
      obj.emailEnabled = message.emailEnabled;
    }
    if (message.pushEnabled !== false) {
      obj.pushEnabled = message.pushEnabled;
    }
    if (message.smsEnabled !== false) {
      obj.smsEnabled = message.smsEnabled;
    }
    if (message.emailAddress !== "") {
      obj.emailAddress = message.emailAddress;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.notificationTypes?.length) {
      obj.notificationTypes = message.notificationTypes;
    }
    if (message.frequency !== "") {
      obj.frequency = message.frequency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNotificationSettings>, I>>(base?: I): MsgCreateNotificationSettings {
    return MsgCreateNotificationSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNotificationSettings>, I>>(
    object: I,
  ): MsgCreateNotificationSettings {
    const message = createBaseMsgCreateNotificationSettings();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.emailEnabled = object.emailEnabled ?? false;
    message.pushEnabled = object.pushEnabled ?? false;
    message.smsEnabled = object.smsEnabled ?? false;
    message.emailAddress = object.emailAddress ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.notificationTypes = object.notificationTypes?.map((e) => e) || [];
    message.frequency = object.frequency ?? "";
    return message;
  },
};

function createBaseMsgCreateNotificationSettingsResponse(): MsgCreateNotificationSettingsResponse {
  return {};
}

export const MsgCreateNotificationSettingsResponse: MessageFns<MsgCreateNotificationSettingsResponse> = {
  encode(_: MsgCreateNotificationSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateNotificationSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNotificationSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateNotificationSettingsResponse {
    return {};
  },

  toJSON(_: MsgCreateNotificationSettingsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNotificationSettingsResponse>, I>>(
    base?: I,
  ): MsgCreateNotificationSettingsResponse {
    return MsgCreateNotificationSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNotificationSettingsResponse>, I>>(
    _: I,
  ): MsgCreateNotificationSettingsResponse {
    const message = createBaseMsgCreateNotificationSettingsResponse();
    return message;
  },
};

function createBaseMsgUpdateNotificationSettings(): MsgUpdateNotificationSettings {
  return {
    creator: "",
    index: "",
    userAddress: "",
    emailEnabled: false,
    pushEnabled: false,
    smsEnabled: false,
    emailAddress: "",
    phoneNumber: "",
    notificationTypes: [],
    frequency: "",
  };
}

export const MsgUpdateNotificationSettings: MessageFns<MsgUpdateNotificationSettings> = {
  encode(message: MsgUpdateNotificationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.userAddress !== "") {
      writer.uint32(26).string(message.userAddress);
    }
    if (message.emailEnabled !== false) {
      writer.uint32(32).bool(message.emailEnabled);
    }
    if (message.pushEnabled !== false) {
      writer.uint32(40).bool(message.pushEnabled);
    }
    if (message.smsEnabled !== false) {
      writer.uint32(48).bool(message.smsEnabled);
    }
    if (message.emailAddress !== "") {
      writer.uint32(58).string(message.emailAddress);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(66).string(message.phoneNumber);
    }
    for (const v of message.notificationTypes) {
      writer.uint32(74).string(v!);
    }
    if (message.frequency !== "") {
      writer.uint32(82).string(message.frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNotificationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNotificationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.emailEnabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pushEnabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.smsEnabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.notificationTypes.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.frequency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateNotificationSettings {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      userAddress: isSet(object.userAddress) ? globalThis.String(object.userAddress) : "",
      emailEnabled: isSet(object.emailEnabled) ? globalThis.Boolean(object.emailEnabled) : false,
      pushEnabled: isSet(object.pushEnabled) ? globalThis.Boolean(object.pushEnabled) : false,
      smsEnabled: isSet(object.smsEnabled) ? globalThis.Boolean(object.smsEnabled) : false,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      notificationTypes: globalThis.Array.isArray(object?.notificationTypes)
        ? object.notificationTypes.map((e: any) => globalThis.String(e))
        : [],
      frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : "",
    };
  },

  toJSON(message: MsgUpdateNotificationSettings): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.emailEnabled !== false) {
      obj.emailEnabled = message.emailEnabled;
    }
    if (message.pushEnabled !== false) {
      obj.pushEnabled = message.pushEnabled;
    }
    if (message.smsEnabled !== false) {
      obj.smsEnabled = message.smsEnabled;
    }
    if (message.emailAddress !== "") {
      obj.emailAddress = message.emailAddress;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.notificationTypes?.length) {
      obj.notificationTypes = message.notificationTypes;
    }
    if (message.frequency !== "") {
      obj.frequency = message.frequency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNotificationSettings>, I>>(base?: I): MsgUpdateNotificationSettings {
    return MsgUpdateNotificationSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNotificationSettings>, I>>(
    object: I,
  ): MsgUpdateNotificationSettings {
    const message = createBaseMsgUpdateNotificationSettings();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    message.userAddress = object.userAddress ?? "";
    message.emailEnabled = object.emailEnabled ?? false;
    message.pushEnabled = object.pushEnabled ?? false;
    message.smsEnabled = object.smsEnabled ?? false;
    message.emailAddress = object.emailAddress ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.notificationTypes = object.notificationTypes?.map((e) => e) || [];
    message.frequency = object.frequency ?? "";
    return message;
  },
};

function createBaseMsgUpdateNotificationSettingsResponse(): MsgUpdateNotificationSettingsResponse {
  return {};
}

export const MsgUpdateNotificationSettingsResponse: MessageFns<MsgUpdateNotificationSettingsResponse> = {
  encode(_: MsgUpdateNotificationSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNotificationSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNotificationSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateNotificationSettingsResponse {
    return {};
  },

  toJSON(_: MsgUpdateNotificationSettingsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNotificationSettingsResponse>, I>>(
    base?: I,
  ): MsgUpdateNotificationSettingsResponse {
    return MsgUpdateNotificationSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNotificationSettingsResponse>, I>>(
    _: I,
  ): MsgUpdateNotificationSettingsResponse {
    const message = createBaseMsgUpdateNotificationSettingsResponse();
    return message;
  },
};

function createBaseMsgDeleteNotificationSettings(): MsgDeleteNotificationSettings {
  return { creator: "", index: "" };
}

export const MsgDeleteNotificationSettings: MessageFns<MsgDeleteNotificationSettings> = {
  encode(message: MsgDeleteNotificationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteNotificationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteNotificationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteNotificationSettings {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
    };
  },

  toJSON(message: MsgDeleteNotificationSettings): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteNotificationSettings>, I>>(base?: I): MsgDeleteNotificationSettings {
    return MsgDeleteNotificationSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteNotificationSettings>, I>>(
    object: I,
  ): MsgDeleteNotificationSettings {
    const message = createBaseMsgDeleteNotificationSettings();
    message.creator = object.creator ?? "";
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseMsgDeleteNotificationSettingsResponse(): MsgDeleteNotificationSettingsResponse {
  return {};
}

export const MsgDeleteNotificationSettingsResponse: MessageFns<MsgDeleteNotificationSettingsResponse> = {
  encode(_: MsgDeleteNotificationSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteNotificationSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteNotificationSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteNotificationSettingsResponse {
    return {};
  },

  toJSON(_: MsgDeleteNotificationSettingsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteNotificationSettingsResponse>, I>>(
    base?: I,
  ): MsgDeleteNotificationSettingsResponse {
    return MsgDeleteNotificationSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteNotificationSettingsResponse>, I>>(
    _: I,
  ): MsgDeleteNotificationSettingsResponse {
    const message = createBaseMsgDeleteNotificationSettingsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreateNotification(request: MsgCreateNotification): Promise<MsgCreateNotificationResponse>;
  UpdateNotification(request: MsgUpdateNotification): Promise<MsgUpdateNotificationResponse>;
  DeleteNotification(request: MsgDeleteNotification): Promise<MsgDeleteNotificationResponse>;
  CreateNotificationSettings(request: MsgCreateNotificationSettings): Promise<MsgCreateNotificationSettingsResponse>;
  UpdateNotificationSettings(request: MsgUpdateNotificationSettings): Promise<MsgUpdateNotificationSettingsResponse>;
  DeleteNotificationSettings(request: MsgDeleteNotificationSettings): Promise<MsgDeleteNotificationSettingsResponse>;
}

export const MsgServiceName = "skillchain.notifications.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateNotification = this.CreateNotification.bind(this);
    this.UpdateNotification = this.UpdateNotification.bind(this);
    this.DeleteNotification = this.DeleteNotification.bind(this);
    this.CreateNotificationSettings = this.CreateNotificationSettings.bind(this);
    this.UpdateNotificationSettings = this.UpdateNotificationSettings.bind(this);
    this.DeleteNotificationSettings = this.DeleteNotificationSettings.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateNotification(request: MsgCreateNotification): Promise<MsgCreateNotificationResponse> {
    const data = MsgCreateNotification.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateNotification", data);
    return promise.then((data) => MsgCreateNotificationResponse.decode(new BinaryReader(data)));
  }

  UpdateNotification(request: MsgUpdateNotification): Promise<MsgUpdateNotificationResponse> {
    const data = MsgUpdateNotification.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateNotification", data);
    return promise.then((data) => MsgUpdateNotificationResponse.decode(new BinaryReader(data)));
  }

  DeleteNotification(request: MsgDeleteNotification): Promise<MsgDeleteNotificationResponse> {
    const data = MsgDeleteNotification.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteNotification", data);
    return promise.then((data) => MsgDeleteNotificationResponse.decode(new BinaryReader(data)));
  }

  CreateNotificationSettings(request: MsgCreateNotificationSettings): Promise<MsgCreateNotificationSettingsResponse> {
    const data = MsgCreateNotificationSettings.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateNotificationSettings", data);
    return promise.then((data) => MsgCreateNotificationSettingsResponse.decode(new BinaryReader(data)));
  }

  UpdateNotificationSettings(request: MsgUpdateNotificationSettings): Promise<MsgUpdateNotificationSettingsResponse> {
    const data = MsgUpdateNotificationSettings.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateNotificationSettings", data);
    return promise.then((data) => MsgUpdateNotificationSettingsResponse.decode(new BinaryReader(data)));
  }

  DeleteNotificationSettings(request: MsgDeleteNotificationSettings): Promise<MsgDeleteNotificationSettingsResponse> {
    const data = MsgDeleteNotificationSettings.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteNotificationSettings", data);
    return promise.then((data) => MsgDeleteNotificationSettingsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
