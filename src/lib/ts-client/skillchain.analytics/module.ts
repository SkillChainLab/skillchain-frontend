// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateRevenueRecord } from "./types/skillchain/analytics/tx";
import { QueryGetPlatformMetricResponse } from "./types/skillchain/analytics/query";
import { QueryAllUserActivityRequest } from "./types/skillchain/analytics/query";
import { QueryGetRevenueRecordRequest } from "./types/skillchain/analytics/query";
import { QueryAllRevenueRecordResponse } from "./types/skillchain/analytics/query";
import { QueryAllUserActivityResponse } from "./types/skillchain/analytics/query";
import { RevenueRecord } from "./types/skillchain/analytics/revenue_record";
import { MsgUpdatePlatformMetric } from "./types/skillchain/analytics/tx";
import { MsgCreateUserActivity } from "./types/skillchain/analytics/tx";
import { GenesisState } from "./types/skillchain/analytics/genesis";
import { PlatformMetric } from "./types/skillchain/analytics/platform_metric";
import { QueryGetUserActivityRequest } from "./types/skillchain/analytics/query";
import { MsgUpdateParamsResponse } from "./types/skillchain/analytics/tx";
import { MsgCreateUserActivityResponse } from "./types/skillchain/analytics/tx";
import { MsgDeleteUserActivityResponse } from "./types/skillchain/analytics/tx";
import { MsgUpdateRevenueRecord } from "./types/skillchain/analytics/tx";
import { QueryGetUserActivityResponse } from "./types/skillchain/analytics/query";
import { QueryAllRevenueRecordRequest } from "./types/skillchain/analytics/query";
import { MsgDeleteUserActivity } from "./types/skillchain/analytics/tx";
import { QueryGetPlatformMetricRequest } from "./types/skillchain/analytics/query";
import { MsgCreatePlatformMetricResponse } from "./types/skillchain/analytics/tx";
import { MsgDeletePlatformMetricResponse } from "./types/skillchain/analytics/tx";
import { QueryParamsRequest } from "./types/skillchain/analytics/query";
import { QueryAllPlatformMetricResponse } from "./types/skillchain/analytics/query";
import { MsgDeletePlatformMetric } from "./types/skillchain/analytics/tx";
import { MsgCreateRevenueRecordResponse } from "./types/skillchain/analytics/tx";
import { QueryParamsResponse } from "./types/skillchain/analytics/query";
import { QueryAllPlatformMetricRequest } from "./types/skillchain/analytics/query";
import { QueryGetRevenueRecordResponse } from "./types/skillchain/analytics/query";
import { Params } from "./types/skillchain/analytics/params";
import { MsgUpdateParams } from "./types/skillchain/analytics/tx";
import { MsgCreatePlatformMetric } from "./types/skillchain/analytics/tx";
import { MsgUpdateRevenueRecordResponse } from "./types/skillchain/analytics/tx";
import { UserActivity } from "./types/skillchain/analytics/user_activity";
import { MsgDeleteRevenueRecord } from "./types/skillchain/analytics/tx";
import { MsgUpdatePlatformMetricResponse } from "./types/skillchain/analytics/tx";
import { MsgUpdateUserActivity } from "./types/skillchain/analytics/tx";
import { MsgUpdateUserActivityResponse } from "./types/skillchain/analytics/tx";
import { MsgDeleteRevenueRecordResponse } from "./types/skillchain/analytics/tx";

import { Params as typeParams} from "./types"
import { PlatformMetric as typePlatformMetric} from "./types"
import { RevenueRecord as typeRevenueRecord} from "./types"
import { UserActivity as typeUserActivity} from "./types"

export { MsgCreateRevenueRecord, QueryGetPlatformMetricResponse, QueryAllUserActivityRequest, QueryGetRevenueRecordRequest, QueryAllRevenueRecordResponse, QueryAllUserActivityResponse, RevenueRecord, MsgUpdatePlatformMetric, MsgCreateUserActivity, GenesisState, PlatformMetric, QueryGetUserActivityRequest, MsgUpdateParamsResponse, MsgCreateUserActivityResponse, MsgDeleteUserActivityResponse, MsgUpdateRevenueRecord, QueryGetUserActivityResponse, QueryAllRevenueRecordRequest, MsgDeleteUserActivity, QueryGetPlatformMetricRequest, MsgCreatePlatformMetricResponse, MsgDeletePlatformMetricResponse, QueryParamsRequest, QueryAllPlatformMetricResponse, MsgDeletePlatformMetric, MsgCreateRevenueRecordResponse, QueryParamsResponse, QueryAllPlatformMetricRequest, QueryGetRevenueRecordResponse, Params, MsgUpdateParams, MsgCreatePlatformMetric, MsgUpdateRevenueRecordResponse, UserActivity, MsgDeleteRevenueRecord, MsgUpdatePlatformMetricResponse, MsgUpdateUserActivity, MsgUpdateUserActivityResponse, MsgDeleteRevenueRecordResponse };

type sendMsgCreateRevenueRecordParams = {
  value: MsgCreateRevenueRecord,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPlatformMetricResponseParams = {
  value: QueryGetPlatformMetricResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUserActivityRequestParams = {
  value: QueryAllUserActivityRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetRevenueRecordRequestParams = {
  value: QueryGetRevenueRecordRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllRevenueRecordResponseParams = {
  value: QueryAllRevenueRecordResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllUserActivityResponseParams = {
  value: QueryAllUserActivityResponse,
  fee?: StdFee,
  memo?: string
};

type sendRevenueRecordParams = {
  value: RevenueRecord,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePlatformMetricParams = {
  value: MsgUpdatePlatformMetric,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateUserActivityParams = {
  value: MsgCreateUserActivity,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendPlatformMetricParams = {
  value: PlatformMetric,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUserActivityRequestParams = {
  value: QueryGetUserActivityRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateUserActivityResponseParams = {
  value: MsgCreateUserActivityResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteUserActivityResponseParams = {
  value: MsgDeleteUserActivityResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRevenueRecordParams = {
  value: MsgUpdateRevenueRecord,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetUserActivityResponseParams = {
  value: QueryGetUserActivityResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllRevenueRecordRequestParams = {
  value: QueryAllRevenueRecordRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteUserActivityParams = {
  value: MsgDeleteUserActivity,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPlatformMetricRequestParams = {
  value: QueryGetPlatformMetricRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePlatformMetricResponseParams = {
  value: MsgCreatePlatformMetricResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeletePlatformMetricResponseParams = {
  value: MsgDeletePlatformMetricResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllPlatformMetricResponseParams = {
  value: QueryAllPlatformMetricResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeletePlatformMetricParams = {
  value: MsgDeletePlatformMetric,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateRevenueRecordResponseParams = {
  value: MsgCreateRevenueRecordResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllPlatformMetricRequestParams = {
  value: QueryAllPlatformMetricRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetRevenueRecordResponseParams = {
  value: QueryGetRevenueRecordResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePlatformMetricParams = {
  value: MsgCreatePlatformMetric,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRevenueRecordResponseParams = {
  value: MsgUpdateRevenueRecordResponse,
  fee?: StdFee,
  memo?: string
};

type sendUserActivityParams = {
  value: UserActivity,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteRevenueRecordParams = {
  value: MsgDeleteRevenueRecord,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePlatformMetricResponseParams = {
  value: MsgUpdatePlatformMetricResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateUserActivityParams = {
  value: MsgUpdateUserActivity,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateUserActivityResponseParams = {
  value: MsgUpdateUserActivityResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteRevenueRecordResponseParams = {
  value: MsgDeleteRevenueRecordResponse,
  fee?: StdFee,
  memo?: string
};


type msgCreateRevenueRecordParams = {
  value: MsgCreateRevenueRecord,
};

type queryGetPlatformMetricResponseParams = {
  value: QueryGetPlatformMetricResponse,
};

type queryAllUserActivityRequestParams = {
  value: QueryAllUserActivityRequest,
};

type queryGetRevenueRecordRequestParams = {
  value: QueryGetRevenueRecordRequest,
};

type queryAllRevenueRecordResponseParams = {
  value: QueryAllRevenueRecordResponse,
};

type queryAllUserActivityResponseParams = {
  value: QueryAllUserActivityResponse,
};

type revenueRecordParams = {
  value: RevenueRecord,
};

type msgUpdatePlatformMetricParams = {
  value: MsgUpdatePlatformMetric,
};

type msgCreateUserActivityParams = {
  value: MsgCreateUserActivity,
};

type genesisStateParams = {
  value: GenesisState,
};

type platformMetricParams = {
  value: PlatformMetric,
};

type queryGetUserActivityRequestParams = {
  value: QueryGetUserActivityRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgCreateUserActivityResponseParams = {
  value: MsgCreateUserActivityResponse,
};

type msgDeleteUserActivityResponseParams = {
  value: MsgDeleteUserActivityResponse,
};

type msgUpdateRevenueRecordParams = {
  value: MsgUpdateRevenueRecord,
};

type queryGetUserActivityResponseParams = {
  value: QueryGetUserActivityResponse,
};

type queryAllRevenueRecordRequestParams = {
  value: QueryAllRevenueRecordRequest,
};

type msgDeleteUserActivityParams = {
  value: MsgDeleteUserActivity,
};

type queryGetPlatformMetricRequestParams = {
  value: QueryGetPlatformMetricRequest,
};

type msgCreatePlatformMetricResponseParams = {
  value: MsgCreatePlatformMetricResponse,
};

type msgDeletePlatformMetricResponseParams = {
  value: MsgDeletePlatformMetricResponse,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryAllPlatformMetricResponseParams = {
  value: QueryAllPlatformMetricResponse,
};

type msgDeletePlatformMetricParams = {
  value: MsgDeletePlatformMetric,
};

type msgCreateRevenueRecordResponseParams = {
  value: MsgCreateRevenueRecordResponse,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryAllPlatformMetricRequestParams = {
  value: QueryAllPlatformMetricRequest,
};

type queryGetRevenueRecordResponseParams = {
  value: QueryGetRevenueRecordResponse,
};

type paramsParams = {
  value: Params,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreatePlatformMetricParams = {
  value: MsgCreatePlatformMetric,
};

type msgUpdateRevenueRecordResponseParams = {
  value: MsgUpdateRevenueRecordResponse,
};

type userActivityParams = {
  value: UserActivity,
};

type msgDeleteRevenueRecordParams = {
  value: MsgDeleteRevenueRecord,
};

type msgUpdatePlatformMetricResponseParams = {
  value: MsgUpdatePlatformMetricResponse,
};

type msgUpdateUserActivityParams = {
  value: MsgUpdateUserActivity,
};

type msgUpdateUserActivityResponseParams = {
  value: MsgUpdateUserActivityResponse,
};

type msgDeleteRevenueRecordResponseParams = {
  value: MsgDeleteRevenueRecordResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateRevenueRecord({ value, fee, memo }: sendMsgCreateRevenueRecordParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateRevenueRecord: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateRevenueRecord({ value: MsgCreateRevenueRecord.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateRevenueRecord: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPlatformMetricResponse({ value, fee, memo }: sendQueryGetPlatformMetricResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPlatformMetricResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPlatformMetricResponse({ value: QueryGetPlatformMetricResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPlatformMetricResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUserActivityRequest({ value, fee, memo }: sendQueryAllUserActivityRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUserActivityRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUserActivityRequest({ value: QueryAllUserActivityRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUserActivityRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetRevenueRecordRequest({ value, fee, memo }: sendQueryGetRevenueRecordRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetRevenueRecordRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetRevenueRecordRequest({ value: QueryGetRevenueRecordRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetRevenueRecordRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllRevenueRecordResponse({ value, fee, memo }: sendQueryAllRevenueRecordResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllRevenueRecordResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllRevenueRecordResponse({ value: QueryAllRevenueRecordResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllRevenueRecordResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllUserActivityResponse({ value, fee, memo }: sendQueryAllUserActivityResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllUserActivityResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllUserActivityResponse({ value: QueryAllUserActivityResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllUserActivityResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendRevenueRecord({ value, fee, memo }: sendRevenueRecordParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendRevenueRecord: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.revenueRecord({ value: RevenueRecord.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendRevenueRecord: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePlatformMetric({ value, fee, memo }: sendMsgUpdatePlatformMetricParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePlatformMetric: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdatePlatformMetric({ value: MsgUpdatePlatformMetric.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePlatformMetric: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateUserActivity({ value, fee, memo }: sendMsgCreateUserActivityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateUserActivity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateUserActivity({ value: MsgCreateUserActivity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateUserActivity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPlatformMetric({ value, fee, memo }: sendPlatformMetricParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPlatformMetric: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.platformMetric({ value: PlatformMetric.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPlatformMetric: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUserActivityRequest({ value, fee, memo }: sendQueryGetUserActivityRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUserActivityRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUserActivityRequest({ value: QueryGetUserActivityRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUserActivityRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateUserActivityResponse({ value, fee, memo }: sendMsgCreateUserActivityResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateUserActivityResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateUserActivityResponse({ value: MsgCreateUserActivityResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateUserActivityResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteUserActivityResponse({ value, fee, memo }: sendMsgDeleteUserActivityResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteUserActivityResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteUserActivityResponse({ value: MsgDeleteUserActivityResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteUserActivityResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRevenueRecord({ value, fee, memo }: sendMsgUpdateRevenueRecordParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRevenueRecord: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRevenueRecord({ value: MsgUpdateRevenueRecord.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRevenueRecord: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetUserActivityResponse({ value, fee, memo }: sendQueryGetUserActivityResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetUserActivityResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetUserActivityResponse({ value: QueryGetUserActivityResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetUserActivityResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllRevenueRecordRequest({ value, fee, memo }: sendQueryAllRevenueRecordRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllRevenueRecordRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllRevenueRecordRequest({ value: QueryAllRevenueRecordRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllRevenueRecordRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteUserActivity({ value, fee, memo }: sendMsgDeleteUserActivityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteUserActivity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteUserActivity({ value: MsgDeleteUserActivity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteUserActivity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPlatformMetricRequest({ value, fee, memo }: sendQueryGetPlatformMetricRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPlatformMetricRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPlatformMetricRequest({ value: QueryGetPlatformMetricRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPlatformMetricRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePlatformMetricResponse({ value, fee, memo }: sendMsgCreatePlatformMetricResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePlatformMetricResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePlatformMetricResponse({ value: MsgCreatePlatformMetricResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePlatformMetricResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeletePlatformMetricResponse({ value, fee, memo }: sendMsgDeletePlatformMetricResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeletePlatformMetricResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeletePlatformMetricResponse({ value: MsgDeletePlatformMetricResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeletePlatformMetricResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllPlatformMetricResponse({ value, fee, memo }: sendQueryAllPlatformMetricResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllPlatformMetricResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllPlatformMetricResponse({ value: QueryAllPlatformMetricResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllPlatformMetricResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeletePlatformMetric({ value, fee, memo }: sendMsgDeletePlatformMetricParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeletePlatformMetric: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeletePlatformMetric({ value: MsgDeletePlatformMetric.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeletePlatformMetric: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateRevenueRecordResponse({ value, fee, memo }: sendMsgCreateRevenueRecordResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateRevenueRecordResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateRevenueRecordResponse({ value: MsgCreateRevenueRecordResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateRevenueRecordResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllPlatformMetricRequest({ value, fee, memo }: sendQueryAllPlatformMetricRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllPlatformMetricRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllPlatformMetricRequest({ value: QueryAllPlatformMetricRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllPlatformMetricRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetRevenueRecordResponse({ value, fee, memo }: sendQueryGetRevenueRecordResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetRevenueRecordResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetRevenueRecordResponse({ value: QueryGetRevenueRecordResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetRevenueRecordResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePlatformMetric({ value, fee, memo }: sendMsgCreatePlatformMetricParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePlatformMetric: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePlatformMetric({ value: MsgCreatePlatformMetric.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePlatformMetric: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRevenueRecordResponse({ value, fee, memo }: sendMsgUpdateRevenueRecordResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRevenueRecordResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRevenueRecordResponse({ value: MsgUpdateRevenueRecordResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRevenueRecordResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendUserActivity({ value, fee, memo }: sendUserActivityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendUserActivity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.userActivity({ value: UserActivity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendUserActivity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteRevenueRecord({ value, fee, memo }: sendMsgDeleteRevenueRecordParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteRevenueRecord: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteRevenueRecord({ value: MsgDeleteRevenueRecord.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteRevenueRecord: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePlatformMetricResponse({ value, fee, memo }: sendMsgUpdatePlatformMetricResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePlatformMetricResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdatePlatformMetricResponse({ value: MsgUpdatePlatformMetricResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePlatformMetricResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateUserActivity({ value, fee, memo }: sendMsgUpdateUserActivityParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateUserActivity: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateUserActivity({ value: MsgUpdateUserActivity.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateUserActivity: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateUserActivityResponse({ value, fee, memo }: sendMsgUpdateUserActivityResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateUserActivityResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateUserActivityResponse({ value: MsgUpdateUserActivityResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateUserActivityResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteRevenueRecordResponse({ value, fee, memo }: sendMsgDeleteRevenueRecordResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteRevenueRecordResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteRevenueRecordResponse({ value: MsgDeleteRevenueRecordResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteRevenueRecordResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateRevenueRecord({ value }: msgCreateRevenueRecordParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreateRevenueRecord", value: MsgCreateRevenueRecord.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateRevenueRecord: Could not create message: ' + e.message)
			}
		},
		
		queryGetPlatformMetricResponse({ value }: queryGetPlatformMetricResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetPlatformMetricResponse", value: QueryGetPlatformMetricResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPlatformMetricResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllUserActivityRequest({ value }: queryAllUserActivityRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllUserActivityRequest", value: QueryAllUserActivityRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUserActivityRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetRevenueRecordRequest({ value }: queryGetRevenueRecordRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetRevenueRecordRequest", value: QueryGetRevenueRecordRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetRevenueRecordRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllRevenueRecordResponse({ value }: queryAllRevenueRecordResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllRevenueRecordResponse", value: QueryAllRevenueRecordResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllRevenueRecordResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllUserActivityResponse({ value }: queryAllUserActivityResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllUserActivityResponse", value: QueryAllUserActivityResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllUserActivityResponse: Could not create message: ' + e.message)
			}
		},
		
		revenueRecord({ value }: revenueRecordParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.RevenueRecord", value: RevenueRecord.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:RevenueRecord: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePlatformMetric({ value }: msgUpdatePlatformMetricParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdatePlatformMetric", value: MsgUpdatePlatformMetric.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePlatformMetric: Could not create message: ' + e.message)
			}
		},
		
		msgCreateUserActivity({ value }: msgCreateUserActivityParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreateUserActivity", value: MsgCreateUserActivity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateUserActivity: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		platformMetric({ value }: platformMetricParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.PlatformMetric", value: PlatformMetric.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:PlatformMetric: Could not create message: ' + e.message)
			}
		},
		
		queryGetUserActivityRequest({ value }: queryGetUserActivityRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetUserActivityRequest", value: QueryGetUserActivityRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUserActivityRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateUserActivityResponse({ value }: msgCreateUserActivityResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreateUserActivityResponse", value: MsgCreateUserActivityResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateUserActivityResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteUserActivityResponse({ value }: msgDeleteUserActivityResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeleteUserActivityResponse", value: MsgDeleteUserActivityResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteUserActivityResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRevenueRecord({ value }: msgUpdateRevenueRecordParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateRevenueRecord", value: MsgUpdateRevenueRecord.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRevenueRecord: Could not create message: ' + e.message)
			}
		},
		
		queryGetUserActivityResponse({ value }: queryGetUserActivityResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetUserActivityResponse", value: QueryGetUserActivityResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetUserActivityResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllRevenueRecordRequest({ value }: queryAllRevenueRecordRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllRevenueRecordRequest", value: QueryAllRevenueRecordRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllRevenueRecordRequest: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteUserActivity({ value }: msgDeleteUserActivityParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeleteUserActivity", value: MsgDeleteUserActivity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteUserActivity: Could not create message: ' + e.message)
			}
		},
		
		queryGetPlatformMetricRequest({ value }: queryGetPlatformMetricRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetPlatformMetricRequest", value: QueryGetPlatformMetricRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPlatformMetricRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePlatformMetricResponse({ value }: msgCreatePlatformMetricResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreatePlatformMetricResponse", value: MsgCreatePlatformMetricResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePlatformMetricResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeletePlatformMetricResponse({ value }: msgDeletePlatformMetricResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeletePlatformMetricResponse", value: MsgDeletePlatformMetricResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeletePlatformMetricResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllPlatformMetricResponse({ value }: queryAllPlatformMetricResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllPlatformMetricResponse", value: QueryAllPlatformMetricResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllPlatformMetricResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeletePlatformMetric({ value }: msgDeletePlatformMetricParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeletePlatformMetric", value: MsgDeletePlatformMetric.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeletePlatformMetric: Could not create message: ' + e.message)
			}
		},
		
		msgCreateRevenueRecordResponse({ value }: msgCreateRevenueRecordResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreateRevenueRecordResponse", value: MsgCreateRevenueRecordResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateRevenueRecordResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllPlatformMetricRequest({ value }: queryAllPlatformMetricRequestParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryAllPlatformMetricRequest", value: QueryAllPlatformMetricRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllPlatformMetricRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetRevenueRecordResponse({ value }: queryGetRevenueRecordResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.QueryGetRevenueRecordResponse", value: QueryGetRevenueRecordResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetRevenueRecordResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePlatformMetric({ value }: msgCreatePlatformMetricParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgCreatePlatformMetric", value: MsgCreatePlatformMetric.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePlatformMetric: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRevenueRecordResponse({ value }: msgUpdateRevenueRecordResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateRevenueRecordResponse", value: MsgUpdateRevenueRecordResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRevenueRecordResponse: Could not create message: ' + e.message)
			}
		},
		
		userActivity({ value }: userActivityParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.UserActivity", value: UserActivity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:UserActivity: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteRevenueRecord({ value }: msgDeleteRevenueRecordParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeleteRevenueRecord", value: MsgDeleteRevenueRecord.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteRevenueRecord: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePlatformMetricResponse({ value }: msgUpdatePlatformMetricResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdatePlatformMetricResponse", value: MsgUpdatePlatformMetricResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePlatformMetricResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateUserActivity({ value }: msgUpdateUserActivityParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateUserActivity", value: MsgUpdateUserActivity.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateUserActivity: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateUserActivityResponse({ value }: msgUpdateUserActivityResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgUpdateUserActivityResponse", value: MsgUpdateUserActivityResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateUserActivityResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteRevenueRecordResponse({ value }: msgDeleteRevenueRecordResponseParams): EncodeObject {
			try {
				return { typeUrl: "/skillchain.analytics.MsgDeleteRevenueRecordResponse", value: MsgDeleteRevenueRecordResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteRevenueRecordResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Params: getStructure(typeParams.fromPartial({})),
						PlatformMetric: getStructure(typePlatformMetric.fromPartial({})),
						RevenueRecord: getStructure(typeRevenueRecord.fromPartial({})),
						UserActivity: getStructure(typeUserActivity.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			SkillchainAnalytics: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;